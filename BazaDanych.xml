<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2018.1.2 (Build 309U_SU)" ts="2019-06-08 21:16:39">
<Routine name="User.Adres.1" type="INT" languagemode="0" generated="1" timestamp="65172,73146.462532"><![CDATA[
 ;User.Adres.1
 ;(C)InterSystems, generated for class User.Adres.  Do NOT edit. 06/08/2019 08:19:06PM
 ;;59334C50;User.Adres
 ;
%BindExport(dev,Seen,RegisterOref,AllowedDepth,AllowedCapacity) public {
   i $d(Seen(+$this)) q 1
   Set Seen(+$this)=$this
   s sc = 1
 s proporef=..%source
   d:RegisterOref InitObjVar^%SYS.BINDSRV($this)
   i dev'="" s t=$io u dev i $zobjexport($this_"",3)+$zobjexport($this."%%OID",3)+$zobjexport($this,3)!1 u t
 If AllowedDepth>0 Set AllowedDepth = AllowedDepth - 1
 If AllowedCapacity>0 Set AllowedCapacity = AllowedCapacity - 1/1
 s proporef=..%source
   Quit sc }
%Construct(initvalue) public {
	Set i%%seriesCount=1
	Kill i%%data,i%%seriesNames
	Quit 1 }
%ConstructCloneInit(object,deep=0,cloned,location) public {
	Set i%"%%OID"=""
	If deep>0 {
		If $isobject(..%source)=1 Set r%%source=r%%source.%ConstructClone(1,.cloned),i%%source=""
	}
	Quit 1 }
%CopyDataFromModel(pData,pTypes,pSeries="") public {
 // Generated by %ZEN.DataModel.ObjectDataModel
 Set tSC = 1
 For sno = $S(pSeries="":1,1:pSeries):1:..%seriesCount {
 Set pData(sno,"miasto") = ..miastoLogicalToDisplay(..miasto)
 Set pData(sno,"kraj") = ..krajLogicalToDisplay(..kraj)
 Set pData(sno,"ulica") = ..ulicaLogicalToDisplay(..ulica)
 Set pData(sno,"kodPocztowy") = ..kodPocztowyLogicalToDisplay(..kodPocztowy)
 Quit:pSeries'=""
 }
 If ('tSC) Quit tSC
 Quit tSC }
%CopyDataToModel(pData,pSeries="") public {
 // Generated by %ZEN.DataModel.ObjectDataModel
 Set tSC = 1
 For sno = $S(pSeries="":1,1:pSeries):1:..%seriesCount {
 Set ..miasto = ..miastoDisplayToLogical($G(pData(sno,"miasto")))
 Set ..kraj = ..krajDisplayToLogical($G(pData(sno,"kraj")))
 Set ..ulica = ..ulicaDisplayToLogical($G(pData(sno,"ulica")))
 Set ..kodPocztowy = ..kodPocztowyDisplayToLogical($G(pData(sno,"kodPocztowy")))
 Quit:pSeries'=""
 }
 If ('tSC) Quit tSC
 Quit tSC }
%GetPropertyInfo(pInfo,pExtended=0,pModelId="",pContainer="") public {
 // Generated by %ZEN.DataModel.ObjectDataModel
 Set tSC = 1
 Set tProp = $S(pContainer="":"",1:pContainer_".")_"miasto"
 Set pInfo(tProp) = $I(pInfo)
 Set tProp = $S(pContainer="":"",1:pContainer_".")_"kraj"
 Set pInfo(tProp) = $I(pInfo)
 Set tProp = $S(pContainer="":"",1:pContainer_".")_"ulica"
 Set pInfo(tProp) = $I(pInfo)
 Set tProp = $S(pContainer="":"",1:pContainer_".")_"kodPocztowy"
 Set pInfo(tProp) = $I(pInfo)
 If (pExtended) {
  Set tProp = $S(pContainer="":"",1:pContainer_".")_"miasto"
  Set pInfo(tProp,"%type") = "combobox"
  Set pInfo(tProp,"valueList") = ",Warszawa,Gdynia, Zamosc,Gdansk,Krakow"
  Set tProp = $S(pContainer="":"",1:pContainer_".")_"kraj"
  Set pInfo(tProp,"%type") = "radioSet"
  Set pInfo(tProp,"valueList") = ",Polska"
  Set tProp = $S(pContainer="":"",1:pContainer_".")_"ulica"
  Set pInfo(tProp,"%type") = "combobox"
  Set pInfo(tProp,"valueList") = ",Czumy,Peowiakow,Wiejska,Zamojska"
  Set tProp = $S(pContainer="":"",1:pContainer_".")_"kodPocztowy"
  Set pInfo(tProp,"%type") = "text"
  Set pInfo(tProp,"size") = 20
  Set pInfo(tProp,"maxlength") = 20
 }
 Quit tSC }
%GetPropertyList(pModelId="",pContainer="") public {
	Quit ..%BuildPropertyList(pModelId,pContainer) }
%GetSerial(force=0)
	i i%kodPocztowy="",i%kraj="",i%miasto="",i%ulica="" Quit ""
	Quit $lb(i%miasto,i%kraj,i%ulica,i%kodPocztowy)
%GetSwizzleObject(force=0,oid) public {
	Set $ZTrap="%GetSwizzleObjectERR"
	New %objTX If '$data(%objTX2) New %objTX2 Set %objTX2=1
	If $get(%objTX2(+$this)) Set sc=..%BuildObjectGraph(1) Quit:('sc) sc Set intRef=+$this,objValue=$get(%objTX(1,intRef,1)),sc=..%SerializeObject(.objValue,1) Set:(''sc) %objTX(1,intRef,1)=objValue Set oid=objValue Quit sc
	Set related  = $select(force=2:1,1:0), oid = ""
	Set traninit=0 If +$g(%objtxSTATUS)=0 {
		Set traninit=1 Kill %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxMODIFIED
		If '$zu(115,9) { Set %objtxSTATUS=1 } Else { Set %objtxSTATUS=2,%objtxLIST(+$this)="" TStart }
	}
	Set sc=..%BuildObjectGraph(related+2) Quit:('sc) sc
	Set %objTX2(+$this)=1
	If '$data(%objTX(2,+$this)) { Set %objTX(2,+$this)=2 }
	Set %objTX(3)=0,intRef="" For  Set intRef=$order(%objTX(2,intRef)) Quit:intRef=""  If '$data(%objTX(1,intRef,2)) Set %objTX(3,$increment(%objTX(3)))=%objTX(1,intRef) Kill %objTX(2,intRef)
	For  Quit:%objTX(3)<1  Set ptr=%objTX(3),objRef=%objTX(3,ptr),%objTX(3)=%objTX(3)-1 Kill %objTX(3,ptr) Set intRef=+objRef,objValue=$get(%objTX(1,intRef,1)),sc=objRef.%SerializeObject(.objValue) Do  Set %objTX(1,intRef,1)=objValue Kill %objTX(1,intRef,3) Do $system.CLS.SetModified(objRef,0)
	. If ('sc) Kill:$g(%objtxSTATUS)=2 %objtxLIST(+objRef),%objtxMODIFIED(+objRef) ZTrap "SG"
	. If $g(%objtxSTATUS)=2,objRef.%IsModified() Set %objtxMODIFIED(+objRef)=$system.CLS.GetModifiedBits(objRef)
	. Set intSucc="" For  Set intSucc=$order(%objTX(1,+objRef,3,intSucc)) Quit:intSucc=""  Kill %objTX(1,+objRef,3,intSucc),%objTX(1,intSucc,2,+objRef) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$i(%objTX(3)))=%objTX(1,intSucc) Kill %objTX(2,intSucc)
	For  Set pserial=0 Do  Quit:'pserial
	. Set intRef="" For  Set intRef=$order(%objTX(2,intRef)) Quit:intRef=""  Set intPred="" For  Set intPred=$order(%objTX(1,intRef,2,intPred)) Quit:intPred=""  If $get(%objTX(1,intPred,6))=1 Set objValue=$get(%objTX(1,intPred,1)),sc=(%objTX(1,intPred)).%SerializeObject(.objValue,1) If (''sc) Set pserial=1,%objTX(1,intPred,1)=objValue Do
	. . Set intSucc="" For  Set intSucc=$order(%objTX(1,intPred,3,intSucc)) Quit:intSucc=""  Kill %objTX(1,intPred,3,intSucc),%objTX(1,intSucc,2,intPred) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$i(%objTX(3)))=%objTX(1,intSucc) Kill %objTX(2,intSucc)
	. . For  Quit:%objTX(3)<1  Set ptr=%objTX(3),objSerialize=%objTX(3,ptr),%objTX(3)=%objTX(3)-1 Kill %objTX(3,ptr) Set intSerialize=+objSerialize,objValue=$get(%objTX(1,intSerialize,1)),sc=objSerialize.%SerializeObject(.objValue) Do  Set %objTX(1,intSerialize,1)=objValue Kill %objTX(1,intSerialize,3) Do $system.CLS.SetModified(objSerialize,0)
	. . . If ('sc) Kill:$g(%objtxSTATUS)=2 %objtxLIST(+objSerialize),%objtxMODIFIED(+objSerialize) ZTrap "SG"
	. . . If $g(%objtxSTATUS)=2,objSerialize.%IsModified() Set %objtxMODIFIED(+objSerialize)=$system.CLS.GetModifiedBits(objSerialize)
	. . . Set intSucc="" For  Set intSucc=$order(%objTX(1,intSerialize,3,intSucc)) Quit:intSucc=""  Kill %objTX(1,intSerialize,3,intSucc),%objTX(1,intSucc,2,intSerialize) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$i(%objTX(3)))=%objTX(1,intSucc) Kill %objTX(2,intSucc)
	If $data(%objTX(2))>2 Set sc=$$Error^%apiOBJ(5827,$classname()) ZTrap "SG"
	Set cmd="" For  Set cmd=$order(%objTX(9,cmd)) Quit:cmd=""  Xecute cmd
%GetSwizzleObjectCOMMIT	If traninit {
		If $g(%objtxSTATUS)=1 { Kill %objtxSTATUS } Else { TCommit  Kill %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxMODIFIED }
	}
	Set oid = $get(%objTX(1,+$this,1))
	If $listget(oid) = "" Set oid = ""
	Set %objTX2(+$this)=0
	Quit sc
%GetSwizzleObjectERR	Set $ZTrap="" If $extract($ZError,1,5)'="<ZSG>" Set sc=$$Error^%apiOBJ(5002,$ZE)
	Set:traninit sc=$select(+sc:$$%TRollBack^%occTransaction(),1:$$AppendStatus^%occSystem(sc,$$%TRollBack^%occTransaction()))
	Set %objTX2(+$this)=0
	Quit sc }
%IsNull()
	i (..kodPocztowy'="")||(..kraj'="")||(..miasto'="")||(..ulica'="") Quit 0
	Quit 1
%LoadInit(oid) public {
	Set i%"%%OID"=oid,i%%id="",i%%seriesCount=1,r%%source="",i%%source=""
	Quit 1 }
%NormalizeObject() public {
	If '$system.CLS.GetModified() Quit 1
	If m%%id Set:i%%id'="" i%%id=(..%idNormalize(i%%id))
	If m%%seriesCount Set:i%%seriesCount'="" i%%seriesCount=(..%seriesCountNormalize(i%%seriesCount))
	If m%kodPocztowy Set:i%kodPocztowy'="" i%kodPocztowy=(..kodPocztowyNormalize(i%kodPocztowy))
	If m%kraj Set:i%kraj'="" i%kraj=(..krajNormalize(i%kraj))
	If m%miasto Set:i%miasto'="" i%miasto=(..miastoNormalize(i%miasto))
	If m%ulica Set:i%ulica'="" i%ulica=(..ulicaNormalize(i%ulica))
	Quit 1 }
%ObjectIsNull(pOID)
	If $isobject(pOID)=1 Set pOID=pOID."%%OID"
	if pOID = "" quit 1
	set class = $listget(pOID,2)
	if class '= "" {
		set class=$s(class="":"",class[".":class,$e(class)'="%":"User."_class,1:"%Library."_$e(class,2,*)) if $classname()'=class quit $classmethod(class,"%ObjectIsNull",pOID)
	}
	quit $listget(pOID)=""
%SerializeObject(serial,partial=0) public {
	try {
		Set sc=..%ValidateObject(,0) Throw:('sc) ##class(%Exception.StatusException).ThrowIfInterrupt(sc)
		Set sc=..%NormalizeObject() Throw:('sc) ##class(%Exception.StatusException).ThrowIfInterrupt(sc)
		Set serial=..%GetSerial(0),class=$classname(),class=$s($l(class,".")=2:$s($e(class,1,9)="%Library.":"%"_$p(class,".",2),1:class),1:class),serial=$select(serial="":"",1:$listbuild(serial_"",class)),i%"%%OID"=serial
		set sc=1
	}
	catch tException {
		set sc = tException.AsStatus()
	}
	Quit sc }
%AddToSaveSet(depth=3,refresh=0) public {
	If $data(%objTX(1,+$this)) && ('refresh) Quit 1
	Set sc=1,intOref=+$this
	If refresh Set intPoref="" For  Set intPoref=$order(%objTX(1,intOref,2,intPoref)) Quit:intPoref=""  Kill %objTX(1,intPoref,3,intOref),%objTX(1,intOref,2,intPoref)
	Set %objTX(1,intOref)=$this,%objTX(1,intOref,1)="",%objTX(7,intOref)=2
	Set Poref=r%%source If Poref'="",'$data(%objTX(1,+Poref)) Set %objTX(6,$i(%objTX(6)))=Poref
exit	Quit sc }
%SetSerial(val) public {
	If val="" {
		Set i%kodPocztowy="",i%kraj="",i%miasto="",i%ulica=""
	} Else {
		Set i%miasto=$lg(val,1),i%kraj=$lg(val,2),i%ulica=$lg(val,3),i%kodPocztowy=$lg(val,4)
	}
	Quit 1 }
%ValidateObject(force=0,checkserial=1) public {
	set sc=1
	If '$system.CLS.GetModified() Quit sc
	If m%%id Set iv=..%id If iv'="" Set rc=(..%idIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"%id",iv)
	If m%%seriesCount Set iv=..%seriesCount If iv'="" Set rc=(..%seriesCountIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"%seriesCount",iv)
	If m%kodPocztowy Set iv=..kodPocztowy If iv'="" Set rc=(..kodPocztowyIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"kodPocztowy",iv)
	If m%kraj Set iv=..kraj If iv'="" Set rc=(..krajIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"kraj",iv)
	If m%miasto Set iv=..miasto If iv'="" Set rc=(..miastoIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"miasto",iv)
	If m%ulica Set iv=..ulica If iv'="" Set rc=(..ulicaIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"ulica",iv)
	Quit sc }
zLogicalToOdbc(val="") public {
	Quit $listget(val,1)_","_$listget(val,2)_","_$listget(val,3)_","_$listget(val,4) }
zOdbcToLogical(val="") public {
	Quit $lb($piece(val,",",1),$piece(val,",",2),$piece(val,",",3),$piece(val,",",4)) }
zPopulateSerial()
	New i,obj,save
	Set obj=##class(User.Adres).%New()
	Set obj.%id=""
	Set obj.%seriesNames=""
	Set obj.kodPocztowy=##class(%Library.PopulateUtils).String(20)
	Set obj.kraj=##class(%Library.PopulateUtils).ValueList(",Polska")
	Set obj.miasto=##class(%Library.PopulateUtils).ValueList(",Warszawa,Gdynia, Zamosc,Gdansk,Krakow")
	Set obj.ulica=##class(%Library.PopulateUtils).ValueList(",Czumy,Peowiakow,Wiejska,Zamojska")
	If obj.%GetSwizzleObject(1,.save)
	Set obj=""
	Quit save
zXMLDTD(top,format,input,dtdlist)
 Quit ##class(%XML.Implementation).XMLDTD("User.Adres",.top,.format,.input,.dtdlist)
zXMLExportInternal()
 New tag,summary,attrsVal,savelocal,aval,k,tmpPrefix,prefixDepth,hasNoContent,hasElement,topAttrs,beginprefix,endprefix,savexsiAttrs,initialxsiAttrs,initlist,initialCR,inlineFlag,popAtEnd,saveTopPrefix,saveTypesPrefix,saveAttrsPrefix,saveUsePrefix,initlist
 Set $ztrap="XMLExportInternalTrap",popAtEnd=0
 Set summary=summaryArg,initialxsiAttrs=xsiAttrs
 If group Quit $$Error^%apiOBJ(6386,"User.Adres")
 If indentFlag Set initialCR=($extract(currentIndent,1,2)=$c(13,10))
 Set id=createId
 Set temp=""
 If id'="" {
   If $piece($get(idlist(+$this)),",",2)'="" Quit 1
   Set idlist(+$this)=id_",1"
 }
 If encoded Set initlist=$lb($get(oreflist),inlineFlagArg),oreflist=1,inlineFlag=inlineFlagArg
 Set tag=$get(topArg)
 Set tmpi=(($get(typeAttr)'="")&&(typeAttr'="User.Adres"))
 If $IsObject(namespaces) {
     Set popAtEnd=1,saveTopPrefix=topPrefix,saveTypesPrefix=typesPrefix,saveAttrsPrefix=attrsPrefix,saveUsePrefix=usePrefix
     Set sc=namespaces.PushNodeForExport("",$get(local,0),(encoded||tmpi),"",,.topPrefix,.topAttrs,.typesPrefix,.attrsPrefix,.usePrefix)
     If 'sc Quit sc
   Set beginprefix=$select(namespaces.ElementQualified&&usePrefix:typesPrefix,1:"")
   If topAttrs'="" Set temp=temp_" "_topAttrs
   If tag="" Set tag="Adres"
   Set xsitype=namespaces.OutputTypeAttribute
 } Else {
   Set saveTopPrefix=topPrefix,saveTypesPrefix=typesPrefix,saveAttrsPrefix=attrsPrefix,saveUsePrefix=usePrefix
   Set typesPrefix=namespaces If (typesPrefix'=""),($extract(typesPrefix,*)'=":") Set typesPrefix=typesPrefix_":"
   If 'encoded Set namespaces=""
   Set (topPrefix,attrsPrefix,topAttrs,beginprefix)=""
   If tag="" Set tag=typesPrefix_"Adres"
   Set xsitype=0
 }
 Set local=+$get(local),savelocal=local
 Set endprefix="</"_beginprefix,beginprefix="<"_beginprefix
 If tmpi Set temp=temp_" "_xsiPrefix_"type="""_typesPrefix_"Adres"""_xsiAttrs,xsiAttrs=""
   If id'="" Set temp=" "_$select($get(soap12):soapPrefix_"id",1:"id")_"=""id"_id_""""_temp
 If encoded Set temp=temp_xsiAttrs,xsiAttrs=""
 If indentFlag Set %xmlmsg=currentIndent if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg } Set currentIndent=$select(initialCR:"",1:$c(13,10))_currentIndent_indentChars
 If tag[":" Set topPrefix=$piece(tag,":"),tag=$piece(tag,":",2)  If topPrefix'="" Set topPrefix=topPrefix_":"
 Set %xmlmsg="<"_topPrefix_tag_temp if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set attrsVal=attrsArg,attrsArg="" Set %xmlmsg=attrsVal if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set %xmlmsg=">" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..miasto
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"miasto"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]]]><![CDATA[>","]]]]]]><![CDATA[><![CDATA[>")_"]]]]><![CDATA[>",1:val))_endprefix_"miasto>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..kraj
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"kraj"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]]]><![CDATA[>","]]]]]]><![CDATA[><![CDATA[>")_"]]]]><![CDATA[>",1:val))_endprefix_"kraj>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..ulica
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"ulica"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]]]><![CDATA[>","]]]]]]><![CDATA[><![CDATA[>")_"]]]]><![CDATA[>",1:val))_endprefix_"ulica>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..kodPocztowy
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"kodPocztowy"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]]]><![CDATA[>","]]]]]]><![CDATA[><![CDATA[>")_"]]]]><![CDATA[>",1:val))_endprefix_"kodPocztowy>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 If indentFlag { Set currentIndent=$extract(currentIndent,1,*-$length(indentChars)) Set %xmlmsg=currentIndent if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }}
 Set %xmlmsg="</"_topPrefix_tag_">"
 if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg } If indentFlag,'initialCR if $data(%xmlBlock) { Set %xmlmsg="" Do xeWriteLine^%occXMLInternal } else { write ! } Set $extract(currentIndent,1,2)=""
 If '$IsObject(namespaces) || (popAtEnd=1) Set topPrefix=saveTopPrefix,typesPrefix=saveTypesPrefix,attrsPrefix=saveAttrsPrefix,usePrefix=saveUsePrefix
 If popAtEnd Do namespaces.PopNode()
 If encoded Set oreflist=$list(initlist),inlineFlag=$list(initlist,2)
 Quit sc
XMLExportInternalTrap Set $ztrap=""
 If $data(val) , $IsObject(val) , ($piece($ze,">",1)="<METHOD DOES NOT EXIST") {
   Set sc=$$Error^%apiOBJ(6249,$classname(val))
 } Else {
   Set sc=$$Error^%apiOBJ(5002,$ze)
 }
XMLExportExit 
 If '$IsObject(namespaces) || (popAtEnd=1) Set topPrefix=saveTopPrefix,typesPrefix=saveTypesPrefix,attrsPrefix=saveAttrsPrefix,usePrefix=saveUsePrefix
 If popAtEnd Do namespaces.PopNode()
 Quit sc
zXMLGetSchemaImports(imports,classes)
 Quit ##class(%XML.Implementation).XMLGetSchemaImports("User.Adres",.imports,.classes)
zXMLImportAttributes()
 ;
 Quit 1
XMLImportAttrErr Quit $$Error^%apiOBJ(6260,ref,$get(@(tree)@("d",$zlascii(attributeList(ref),13))),@(tree)@("d",$zlascii(nodelist,9))_$$XMLImportAttrLocation(nodelist))
XMLImportFixedAttrErr Quit $$Error^%apiOBJ(6320,ref,$get(@(tree)@("d",$zlascii(attributeList(ref),13))),@(tree)@("d",$zlascii(nodelist,9))_$$XMLImportAttrLocation(nodelist))
XMLImportAttrLocation(nodelist) new msg,loc
 Set loc=$lb($zlascii(nodelist,21),$zlascii(nodelist,25))
 If loc="" Quit ""
 Set msg=$get(^%qCacheMsg("%ObjectErrors",$s(""'="":$zcvt("","L"),1:$s($mvv(58)="":"en",1:$mvv(58))),"XMLImportLocation")," (%1,%2)")
 Quit $$FormatText^%occMessages(msg,$listget(loc,1),$listget(loc,2))
zXMLImportInternal()
 New child,childlist,node,nodelist,inner,innerlist,data,encodedArray,key,nsIndex,savechild,savechildlist,saveinner,saveinnnerlist,exists
 Set $ztrap="XMLImportInternalTrap"
 Set encoded=$case($piece(fmt,",",1),"":0,"literal":0,"encoded":1,"encoded12":1,:"")
 If encoded="" Quit $$Error^%apiOBJ(6231,fmt)
 Set nsIndex=$select($get(namespace)="":"",1:$get(@(tree)@("N",namespace)))
 Set node=nodeArg,nodelist=nodeArgChildlist
 If tag'=@(tree)@("d",$zlascii(nodelist,9)) Set inner=node Goto XMLImportMalformed
 If bareProjection Quit $$Error^%apiOBJ(6386,"User.Adres")
 If encoded {
   Do XMLImportAttrnode() If $data(attributeList("id")) Set idlist(node)=$this
 }
 If $zboolean(+($zlascii(nodelist,13)#16),+1,1) Quit 1
 Set sc=$$XMLImportElements()
XMLImportExit Quit sc
XMLImportElements() ;
XMLLOOP1 Set descriptor=$zlascii(nodelist,$zwascii(nodelist,17)) Set child=($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)_","_$zwascii(nodelist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else { Set child="" }} For { Quit:child=""  Quit:(descriptor#16)'=2  Set descriptor=$piece(child,",",2)+4 Set child=$piece(child,",",1)_","_descriptor Set descriptor=$zlascii(nodelist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else {Set child="" }} } Goto XMLLOOP2
XMLLOOP For  { Set descriptor=$piece(child,",",2)+4 Set child=$piece(child,",",1)_","_descriptor Set descriptor=$zlascii(nodelist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else {Set child="" }} Quit:child=""  Quit:(descriptor#16)'=2  }
XMLLOOP2 If child="" Quit sc
 If (descriptor#16)'=0 Set inner=child Goto XMLImportMalformedNoTag
 Set childlist=@(tree)@((descriptor\16))
 Set tag=@(tree)@("d",$zlascii(childlist,9))
 If tag="miasto" {
   If ($get(namespace)'=""),'$case($zwascii(childlist,19),0:1,nsIndex:1,:0) Goto XMLImportNSchild
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(data'[","&&(",Warszawa,Gdynia, Zamosc,Gdansk,Krakow,"[(","_$select(data=$c(0):"",1:data)_",")):1,1:$$Error^%apiOBJ(7205,data,",Warszawa,Gdynia, Zamosc,Gdansk,Krakow"))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..miasto=data
   Goto XMLLOOP }
 If tag="kraj" {
   If ($get(namespace)'=""),'$case($zwascii(childlist,19),0:1,nsIndex:1,:0) Goto XMLImportNSchild
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(data'[","&&(",Polska,"[(","_$select(data=$c(0):"",1:data)_",")):1,1:$$Error^%apiOBJ(7205,data,",Polska"))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..kraj=data
   Goto XMLLOOP }
 If tag="ulica" {
   If ($get(namespace)'=""),'$case($zwascii(childlist,19),0:1,nsIndex:1,:0) Goto XMLImportNSchild
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(data'[","&&(",Czumy,Peowiakow,Wiejska,Zamojska,"[(","_$select(data=$c(0):"",1:data)_",")):1,1:$$Error^%apiOBJ(7205,data,",Czumy,Peowiakow,Wiejska,Zamojska"))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..ulica=data
   Goto XMLLOOP }
 If tag="kodPocztowy" {
   If ($get(namespace)'=""),'$case($zwascii(childlist,19),0:1,nsIndex:1,:0) Goto XMLImportNSchild
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>20):1,1:$$Error^%apiOBJ(7201,data,20))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..kodPocztowy=data
   Goto XMLLOOP }
 Goto XMLImportBadTagchild
XMLImportBadTagchild Set inner=child
XMLImportBadTag Quit $$Error^%apiOBJ(6237,tag_$$XMLImportLocation(inner))
XMLImportBadTypenode Set inner=node Goto XMLImportBadType
XMLImportBadTypechild Set inner=child
XMLImportBadType Quit $$Error^%apiOBJ(6277,class,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)))_$$XMLImportLocation(inner))
XMLImportErrnode Set inner=node Goto XMLImportErr
XMLImportErrchild Set inner=child
XMLImportErr
 Set data=##class(%XML.ImportHandler).GetNextChild(tree,inner,"")
 If (data'="") {
   If ($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))#16)'=0 {
     Quit $$Error^%apiOBJ(6232,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner),$extract(@(tree)@("d",($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))\16)),1,200))
   } Else {
     Quit $$Error^%apiOBJ(6253,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner),@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))\16)),9)))
   }
 } Else {
   Quit $$Error^%apiOBJ(6252,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner))
 }
XMLImportIdErr Set sc=$$Error^%apiOBJ(6236,id,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner)) Quit sc
XMLImportMalformed Set sc=$$Error^%apiOBJ(6233,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)))_$$XMLImportLocation(inner)) Quit sc
XMLImportMalformedNoTag Set node=$select($piece(inner,",",1)<=0:0,1:$zlascii(@(tree)@($piece(inner,",",1)),1)_","_$zlascii(@(tree)@($piece(inner,",",1)),5)),sc=$$Error^%apiOBJ(6254,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16))),$select(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)))_$$XMLImportLocation(node)) Quit sc
XMLImportNSchild Set inner=child
XMLImportNS Set sc=$$Error^%apiOBJ(6235,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner)) Quit sc
XMLImportLocation(node) new msg,loc
 Set loc=$lb($zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),21),$zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),25))
 If loc="" Quit ""
 Set msg=$get(^%qCacheMsg("%ObjectErrors",$s(""'="":$zcvt("","L"),1:$s($mvv(58)="":"en",1:$mvv(58))),"XMLImportLocation")," (%1,%2)")
 Quit $$FormatText^%occMessages(msg,$listget(loc,1),$listget(loc,2))
XMLImportInternalTrap Set $ztrap=""
 Set loc=$select($ZE["<CLASS DOES NOT EXIST>":" for element "_tag_$$XMLImportLocation(child),1:"")
 Quit $$Error^%apiOBJ(5002,$ZE_loc)
XMLImportIdChild() Set inner=child,innerlist=childlist,tmp=$$XMLImportId(),child=inner,childlist=innerlist Quit tmp
XMLImportId() ;
 Do XMLImportAttrinner()
 If $data(attributeList("href")) {
   Set id=$get(@(tree)@("d",$zlascii(attributeList("href"),13)))
   If $extract(id)="#" {
     Set tmp=$select($get(@(tree)@("i",$extract(id,2,*)))="":"",1:$piece(@(tree)@("i",$extract(id,2,*)),",",1)_","_$piece(@(tree)@("i",$extract(id,2,*)),",",2)) If tmp="" Goto XMLImportIdErr
     Set inner=tmp
     Set descriptor=$zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2)) Set innerlist=@(tree)@((descriptor\16))
   }
 } ElseIf $data(attributeList("ref")),($get(@(tree)@("n",$zwascii(attributeList("ref"),9)))="http://www.w3.org/2003/05/soap-encoding") {
   Set id=$get(@(tree)@("d",$zlascii(attributeList("ref"),13)))
   Set tmp=$select($get(@(tree)@("i",id))="":"",1:$piece(@(tree)@("i",id),",",1)_","_$piece(@(tree)@("i",id),",",2)) If tmp="" Goto XMLImportIdErr
   Set inner=tmp
   Set descriptor=$zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2)) Set innerlist=@(tree)@((descriptor\16))
 } ElseIf '$data(attributeList("id")) {
   Quit 0
 }
 Quit $data(idlist(inner))
XMLImportAttrnode()
 If $get(attributeList)=node Quit
 Kill attributeList
 Set attributeList=node
 Set offset=29 While offset<$zwascii(nodelist,17) { Set attribute=$extract(nodelist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
XMLImportAttrchild()
 If $get(attributeList)=child Quit
 Kill attributeList
 Set attributeList=child
 Set offset=29 While offset<$zwascii(childlist,17) { Set attribute=$extract(childlist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
XMLImportAttrinner()
 If $get(attributeList)=inner Quit
 Kill attributeList
 Set attributeList=inner
 Set offset=29 While offset<$zwascii(innerlist,17) { Set attribute=$extract(innerlist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
zXMLIsObjectEmpty(ignoreNull)
 If ..miasto'="" Quit 0
 If ..kraj'="" Quit 0
 If ..ulica'="" Quit 0
 If ..kodPocztowy'="" Quit 0
 Quit 1
zXMLNew(document,node,containerOref="")
	Quit (##class(User.Adres).%New())
zXMLSchema(top="",format="",namespacePrefix="",input=0,refOnly=0,schema)
 Quit ##class(%XML.Implementation).XMLSchema("User.Adres",top,format,namespacePrefix,input,refOnly,.schema)
zkrajIsValid(%val) public {
	Q $s(%val'[","&&(",Polska,"[(","_$select(%val=$c(0):"",1:%val)_",")):1,1:$$Error^%apiOBJ(7205,%val,",Polska")) }
zmiastoIsValid(%val) public {
	Q $s(%val'[","&&(",Warszawa,Gdynia, Zamosc,Gdansk,Krakow,"[(","_$select(%val=$c(0):"",1:%val)_",")):1,1:$$Error^%apiOBJ(7205,%val,",Warszawa,Gdynia, Zamosc,Gdansk,Krakow")) }
zulicaIsValid(%val) public {
	Q $s(%val'[","&&(",Czumy,Peowiakow,Wiejska,Zamojska,"[(","_$select(%val=$c(0):"",1:%val)_",")):1,1:$$Error^%apiOBJ(7205,%val,",Czumy,Peowiakow,Wiejska,Zamojska")) }
]]></Routine>


<Class name="User.Adres">
<Super>%SerialObject,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>65172,71818.898246</TimeChanged>
<TimeCreated>65172,70906.809114</TimeCreated>

<Property name="miasto">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
<Parameter name="VALUELIST" value=",Warszawa,Gdynia, Zamosc,Gdansk,Krakow"/>
</Property>

<Property name="kraj">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
<Parameter name="VALUELIST" value=",Polska"/>
</Property>

<Property name="ulica">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
<Parameter name="VALUELIST" value=",Czumy,Peowiakow,Wiejska,Zamojska"/>
</Property>

<Property name="kodPocztowy">
<Type>%String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>AdresState</State>
<StreamLocation>^User.AdresS</StreamLocation>
<Data name="AdresState">
<Value name="1">
<Value>miasto</Value>
</Value>
<Value name="2">
<Value>kraj</Value>
</Value>
<Value name="3">
<Value>ulica</Value>
</Value>
<Value name="4">
<Value>kodPocztowy</Value>
</Value>
</Data>
</Storage>
</Class>


<Routine name="User.Faktura.1" type="INT" languagemode="0" generated="1" timestamp="65172,73146.597973"><![CDATA[
 ;User.Faktura.1
 ;(C)InterSystems, generated for class User.Faktura.  Do NOT edit. 06/08/2019 08:19:06PM
 ;;39496B52;User.Faktura
 ;
SQLUPPER(v,l) { quit $zu(28,v,7,$g(l,32767)) }
ALPHAUP(v,r) { quit $zu(28,v,6) }
STRING(v,l) { quit $zu(28,v,9,$g(l,32767)) }
SQLSTRING(v,l) { quit $zu(28,v,8,$g(l,32767)) }
UPPER(v) { quit $zu(28,v,5) }
MVR(v) { quit $zu(28,v,2) }
TRUNCATE(v,l) { quit $e(v,1,$g(l,3641144)) }
%BindExport(dev,Seen,RegisterOref,AllowedDepth,AllowedCapacity) public {
   i $d(Seen(+$this)) q 1
   Set Seen(+$this)=$this
   s sc = 1
 s proporef=..%source
 s proporef=..FakturaPozycjiFaktury
 s proporef=..listaFakturPacjenta
 s proporef=..pracownikWystawiajacy
   d:RegisterOref InitObjVar^%SYS.BINDSRV($this)
   i dev'="" s t=$io u dev i $zobjexport($this_"",3)+$zobjexport($this."%%OID",3)+$zobjexport($this,3)!1 u t
 If AllowedDepth>0 Set AllowedDepth = AllowedDepth - 1
 If AllowedCapacity>0 Set AllowedCapacity = AllowedCapacity - 1/4
 s proporef=..%source
 s proporef=..FakturaPozycjiFaktury
       i proporef'="" d
  . s idx="" i proporef'="" f  s elemoref=proporef.GetNext(.idx) q:idx=""  s sc=1 i AllowedDepth'=0,AllowedCapacity'=0 s sc=elemoref.%BindExport(dev,.Seen,RegisterOref,AllowedDepth,AllowedCapacity) q:('sc)
  q:('sc) sc
       i proporef'="",dev'="" s t=$io u dev i $zobjexport(proporef_"",3)+$zobjexport(proporef."%%OID",3)+$zobjexport(proporef,3)!1 u t
       if proporef'="",dev'="" d
       . s t=$io u dev i $zobjexport(5_"",3)!1 u t
       . s t=$io u dev i $zobjexport(proporef.Count()_"",3)!1 u t
     . for i=1:1:proporef.Count()  s t=$io u dev i $zobjexport(proporef.GetAt(i)_"",3)!1 u t
 s proporef=..listaFakturPacjenta
       i proporef'="" s sc=1 i AllowedDepth'=0,AllowedCapacity'=0 s sc=proporef.%BindExport(dev,.Seen,RegisterOref,AllowedDepth,AllowedCapacity) q:('sc) sc
 s proporef=..pracownikWystawiajacy
       i proporef'="" d
  . s idx="" i proporef'="" f  s elemoref=proporef.GetNext(.idx) q:idx=""  s sc=1 i AllowedDepth'=0,AllowedCapacity'=0 s sc=elemoref.%BindExport(dev,.Seen,RegisterOref,AllowedDepth,AllowedCapacity) q:('sc)
  q:('sc) sc
       i proporef'="",dev'="" s t=$io u dev i $zobjexport(proporef_"",3)+$zobjexport(proporef."%%OID",3)+$zobjexport(proporef,3)!1 u t
       if proporef'="",dev'="" d
       . s t=$io u dev i $zobjexport(5_"",3)!1 u t
       . s t=$io u dev i $zobjexport(proporef.Count()_"",3)!1 u t
     . for i=1:1:proporef.Count()  s t=$io u dev i $zobjexport(proporef.GetAt(i)_"",3)!1 u t
   Quit sc }
%BuildIndices(pIndexList="",pAutoPurge=1,pLockFlag=0,pJournalFlag=1,pStartID="",pEndID="",pIgnoreIndexList="") public {
	If (pIndexList="")||(($listlength(pIndexList)=1)&&($listget(pIndexList,1)="")) { Quit 1 }
	Quit $$Error^%apiOBJ(5066,$classname()_"::"_$ListToString(pIndexList)) }
%BuildIndicesSegment(pStartID,pEndID,pIndexHandle=0,pLockFlag=1,pFirstRange=0,pJob="") public {
	QUIT 1 }
%CheckConstraints(pID,pConstraintList="",pCheckDisabled=0,pErrorInfo) public {
	if (''..%OnDetermineClass($select(pID="":"",1:$listbuild(pID_"")),.tMSTC)) && (tMSTC '= $classname()) { quit $classmethod(tMSTC,"%CheckConstraints",pID,pConstraintList) } else { quit 1 } }
%CheckConstraintsForExtent(pConstraintList="",pCheckDisabled=0,pErrorLog) [ SQLCODE,tID ] public { New %msg,%ROWCOUNT,%ROWID,SQLCODE,tID 
	kill pErrorLog set tStatusAll = 1, pErrorLog = 0 if '$listvalid(pConstraintList) { set pConstraintList = $listfromstring(pConstraintList) }
	 ;---&sql(declare ext cursor for select %ID into :tID FROM SQLUser.Faktura)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE, tID
	
	 ;---&sql(open ext)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE
	do %ext0o
	if SQLCODE '< 0 {
		for {
			 ;---&sql(fetch ext)
 			 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE
			do %0Do
			if SQLCODE { if SQLCODE=100 { quit } elseif SQLCODE<0 { set tStatusAll = $select(+tStatusAll:$$Error^%apiOBJ(5521,SQLCODE,$Get(%msg)),1:$$AppendStatus^%occSystem(tStatusAll,$$Error^%apiOBJ(5521,SQLCODE,$Get(%msg)))) quit } }
			set tStatus = ..%CheckConstraints(tID,pConstraintList,pCheckDisabled,.tErrorInfo)
			if ('tStatus) { set tStatusAll = $select(+tStatusAll:tStatus,1:$$AppendStatus^%occSystem(tStatusAll,tStatus)) set:pErrorLog<1000 pErrorLog = pErrorLog + 1, pErrorLog(pErrorLog) = tErrorInfo _ $Listbuild(tStatus) }
		}
		 ;---&sql(close ext)
 		 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE
		do %ext0c
	}
	quit tStatusAll }
 q
%ext0o 
 try { s SQLCODE=$s($g(%ext0109c):-101,1:0) q:SQLCODE'=0 
 n %sqltime s %sqltime=$zh
 s %ext0109d(1)=0 s:$d(%0CacheRowLimit)#2 %ext0109d(2)=%0CacheRowLimit
 s %ext0109d(3)=$zu(115,2)
 s %ext0109d(4)=0,%ext0109d(5)=""
 d:$zu(115,15) $system.ECP.Sync()
 s %ext0109c=1,SQLCODE=0
 s:$d(%sqltime) %ext0109d(6)=$g(%ext0109d(6))+$zh-%sqltime
 } catch { d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %ext0109c,%ext0109d,%ext0109E,%ext0109n,%ext0109R }
 q
%0Afirst 
 ; asl MOD# 2
 s tID=""
%0AmBk1 s tID=$o(^User.FakturaD(tID))
 i tID="" g %0AmBdun
 goto:%ext0109d(3)'=1 %0AmBuncommitted
 if %ext0109d(3)=1 {
 	lock +^User.FakturaD($p(tID,"||",1))#"S":$zu(115,4)
 	if $t { set %ext0109d(5)=$name(^User.FakturaD($p(tID,"||",1)))_"#""SI""",%ext0109d(4)=1 }
 	else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.Faktura for RowID value: "_tID ztrap "LOCK"  }
 }
 ; asl MOD# 3
 i tID'="",$d(^User.FakturaD(tID))
 e  g %0AmCdun
%0AmBuncommitted ;
 s:$g(SQLCODE)'<0 SQLCODE=0 s %ROWCOUNT=$i(%ext0109d(1)),%ROWID=tID,%ext0109c=10
 //-- FETCH Output
 s:$d(%sqltime) %ext0109d(6)=$g(%ext0109d(6))+$zh-%sqltime
 quit
%ext0f //-- FETCH tag
 i '$g(%ext0109c) { s SQLCODE=-102 q  } i %ext0109c=100 { s SQLCODE=100 q  } s SQLCODE=0
 i $d(%ext0109d(2))#2,$g(%ext0109d(1))'<%ext0109d(2) { s SQLCODE=100,%ROWCOUNT=%ext0109d(1),%ext0109c=100 q }
 n %sqltime s %sqltime=$zh
 g %0Afirst:%ext0109c=1
%0AmCdun if $g(%ext0109d(3))=1 { if $g(%ext0109d(4))=1 { l -@%ext0109d(5) s %ext0109d(4)=0 } elseif $g(%ext0109d(4))=2 { do $classmethod($li(%ext0109d(5)),"%UnlockId",$li(%ext0109d(5),2),1,1)  s %ext0109d(4)=0 } }
 g %0AmBk1
%0AmBdun 
%0AmAdun 
 s %ROWCOUNT=%ext0109d(1),SQLCODE=100,%ext0109c=100
 s:$d(%sqltime) %ext0109d(6)=$g(%ext0109d(6))+$zh-%sqltime
 //-- no [more] data
 quit
%ext0c i '$g(%ext0109c) { s SQLCODE=-102 q  }
 n %sqltime s %sqltime=$zh
 s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%ext0109d(1)),1:0)
 if $g(%ext0109d(3))=1 { if $g(%ext0109d(4))=1 { l -@%ext0109d(5) } elseif $g(%ext0109d(4))=2 { do $classmethod($li(%ext0109d(5)),"%UnlockId",$li(%ext0109d(5),2),1,1)  } }
 s:$d(%sqltime) %ext0109d(6)=$g(%ext0109d(6))+$zh-%sqltime
 n context,tmp,count,total,mean s context=$system.Context.SQL()
 if $d(%ext0109d(6),%sqltime) {
 if $g(context.Stats)<$zu(99) { d AggregateStats^%SYS.SQLSRV() }
 s tmp=$g(context.Stats($namespace,"M5yL/Rjp0YEMKgj1BWSmFajkFAk="))
 s count=$lg(tmp,1),total=$lg(tmp,2),mean=total+%sqltime/(count+1)
 s context.Stats($namespace,"M5yL/Rjp0YEMKgj1BWSmFajkFAk=")=$lb(count+1,total+%sqltime,$s(+count=0:0,1:(%sqltime-mean)**2+(count*((total/count-mean)**2+$lg(tmp,3)))/(count+1))) }
 k %ext0109c,%ext0109d,%ext0109E,%ext0109n,%ext0109R
 s SQLCODE=0
 quit  // close
%0Aerr d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 s %ext0109c=100
 quit  // error
%0Do try { do %ext0f q:SQLCODE'=0
 } catch { do %0Aerr }
 q
%ComposeOid(id) public {
	set tCLASSNAME = $listget($g(^User.FakturaD(id)),1)
	if tCLASSNAME="" { quit $select(id="":"",1:$listbuild(id_"","User.Faktura")) }
	set tClass=$piece(tCLASSNAME,$extract(tCLASSNAME),*-1)
	set:tClass'["." tClass="User."_tClass
	quit $select(id="":"",1:$listbuild(id_"",tClass)) }
%Construct(initvalue) public {
	Set i%%Concurrency=$zu(115,10),i%%seriesCount=1,i%FakturaPozycjiFaktury=$listbuild("User.PozycjaFaktury","listaPozycji",+$this,"many",1,1)
	Set i%pracownikWystawiajacy=$listbuild("User.Pracownik","fakturyPracownika",+$this,"many",1,1)
	Kill i%%data,i%%seriesNames
	Set m%FakturaPozycjiFaktury=0,M%FakturaPozycjiFaktury=0,m%pracownikWystawiajacy=0,M%pracownikWystawiajacy=0
	Quit 1 }
%ConstructCloneInit(object,deep=0,cloned,location) public {
	Set i%"%%OID"=""
	If deep>0 {
		If $isobject(..%source)=1 Set r%%source=r%%source.%ConstructClone(1,.cloned),i%%source=""
		If $isobject(..FakturaPozycjiFaktury)=1 {
			If ..FakturaPozycjiFaktury.NotLoaded Do ..FakturaPozycjiFaktury.Load()
			Set tmprel=r%FakturaPozycjiFaktury,tmpref=tmprel.InverseReference,tmprel.InverseReference=$this
			Set r%FakturaPozycjiFaktury=r%FakturaPozycjiFaktury.%ConstructClone(1,.cloned),i%FakturaPozycjiFaktury=""
			Set tmprel.InverseReference=tmpref
		}
		If $isobject(..pracownikWystawiajacy)=1 {
			If ..pracownikWystawiajacy.NotLoaded Do ..pracownikWystawiajacy.Load()
			Set tmprel=r%pracownikWystawiajacy,tmpref=tmprel.InverseReference,tmprel.InverseReference=$this
			Set r%pracownikWystawiajacy=r%pracownikWystawiajacy.%ConstructClone(1,.cloned),i%pracownikWystawiajacy=""
			Set tmprel.InverseReference=tmpref
		}
	} Else {
		If ..FakturaPozycjiFaktury'="" {
			If deep=-1 {
				Set r%FakturaPozycjiFaktury="",i%FakturaPozycjiFaktury=$listbuild("User.PozycjaFaktury","listaPozycji",+$this,"many",1,1)
			} Else {
				If ..FakturaPozycjiFaktury.NotLoaded Do ..FakturaPozycjiFaktury.Load()
				Set tmprel=r%FakturaPozycjiFaktury,tmpref=tmprel.InverseReference,tmprel.InverseReference=$this
				Set r%FakturaPozycjiFaktury=r%FakturaPozycjiFaktury.%ConstructClone(0,.cloned),i%FakturaPozycjiFaktury=""
				Set tmprel.InverseReference=tmpref
			}
		}
		If ..pracownikWystawiajacy'="" {
			If deep=-1 {
				Set r%pracownikWystawiajacy="",i%pracownikWystawiajacy=$listbuild("User.Pracownik","fakturyPracownika",+$this,"many",1,1)
			} Else {
				If ..pracownikWystawiajacy.NotLoaded Do ..pracownikWystawiajacy.Load()
				Set tmprel=r%pracownikWystawiajacy,tmpref=tmprel.InverseReference,tmprel.InverseReference=$this
				Set r%pracownikWystawiajacy=r%pracownikWystawiajacy.%ConstructClone(0,.cloned),i%pracownikWystawiajacy=""
				Set tmprel.InverseReference=tmpref
			}
		}
	}
	Quit 1 }
%CopyDataFromModel(pData,pTypes,pSeries="") public {
 // Generated by %ZEN.DataModel.ObjectDataModel
 Set tSC = 1
 For sno = $S(pSeries="":1,1:pSeries):1:..%seriesCount {
 Set pData(sno,"dataWystawienia") = $S(..dataWystawienia="":"",1:$ZDT(..dataWystawienia,3,,,,,,,,,"Invalid date: '"_..dataWystawienia_"'"))
 Set pData(sno,"wartoscFaktury") = ..wartoscFakturyLogicalToDisplay(..wartoscFaktury)
 Set pData(sno,"listaFakturPacjenta") = ..listaFakturPacjentaGetObjectId()
 Quit:pSeries'=""
 }
 If ('tSC) Quit tSC
 Quit tSC }
%CopyDataToModel(pData,pSeries="") public {
 // Generated by %ZEN.DataModel.ObjectDataModel
 Set tSC = 1
 For sno = $S(pSeries="":1,1:pSeries):1:..%seriesCount {
 Set ..dataWystawienia = $S($G(pData(sno,"dataWystawienia"))="":"",1:+$ZDTH($G(pData(sno,"dataWystawienia")),3,,,,,,,,"Invalid date: '"_$G(pData(sno,"dataWystawienia"))_"'"))
 Set ..wartoscFaktury = ..wartoscFakturyDisplayToLogical($G(pData(sno,"wartoscFaktury")))
 Do ..listaFakturPacjentaSetObjectId($G(pData(sno,"listaFakturPacjenta")))
 Quit:pSeries'=""
 }
 If ('tSC) Quit tSC
 Quit tSC }
%CreateModelInstance(pID,pConcurrency=-1,pSC) public { Set:'($data(pSC)#2) pSC=1
	Quit $S(pID="":..%New(),1:..%OpenId(pID,pConcurrency,.pSC)) }
%Delete(oid="",concurrency=-1) public {
	Quit:oid="" $$Error^%apiOBJ(5813,$classname()) Set id=$listget(oid) Quit:id="" $$Error^%apiOBJ(5812,$classname()) set traninit=0
	set $ZTRAP="%DeleteERR"
	If concurrency = -1 Set concurrency=$zu(115,10)
	If (concurrency > 4) || (concurrency < 0) || (concurrency '= (concurrency\1)) Quit $$Error^%apiOBJ(5828)
	Set class=$listget(oid,2)
	If class="" { Set sc=..%OnDetermineClass(oid,.class) Quit:('sc) sc Set oid=$select(oid="":"",1:$listbuild($listget(oid),class)_$select($listget(oid,3)'="":$listbuild($list(oid,3)),1:"")) } Else { Set class=$s(class="":"",class[".":class,$e(class)'="%":"User."_class,1:"%Library."_$e(class,2,*)) }
	If $classname()'=class Quit $classmethod(class,"%Delete",oid,concurrency)
	If +$g(%objtxSTATUS)=0 { Set traninit=1 k %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxOIDUNASSIGNED,%objtxMODIFIED,%objtxVERSION k:'$TLevel %objtxTID,%objtxID i '$zu(115,9) { s %objtxSTATUS=1 } else { TStart  s %objtxSTATUS=2 } }
	Set sc=##class(User.PozycjaFaktury).listaPozycjiOnDelete(id,concurrency) Goto:('sc) %DeleteEnd
	Set sc=##class(User.Pracownik).fakturyPracownikaOnDelete(id,concurrency) Goto:('sc) %DeleteEnd
	Set oref=$zobjoid($listget(oid,2),$listget(oid)) If $isobject(oref)=1 Do oref.%DeleteOID()
	Set sc=..%DeleteData(id,concurrency)
%DeleteEnd If traninit { If (''sc) { i $g(%objtxSTATUS)=1 { k %objtxSTATUS } else { If $Tlevel { TCommit  } k %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxOIDUNASSIGNED,%objtxMODIFIED,%objtxVERSION k:'$TLevel %objtxTID,%objtxID } } Else { i $g(%objtxSTATUS)=2 { s sc=$select(+sc:$$%TRollBack^%occTransaction(),1:$$AppendStatus^%occSystem(sc,$$%TRollBack^%occTransaction())) k %objtxTID,%objtxID } else { k %objtxSTATUS } } }
	Quit sc
%DeleteERR	Set $ZTrap="", sc=$$Error^%apiOBJ(5002,$ZE) goto %DeleteEnd }
%DeleteData(id,concurrency) public {
	Quit:id="" $$Error^%apiOBJ(5812)
	set $Ztrap="DeleteDataERR" set lockok=0,sc=""
	If concurrency {
		Lock +(^User.FakturaD(id)#"E"):$zu(115,4)
		Set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0))
		Set:lockok=2&&($tlevel) %0CacheLock($classname(),"E")=1
		If 'lockok {
			Quit $$Error^%apiOBJ(5803,$classname())
		}
	}
	If ($Data(^User.FakturaD(id))) {
		If $data(^oddEXTR($classname())) {
			Set fc=""
			For {
				Set fc=$order(^oddEXTR($classname(),"n","%1","f",fc))
				Quit:fc=""
				Set fk=""
				For {
					Set fk=$order(^oddEXTR($classname(),"n","%1","f",fc,fk))
					Quit:fk=""
					If $get(^oddEXTR($classname(),"n","%1","f",fc,fk,61))'="" {
						Set sc=$classmethod(fc,fk_"Delete",id)
						If ('sc) { Goto DeleteDataEXIT }
					}
				}
			}
			Set fc=""
			For {
				Set fc=$order(^oddEXTR($classname(),"n","IDKEY","f",fc))
				Quit:fc=""
				Set fk=""
				For {
					Set fk=$order(^oddEXTR($classname(),"n","IDKEY","f",fc,fk))
					Quit:fk=""
					If $get(^oddEXTR($classname(),"n","IDKEY","f",fc,fk,61))'="" {
						Set sc=$classmethod(fc,fk_"Delete",id)
						If ('sc) { Goto DeleteDataEXIT }
					}
				}
			}
		}
		Kill ^User.FakturaD(id)
		Set sc=1
	}
	Else { Set sc=$$Error^%apiOBJ(5810,$classname(),id) }
DeleteDataEXIT
	If concurrency,lockok {
		Lock -(^User.FakturaD(id)#"E")
	}
DeleteDataRET	Set $Ztrap = ""
	QUIT sc
DeleteDataERR	Set $Ztrap = "DeleteDataRET"
	Set sc = $$Error^%apiOBJ(5002,$ZE)
	Goto DeleteDataEXIT }
%Exists(oid="") public {
	Quit ..%ExistsId($listget(oid)) }
%ExistsId(id) public {
	Try { set tExists = $s(id="":0,$d(^User.FakturaD(id)):1,1:0) } catch tException { set tExists = 0 if '(tException.%IsA("%Exception.SystemException")) { throw tException } elseif tException.Name'="<SUBSCRIPT>" { ZT $ZE } } quit tExists }
%FileIndices(id,pIndexHandle=0) public {
	Quit 1 }
%GetLookupSQL(pProperty,pSQL,pSQLLookup) public {
 // Generated by %ZEN.DataModel.ObjectDataModel
 Set pSQL=""
 Set pSQLLookup=""
 Goto Dispatch
t1 // listaFakturPacjenta
 Set pSQL = "SELECT %ID FROM ."
 Set pSQLLookup = "SELECT %ID FROM . WHERE %ID = ?"
 Goto Done
Dispatch
 Goto $Case(pProperty,"listaFakturPacjenta":t1,:Done)
Done
 Quit 1 }
%GetPropertyInfo(pInfo,pExtended=0,pModelId="",pContainer="") public {
 // Generated by %ZEN.DataModel.ObjectDataModel
 Set tSC = 1
 Set pInfo("dataWystawienia") = $I(pInfo)
 Set pInfo("dataWystawienia","%ptype") = "10"
 Set pInfo("wartoscFaktury") = $I(pInfo)
 Set pInfo("wartoscFaktury","%ptype") = "12"
 Set pInfo("listaFakturPacjenta") = $I(pInfo)
 Set pInfo("listaFakturPacjenta","%ptype") = "2"
 If (pExtended) {
  Set tProp = "dataWystawienia"
  Set pInfo(tProp,"%type") = "dateSelect"
  Set pInfo(tProp,"required") = 1
  Set tProp = "wartoscFaktury"
  Set pInfo(tProp,"%type") = "text"
  Set pInfo(tProp,"size") = 6
  Set pInfo(tProp,"required") = 1
  Set tProp = "listaFakturPacjenta"
  Set pInfo(tProp,"%type") = "dataCombo"
  Set pInfo(tProp,"cached") = 1
 }
 Quit tSC }
%GetPropertyList(pModelId="",pContainer="") public {
	Quit "dataWystawienia:10,wartoscFaktury:12,listaFakturPacjenta:2" }
%InsertBatch(objects,concurrency=0,useTransactions=0) public {
	try {
		set numerrs=0,errs="",cnt=0,ptr=0
		while $listnext(objects,ptr,data) {
			set cnt=cnt+1
			set zzc9v1=$listget(data,4)
			set lock=0
			if (useTransactions) tstart
			set id=$i(^User.FakturaD)
			if (zzc9v1'="")&&('##class(User.Pacjent).%ExistsId(zzc9v1)) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5824,"User.Faktura.listaFakturPacjenta("_$zu(144,1,zzc9v1)_")")) }
			try {
				set tInnerException = ""
				;
				if concurrency { lock +(^User.FakturaD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				set ^User.FakturaD(id)=data
				if (useTransactions) { tcommit }
			}
			catch tInnerException {
				set newerr=$lb(cnt,tInnerException.AsStatus())
				if '($length(errs)+$length(newerr)>32767) { set numerrs=numerrs+1, errs=errs_newerr }
				if (useTransactions) && ($Tlevel) trollback
			}
			if lock lock -(^User.FakturaD(id)#"E")
		}
	}
	catch tException {
		set newerr=$lb($g(cnt),tException.AsStatus())
		if '($length(errs)+$length(newerr)>32767) { set numerrs=numerrs+1, errs=errs_newerr }
	}
	QUIT ($lb(numerrs))_errs }
%KillExtentData()
	Kill ^User.FakturaD
	Quit 1
%LoadData(id) public {
	New %s1
	set $ZTrap="CatchError",locked=0,$ze=""
	If i%%Concurrency=4 {
		Lock +(^User.FakturaD(id)#"E"):$zu(115,4)
		if '$t do init s i%%Concurrency=0 return $$Error^%apiOBJ(5803,$classname())
	} ElseIf i%%Concurrency>1 {
		Lock +(^User.FakturaD(id)#"SE"):$zu(115,4)
		if '$t do init s i%%Concurrency=0 return $$Error^%apiOBJ(5803,$classname())
		set locked = 1
	}
	If $d(^User.FakturaD(id),%s1)#2 {
		If i%%Concurrency=2 { Lock -(^User.FakturaD(id)#"SIE") }
		Set i%dataWystawienia=$lg(%s1,2),i%wartoscFaktury=$lg(%s1,3),i%listaFakturPacjenta=$lg(%s1,4)
		Quit 1
	} Else {
		If i%%Concurrency=2 { Lock -(^User.FakturaD(id)#"SIE") }
		do init
		set sc = $$Error^%apiOBJ(5809,$classname(),id) goto CatchError
	}
CatchError	set $ZTrap = "" if $ZE'="" { s sc = $$Error^%apiOBJ(5002,$ZE) }
	If ($get(locked))&&(i%%Concurrency<3) { Lock -(^User.FakturaD(id)#"SIE") }
	if '('sc) { set sc=$$Error^%apiOBJ(5809,$classname(),id) }
	return sc
init	Set i%dataWystawienia="",i%listaFakturPacjenta="",i%wartoscFaktury=""
	quit }
%LoadDataFromMemory(id,objstate,obj) public {
	New %s1
	If $d(objstate(id)) {
		Set %s1=$g(objstate(id))
		Set i%dataWystawienia=$lg(%s1,2),i%wartoscFaktury=$lg(%s1,3),i%listaFakturPacjenta=$lg(%s1,4)
		Quit 1
	} Else {
		Set i%dataWystawienia="",i%listaFakturPacjenta="",i%wartoscFaktury=""
		Quit $$Error^%apiOBJ(5809,$classname(),id)
	} }
%LoadInit(oid="",concurrency="",reset=0) public {
	If concurrency'="" Set i%%Concurrency=concurrency
	If reset {
		Kill i%%data,i%%seriesNames,i%%source,i%FakturaPozycjiFaktury,i%listaFakturPacjenta,i%pracownikWystawiajacy
	}
	Set i%%id="",i%%seriesCount=1,i%%source="",r%%source="",i%FakturaPozycjiFaktury=$listbuild("User.PozycjaFaktury","listaPozycji",+$this,"many",1,1),r%FakturaPozycjiFaktury="",r%listaFakturPacjenta="",i%pracownikWystawiajacy=$listbuild("User.Pracownik","fakturyPracownika",+$this,"many",1,1),r%pracownikWystawiajacy=""
	If 'reset { Set i%"%%OID"=oid If oid'="" { Set $zobjoid("",$listget(oid))=$this } }
	Quit 1 }
%LockExtent(shared=0) public {
	If shared {
		Lock +(^User.FakturaD#"S"):$zu(115,4) Quit:$t 1
		Quit $$Error^%apiOBJ(5799,$classname())
	}
	Lock +(^User.FakturaD):$zu(115,4) Quit:$t 1
	Quit $$Error^%apiOBJ(5798,$classname()) }
%LockId(id,shared=0,timeout) public { Set:'($data(timeout)#2) timeout=$zu(115,4)
	If id="" { Quit $$Error^%apiOBJ(5812) }
	Set sc=1
	If 'shared {
		Lock +(^User.FakturaD(id)#"E"):timeout Quit:$t 1
		Quit $$Error^%apiOBJ(5803,id_":"_$classname())
	}
	Lock +(^User.FakturaD(id)#"SE"):timeout Quit:$t 1
	Quit $$Error^%apiOBJ(5804,id_":"_$classname()) }
%NormalizeObject() public {
	If '$system.CLS.GetModified() Quit 1
	If m%%id Set:i%%id'="" i%%id=(..%idNormalize(i%%id))
	If m%%seriesCount Set:i%%seriesCount'="" i%%seriesCount=(..%seriesCountNormalize(i%%seriesCount))
	If m%dataWystawienia Set:i%dataWystawienia'="" i%dataWystawienia=(..dataWystawieniaNormalize(i%dataWystawienia))
	If m%wartoscFaktury Set:i%wartoscFaktury'="" i%wartoscFaktury=(..wartoscFakturyNormalize(i%wartoscFaktury))
	Quit 1 }
%OnDeleteSource(pID) public {
	Quit ..%DeleteId(pID) }
%OnDetermineClass(oid,class) public {
	Set id=$listget($get(oid))
	Quit:id="" $$Error^%apiOBJ(5812)
	Set idclass=$lg($get(^User.FakturaD(id)),1)
	If idclass="" { Set class="User.Faktura" Quit 1 }
	Set class=$piece(idclass,$extract(idclass),*-1)
	Set:class'["." class="User."_class
	QUIT 1 }
%OnSaveSource(pSource) public {
 Set tSC = ..%Save() Set:(''tSC) ..%id = ..%Id() Quit tSC }
%PhysicalAddress(id,paddr)
	if $Get(id)="" Quit $$Error^%apiOBJ(5813,$classname())
	if (id="") { quit $$Error^%apiOBJ(5832,$classname(),id) }
	s paddr(1)=$lb($Name(^User.FakturaD(id)),$classname(),"IDKEY","listnode",id)
	s paddr=1
	Quit 1
%PurgeIndices(idxlist="",lockExtent=0,pIgnoreIndexList="") public {
	If idxlist="" { Quit 1 }
	Quit $$Error^%apiOBJ(5066,$classname()_"::"_$ListToString(idxlist)) }
%SQLAcquireLock(%rowid,s=0,unlockref=0)
	new %d,gotlock
	set %d(1)=%rowid set s=$e("E",'unlockref)_$e("S",s)
	lock +^User.FakturaD(%d(1))#s:$zu(115,4) set gotlock=$t
	if gotlock,'unlockref { set:$case($SYSTEM.Lock.ReturnCode(),2:1,4:1,:0)&&($tlevel) %0CacheLock("User.Faktura","E")=1 }
	set:gotlock&&unlockref unlockref=unlockref+1,unlockref(unlockref)=$lb($name(^User.FakturaD(%d(1))),"User.Faktura",s_"D")
	QUIT gotlock
%SQLAcquireTableLock(s=0,SQLCODE,to="")
	set s=$e("S",s) set:to="" to=$zu(115,4) lock +^User.FakturaD#s:to QUIT:$t 1 set SQLCODE=-110 if s="S" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler35",,"SQLUser"_"."_"Faktura") } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler36",,"SQLUser"_"."_"Faktura") } QUIT 0
	Quit
%SQLBuildIndices(pIndices="",pLockFlag=0,pStartID="",pEndID="",pIgnoreIndexList="")
	QUIT ..%BuildIndices(pIndices,,pLockFlag,,pStartID,pEndID,pIgnoreIndexList)
%SQLBuildPurgeIndexForRow(pIndices="",pActions="BP",pLockRow=1,%d,%e,pIgnoreIndexList="")
	// Purge and build index nodes for a single row using given values, return Status Code
	new sn,tSC,tLock set tSC=1,pActions=$zcvt(pActions,"U")
	try {
		if $g(%d(1))="" { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'SQLUser.Faktura'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'SQLUser.Faktura'"))) RETURN tSC }
		if pLockRow { if '..%SQLAcquireLock(%d(1)) { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'SQLUser.Faktura' with %ID = '"_%d(1)_"'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'SQLUser.Faktura' with %ID = '"_%d(1)_"'"))) RETURN tSC  } else { set tLock=1 }}
		if pLockRow { do ..%SQLReleaseLock(%d(1),0,0) set tLock=0 }
	}
	catch {
		if $g(tLock) { do ..%SQLReleaseLock(%d(1),0,0) }
		set tSC=$select(+tSC:$$Error^%apiOBJ(5594,$ze),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5594,$ze)))
	}
	QUIT tSC
%SQLCopyIcolIntoName()
	if %oper="DELETE" {
		set:$d(%d(1)) %f("ID")=%d(1)
		QUIT
	}
	set:$d(%d(1)) %f("ID")=%d(1) set:$a(%e,2)&&$d(%d(2)) %f("dataWystawienia")=%d(2) set:$a(%e,3)&&$d(%d(3)) %f("listaFakturPacjenta")=%d(3) set:$a(%e,4)&&$d(%d(4)) %f("wartoscFaktury")=%d(4) set:$a(%e,5)&&$d(%d(5)) %f("x__classname")=%d(5)
	QUIT
%SQLDefineiDjVars(%d,subs,master)
	QUIT
%SQLDelete(%rowid,%check,%tstart=1,%mv=0,%polymorphic=0)
	new bva,ce,%d,dc,%e,%ele,%itm,%key,%l,%nc,omcall,%oper,%pos,%s,sn,sqlcode,subs set %oper="DELETE",sqlcode=0,%ROWID=%rowid,%d(1)=%rowid,%e(1)=%rowid,%l=$c(0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,2) {
		new %ls lock +^User.FakturaD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("User.Faktura","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"SQLUser"_"."_"Faktura",$g(%d(1))) QUIT  }
	}
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORDelete"
	do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) if sqlcode { set SQLCODE=-106 do ..%SQLEExit() QUIT  }
	if %e(5)'="" { set sn=$p(%e(5),$e(%e(5)),$l(%e(5),$e(%e(5)))-1) if "Faktura"'=sn { new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLDelete",%rowid,%check,%tstart,%mv,1) QUIT  }}
	if '$a(%check),'$zu(115,7) do  if sqlcode set SQLCODE=sqlcode do ..%SQLEExit() QUIT  
	. new %fk,%k,%p,%st,%t,%z set %k="",%p("%1")="%d(1),",%p("IDKEY")="%d(1),"
	. for  quit:sqlcode<0  set %k=$o(^oddEXTR("User.Faktura","n",%k)) quit:%k=""  set %t="" for  set %t=$o(^oddEXTR("User.Faktura","n",%k,"f",%t)) quit:%t=""  set %st=(%t="User.Faktura") set %fk="" for  set %fk=$order(^oddEXTR("User.Faktura","n",%k,"f",%t,%fk)) quit:%fk=""  x "set %z=$classmethod(%t,%fk_""SQLFKeyRefAction"",%st,%k,$a(%check,2),"_%p(%k)_")" if %z set sqlcode=-124 quit  
	. quit:sqlcode  quit:$a(%check,2)=1
	. if $g(%e(3))'="",'$g(%0CacheLock("User.Pacjent","E")),'##class(User.Pacjent).%SQLExists(1,,%e(3)) set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler3",,"SQLUser"_"."_"Faktura","listaFakturPacjenta","LISTAFAKTURPACJENTA") quit
	set ce="" for  { set ce=$order(^oddSQL("SQLUser","Faktura","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children
	if '$a(%check,3) {
	}
	k ^User.FakturaD(%d(1))
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORDelete	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"Faktura",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"Faktura") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT
	Quit
%SQLDeleteTempStreams()
	// Delete all temporary streams
	QUIT
%SQLEExit()
	do ..%SQLUnlock() 
	do ..%SQLUnlockRef()
	if %tstart,$zu(115,1)=1,$TLEVEL { set %tstart=0 TROLLBACK 1 } kill:$g(omcall) %0CacheSQLRA QUIT  
	Quit
%SQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key %1.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=%pVal(1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"SQLUser"_"."_"Faktura"_":"_"%1") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv=$d(^User.FakturaD(%pVal(1))) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Quit
%SQLGetLock(pRowId,pShared=0,pUnlockRef)
	QUIT ..%SQLAcquireLock(pRowId,pShared,.pUnlockRef)
%SQLGetOld(%rowid,%d,%e,sqlcode)
	new s set %d(1)=%rowid if '$d(^User.FakturaD(%d(1)),s) { set sqlcode=100 quit  }
	Set %e(5)=$lg(s),%e(3)=$lg(s,4)
	QUIT
%SQLGetOldAll()
	new s set %d(1)=%rowid if '$d(^User.FakturaD(%d(1)),s) { set sqlcode=100 quit  }
	Set %e(5)=$lg(s),%e(2)=$lg(s,2),%e(4)=$lg(s,3),%e(3)=$lg(s,4)
	QUIT
%SQLInsert(%d,%check,%inssel,%vco,%tstart=1,%mv=0)
	new bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,sqlcode,sn,subs,unlockref,icol set %oper="INSERT",sqlcode=0,%l=$c(0,0,0),unlockref=1
	if $a(%check,7) { new %diu merge %diu=%d }
	if $d(%d(1)),'$zu(115,11) { if %d(1)'="" { set SQLCODE=-111,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler6",,"ID","SQLUser"_"."_"Faktura") QUIT ""  } kill %d(1) } 
	if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode QUIT "" }
	do ..%SQLNormalizeFields()
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  } set $zt="ERRORInsert"
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
			do:$g(%d(2))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,3)) do:$g(%d(4))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,5)) 
			quit:sqlcode<0		// A required field was missing
			quit:$zu(115,7)  set %msg=""
			if $g(%d(3))'="",'##class(User.Pacjent).%SQLExists($s($a(%check,2)=1:-1,1:0),.unlockref,%d(3)) { set sqlcode=-121,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler41",,"SQLUser"_"."_"Faktura","listaFakturPacjenta","LISTAFAKTURPACJENTA")_"  "_$g(%msg) quit  }		// Foreign Key Constraint listaFakturPacjenta
		} while 0
		if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT "" }		// A constraint failed
	}
	if '$d(%d(1)) { set %d(1)=$i(^User.FakturaD) } elseif %d(1)>$g(^User.FakturaD) { if $i(^User.FakturaD,$zabs(%d(1)-$g(^User.FakturaD))) {}} elseif $d(^User.FakturaD(%d(1))) { set SQLCODE=-119,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler33",,"ID",%d(1),"SQLUser"_"."_"Faktura"_"."_"ID") do ..%SQLEExit() QUIT "" }
	set:'($d(%d(5))#2) %d(5)="" set:'($d(%d(3))#2) %d(3)=""
	if '$a(%check,2) {
		new %ls lock +^User.FakturaD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("User.Faktura","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"SQLUser"_"."_"Faktura",$g(%d(1))) do ..%SQLEExit() QUIT ""  }
	}
	set ^User.FakturaD(%d(1))=$lb($g(%d(5)),%d(2),%d(4),$g(%d(3)))
	lock:$a(%l) -^User.FakturaD(%d(1))#"E"
	TCOMMIT:%tstart&&($zu(115,1)=1)
	do ..%SQLUnlockRef()
	set SQLCODE=0
	QUIT %d(1) 			// %SQLInsert
ERRORInsert	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"Faktura",$ze)
	if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"Faktura") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  }
	do ..%SQLEExit()
	QUIT ""
%SQLInvalid(pIcol,pVal) public {
	set:$l($g(pVal))>40 pVal=$e(pVal,1,40)_"..." do:'$d(%n) ..%SQLnBuild() set %msg=$s($g(%msg)'="":%msg_$c(13,10),1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler37",,"SQLUser"_"."_"Faktura"_"."_$lg(%n,pIcol),$s($g(pVal)'="":$s(pVal="":"<NULL>",pVal=$c(0):"<EMPTY STRING>",1:"'"_pVal_"'"),1:"")),sqlcode=$s(%oper="INSERT":-104,1:-105)
	QUIT sqlcode }
%SQLMissing(fname)
	set sqlcode=-108,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler47",,fname,"SQLUser"_"."_"Faktura") quit
%SQLNormalizeFields()
	set:$g(%d(2))'="" %d(2)=$s($zu(115,13)&&(%d(2)=$c(0)):"",1:%d(2)\1)
	new %f for %f=3,4 { set:$g(%d(%f))'="" %d(%f)=$select(%d(%f)=$c(0)&&$zu(115,13):"",1:%d(%f)\1) }
	QUIT
%SQLPurgeIndices(pIndices="",pLockExtent=0,pIgnoreIndexList="")
	QUIT ..%PurgeIndices(pIndices,pLockExtent,pIgnoreIndexList)
%SQLQuickBulkInsert(%nolock=0)
	// Insert multiple new rows with values %qd(icol)
	new c,call,nc,nr,%qd,r,x set:%nolock=2 %nolock=0
	set nr=$zobjexport(12) for r=1:1:nr { set nc=$zobjexport(12) kill %qd for c=1:1:nc { set:$zobjexport(17) %qd(c+1)=$zobjexport(12) } do ..%SQLQuickInsert(.%qd,%nolock) set x=$zobjexport($s(%qrc:-1,1:%ROWID),18) } QUIT
%SQLQuickBulkLoad(%rowidlist,%nolock=0,pkey=0)
	// QuickLoad multiple rows
	new i,rc set:%nolock=2 %nolock=0 set rc=0
	for i=2:1:$lg(%rowidlist)+1 { do ..%SQLQuickLoad($lg(%rowidlist,i),%nolock) if SQLCODE=0 { set rc=rc+1 } else { QUIT  } } set %ROWCOUNT=rc QUIT
	Quit
%SQLQuickBulkSave(%nolock=0)
	// Insert and/or Update multiple [new] rows with values %qd(icol)
	set x=$zobjexport(-1,18),%qrc=400,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler44",,"SQLUser"_"."_"Faktura") QUIT
%SQLQuickBulkUpdate(%nolock=0)
	// Update multiple new rows with values %qd(icol)
	new c,call,nc,nr,%qd,r,x set:%nolock=2 %nolock=0 set nr=$zobjexport(12) for r=1:1:nr { set %rowid=$zobjexport(12),nc=$zobjexport(12) kill %qd for c=1:1:nc { set:$zobjexport(17) %qd(c+1)=$zobjexport(12) } do ..%SQLQuickUpdate(%rowid,.%qd,%nolock) set x=$zobjexport($s(%qrc:-1,1:%ROWID),18) quit:%qrc  } QUIT  
%SQLQuickDelete(%rowid,%nolock=0,pkey=0)
	// Delete row where SQLRowID=%rowid
	set:%nolock=2 %nolock=0
	do ..%SQLDelete(%rowid,$c(0,%nolock=1,0,0,0,0))
	if SQLCODE<0 { set %qrc=-SQLCODE,%ROWCOUNT=0 } else { set %ROWCOUNT=1,%qrc=SQLCODE } QUIT
	Quit
%SQLQuickInsert(d,%nolock=0,pkey=0,parentpkey=0)
	// Insert new row with values d(icol)
	set:%nolock=2 %nolock=0
	do ..%SQLQuickOdbcToLogical(.d)
	set %ROWID=..%SQLInsert(.d,$c(0,%nolock=1,0,0,0,0)),%ROWCOUNT='SQLCODE,%qrc=SQLCODE kill d QUIT
%SQLQuickLoad(%rowid,%nolock=0,pkey=0,qq=0)
	// Get fields from row where SQLRowID=%rowid
	new d,i,il,subs set:%nolock=2 %nolock=1
	if %nolock=0 { if '..%SQLAcquireLock(%rowid) { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler45",,"SQLUser"_"."_"Faktura",%rowid),%ROWCOUNT=0 QUIT  } set:$zu(115,2) il=$zu(115,2,0) }
	new s,ul set ul=0,d(1)=%rowid if $zu(115,2)=1 { lock +^User.FakturaD(d(1))#"S":$zu(115,4) if $t { set ul=1 } else { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler46",,"SQLUser"_"."_"Faktura",%rowid),%ROWCOUNT=0 quit  } }
	if '$d(^User.FakturaD(d(1)),s) { set SQLCODE=100,%qrc=100 if %nolock=0 { do:$g(il) $zu(115,2,il) }} else { set SQLCODE=0
	if qq { set d(5)=$lg(s) if d(5)'="" { new sn set sn=$p(d(5),$e(d(5)),$l(d(5),$e(d(5)))-1) if "Faktura"'=sn { if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,1) do:$g(il) $zu(115,2,il) } kill d set:sn'["." sn="User."_sn do $classmethod(sn,"%SQLQuickLoad",%rowid,%nolock,0,1) QUIT  }}}
	set d(2)=$lg(s,2) set d(3)=$lg(s,4) set d(4)=$lg(s,3) set d(5)=$lg(s)  }
	do ..%SQLQuickLogicalToOdbc(.d)
	if SQLCODE set %ROWCOUNT=0 set:SQLCODE<0 SQLCODE=-SQLCODE lock:ul -^User.FakturaD(d(1))#"SI" set %qrc=SQLCODE QUIT
	set:qq d=$zobjexport("User.Faktura",18),d=$zobjexport(5,18) set i=-1 for  { set i=$o(d(i)) quit:i=""  set d=$zobjexport(d(i),18) } set %qrc=0,%ROWCOUNT=1 lock:ul -^User.FakturaD(d(1))#"SI" if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,0) do:$g(il) $zu(115,2,il) } QUIT
	Quit
%SQLQuickLogicalToOdbc(%d)
	set:$g(%d(2))'="" %d(2)=$$LogicalToOdbcField2(%d(2))
	QUIT
LogicalToOdbcField2(%val="") {
	Quit $select(%val="":"",%val'?0.1"-"4N1"-"2N1"-"2N.1(1" "2N1":"2N1":"2N.1(1"."0.9N)):$zdate(%val,3,,,,,-672045),1:$piece(%val," ",1))
}
	Quit
%SQLQuickOdbcToLogical(%d)
	set:$g(%d(2))'="" %d(2)=$$OdbcToLogicalField2(%d(2))
	QUIT
OdbcToLogicalField2(%val="") {
 quit:%val=""||($zu(115,13)&&(%val=$c(0))) "" quit:$isvalidnum(%val) %val set %val=$zdateh(%val,3,,,,,,,"Error: '"_%val_"' is an invalid ODBC/JDBC Date value") q:%val||(%val=0) %val s %msg=%val ZTRAP "ODAT"
}
	Quit
%SQLQuickUpdate(%rowid,d,%nolock=0,pkey=0)
	// Update row with SQLRowID=%rowid with values d(icol)
	set:%nolock=2 %nolock=0
	do ..%SQLQuickOdbcToLogical(.d)
	do ..%SQLUpdate(%rowid,$c(0,%nolock=1,0,0,0,0),.d) set %ROWCOUNT='SQLCODE set:SQLCODE=100 SQLCODE=0 set %qrc=SQLCODE kill d QUIT
%SQLReleaseLock(%rowid,s=0,i=0,e="")
	new %d
	set:e="" e=1 set %d(1)=%rowid set s=$e("E",e)_$e("S",s)_$e("D",i)
	lock -^User.FakturaD(%d(1))#s
	QUIT
%SQLReleaseTableLock(s=0,i=0)
	set s=$e("S",s)_$e("D",i) lock -^User.FakturaD#s QUIT 1
	Quit
%SQLUnlock()
	lock:$a(%l) -^User.FakturaD(%d(1))#"E"
	QUIT
%SQLUnlockError(cname)
	set sqlcode=-110 if %oper="DELETE" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler48",,"SQLUser"_"."_"Faktura",cname) } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler49",,"SQLUser"_"."_"Faktura",cname) } quit
	Quit
%SQLUnlockRef()
	for %itm=2:1:$g(unlockref) {
		if $lg(unlockref(%itm))'="%UnlockId" { lock -@$lg(unlockref(%itm))#$lg(unlockref(%itm),3) }
		else { do $classmethod($lg(unlockref(%itm),2),$lg(unlockref(%itm)),$lg(unlockref(%itm),3),1,1) }
	}
	QUIT
%SQLUpdate(%rowid,%check,%d,%vco,%tstart=1,%mv=0,%polymorphic=0,%soid)
	new %e,bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,icol,omcall,s,sn,sqlcode,subs,t,unlockref set %oper="UPDATE",sqlcode=0,%ROWID=%rowid,$e(%e,1)=$c(0),%l=$c(0,0,0),unlockref=1
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode QUIT  }
	do ..%SQLNormalizeFields()
	if $d(%d(1)),%d(1)'=%rowid { set SQLCODE=-107,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler16",,"ID","SQLUser"_"."_"Faktura") QUIT  }
	for icol=2:1:5 { set $e(%e,icol)=$c($d(%d(icol))) }
	set %d(1)=%rowid,%e(1)=%rowid
	if '$a(%check,2) {
		new %ls lock +^User.FakturaD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("User.Faktura","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"SQLUser"_"."_"Faktura",$g(%d(1))) QUIT  }
	}
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORUpdate"
	if $g(%vco)="" { do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) i sqlcode { s SQLCODE=-109 do ..%SQLEExit() QUIT  } for icol=5,3 { set:'$d(%d(icol)) %d(icol)=%e(icol) set:%d(icol)=%e(icol) $e(%e,icol)=$c(0) }} else { do ..%SQLGetOldAll() if sqlcode { set SQLCODE=-109 do ..%SQLEExit() QUIT  } for icol=2,3,4,5 { set:'$d(%d(icol)) %d(icol)=%e(icol) set:%d(icol)=%e(icol) $e(%e,icol)=$c(0) }}
	if %e(5)'="" set sn=$p(%e(5),$e(%e(5)),$l(%e(5),$e(%e(5)))-1) if "Faktura"'=sn new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLUpdate",%rowid,%check,.%d,$g(%vco),%tstart,%mv,1) QUIT
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
			if $a(%e,2),$g(%d(2))="" { do ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,3)) }
			if $a(%e,4),$g(%d(4))="" { do ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,5)) }
			quit:sqlcode
			quit:$zu(115,7)  set %msg=""
			if $a(%e,3),$g(%updcas)'="%1",$g(%d(3))'="",'##class(User.Pacjent).%SQLExists($s($a(%check,2)=1:-1,1:0),.unlockref,%d(3)) { set sqlcode=-122,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler41",,"SQLUser"_"."_"Faktura","listaFakturPacjenta","LISTAFAKTURPACJENTA")_"  "_$g(%msg) quit  }
			quit:$a(%check,2)=1  quit:$g(%updcas)'=""
			if ($a(%e,3)),%e(3)'="",'$g(%0CacheLock("User.Pacjent","E")),'##class(User.Pacjent).%SQLExists(1,,%e(3)) { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler21",,"SQLUser"_"."_"Faktura","listaFakturPacjenta","LISTAFAKTURPACJENTA") quit  }
		} while 0
		if sqlcode { set SQLCODE=sqlcode do ..%SQLEExit() QUIT  }
	}
	if $s($a(%e,2):1,$a(%e,3):1,$a(%e,4):1,1:$a(%e,5)) {
		set ^User.FakturaD(%d(1))=$listupdate($g(^User.FakturaD(%d(1))),1,$a(%e,5):%d(5),$a(%e,2):%d(2),$a(%e,4):%d(4),$a(%e,3):%d(3))
	}
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	do ..%SQLUnlockRef()
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORUpdate	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"Faktura",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"Faktura") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT  
	Quit
%SQLValidateFields(sqlcode)
	if $g(%d(2))'="",'($s($zu(115,13)&&(%d(2)=$c(0)):1,$isvalidnum(%d(2),0,0,2980013):1,'$isvalidnum(%d(2)):$$Error^%apiOBJ(7207,%d(2)),%d(2)<0:$$Error^%apiOBJ(7204,%d(2),0),1:$$Error^%apiOBJ(7203,%d(2),2980013))) { set sqlcode=..%SQLInvalid(2+1,%d(2)) } 
	if $g(%d(4))'="",'($select(%d(4)=$c(0)&&$zu(115,13):1,$isvalidnum(%d(4),0,0):1,'$isvalidnum(%d(4)):$$Error^%apiOBJ(7207,%d(4)),1:$$Error^%apiOBJ(7204,%d(4),0))) { set sqlcode=..%SQLInvalid(4+1,%d(4)) } 
	QUIT 'sqlcode
%SQLnBuild() public {
	set %n=$lb(,"ID","dataWystawienia","listaFakturPacjenta","wartoscFaktury","x__classname")
	QUIT }
%Save(related=1) public {
	Set $ZTrap="%SaveERR"
	New %objTX Set sc=1,traninit=0 If '$data(%objTX2) New %objTX2 Set %objTX2=1
	If +$g(%objtxSTATUS)=0 { Set traninit=1 k %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxOIDUNASSIGNED,%objtxMODIFIED,%objtxVERSION k:'$TLevel %objtxTID,%objtxID i '$zu(115,9) { s %objtxSTATUS=1 } else { TStart  s %objtxSTATUS=2 } }
	If $get(%objTX2(+$this)) Set sc=..%BuildObjectGraph(1) Quit:('sc) sc Set intRef=+$this,objValue=$get(%objTX(1,intRef,1)),sc=..%SerializeObject(.objValue,1) Set:(''sc) %objTX(1,intRef,1)=objValue Quit sc
	Set sc=..%BuildObjectGraph(related+2) If ('sc) ZTrap "SG"
	If '$data(%objTX(2)) s sc=1 GoTo %SaveCOMMIT
	Set %objTX(3)=0,intRef="" For  Set intRef=$order(%objTX(2,intRef)) Quit:intRef=""  If '$data(%objTX(1,intRef,2)) Set %objTX(3,$increment(%objTX(3)))=%objTX(1,intRef) Kill %objTX(2,intRef)
	For ptr=1:1 Quit:ptr>%objTX(3)  Set objRef=%objTX(3,ptr),objValue=$get(%objTX(1,+objRef,1)),sc=objRef.%SerializeObject(.objValue) Do  Set %objTX(1,+objRef,1)=objValue Kill %objTX(1,+objRef,3) Do $system.CLS.SetModified(objRef,0)
	. If ('sc) ZTrap "SG"
	. i $g(%objtxSTATUS)=2 { Set %objtxMODIFIED(+objRef)=$system.CLS.GetModifiedBits(objRef) }
	. Set intSucc="" For  Set intSucc=$order(%objTX(1,+objRef,3,intSucc)) Quit:intSucc=""  Kill %objTX(1,+objRef,3,intSucc),%objTX(1,intSucc,2,+objRef) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$increment(%objTX(3)))=%objTX(1,intSucc) Kill %objTX(2,intSucc)
	Kill %objTX(3) Set %objTX(3)=0 For  Set pserial=0 Do  Quit:'pserial
	. Set intRef="" For  Set intRef=$order(%objTX(2,intRef)) Quit:intRef=""  Set intPred="" For  Set intPred=$order(%objTX(1,intRef,2,intPred)) Quit:intPred=""  If $get(%objTX(1,intPred,6))=1 Set objValue=$get(%objTX(1,intPred,1)),sc=(%objTX(1,intPred)).%SerializeObject(.objValue,1) s:('sc) %objTX(2,intPred,1)=sc If (''sc) Set pserial=1,%objTX(1,intPred,1)=objValue Do
	. . Set intSucc="" For  Set intSucc=$order(%objTX(1,intPred,3,intSucc)) Quit:intSucc=""  Kill %objTX(1,intPred,3,intSucc),%objTX(1,intSucc,2,intPred) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$i(%objTX(3)))=%objTX(1,intSucc) Kill %objTX(2,intSucc)
	. . For ptr=1:1 Quit:ptr>%objTX(3)  Set objSerialize=%objTX(3,ptr),objValue=$get(%objTX(1,+objSerialize,1)),sc=objSerialize.%SerializeObject(.objValue) Do  Set %objTX(1,+objSerialize,1)=objValue Kill %objTX(1,+objSerialize,3) Do $system.CLS.SetModified(objSerialize,0)
	. . . If ('sc) ZTrap "SG"
	. . . i $g(%objtxSTATUS)=2 { Set %objtxMODIFIED(+objSerialize)=$system.CLS.GetModifiedBits(objSerialize) }
	. . . Set intSucc="" For  Set intSucc=$order(%objTX(1,+objSerialize,3,intSucc)) Quit:intSucc=""  Kill %objTX(1,+objSerialize,3,intSucc),%objTX(1,intSucc,2,+objSerialize) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$i(%objTX(3)))=%objTX(1,intSucc) Kill %objTX(2,intSucc)
	. . Kill %objTX(3) Set %objTX(3)=0
	If $data(%objTX(2))>2 {
		Set sc=$$Error^%apiOBJ(5827,$classname())
		set intRef="" for  set intRef=$order(%objTX(2,intRef)) quit:intRef=""  if ('$Get(%objTX(2,intRef,1),1)) set sc=$$EmbedStatus^%apiOBJ(sc,%objTX(2,intRef,1))
	 	ZTrap "SG"
	}
	Set cmd="" For  Set cmd=$order(%objTX(9,cmd)) Quit:cmd=""  Xecute cmd
%SaveCOMMIT	If traninit { i $g(%objtxSTATUS)=1 { k %objtxSTATUS } else { If $Tlevel { TCommit  } k %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxOIDUNASSIGNED,%objtxMODIFIED,%objtxVERSION k:'$TLevel %objtxTID,%objtxID } }
	Do $system.CLS.SetModified(0) Quit sc
%SaveERR	Set $ZTrap="" If $extract($zerror,1,5)'="<ZSG>" Set sc=$$Error^%apiOBJ(5002,$ZE)
	If $get(traninit) { i $g(%objtxSTATUS)=2 { s sc=$select(+sc:$$%TRollBack^%occTransaction(),1:$$AppendStatus^%occSystem(sc,$$%TRollBack^%occTransaction())) k %objtxTID,%objtxID } else { k %objtxSTATUS } }
	Quit sc }
%SaveData(id) public {
	try {
		set id=$listget(i%"%%OID") if id'="" { set insert=0,idassigned=1 } else { set insert=1,idassigned=0 }
		set lock=0,lockok=0,tSharedLock=0
		if 'idassigned { set id=$i(^User.FakturaD) Set $zobjoid("User.Faktura",id)=$this,.."%%OID"=$lb(id_"","User.Faktura") set:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this)="" }
		if (i%listaFakturPacjenta'="")&&('##class(User.Pacjent).%ExistsId(i%listaFakturPacjenta)) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5824,"User.Faktura.listaFakturPacjenta("_$zu(144,1,i%listaFakturPacjenta)_")")) }
		try {
			set tInnerException = ""
			;
			if 'insert {
				if (i%%Concurrency<4)&&(i%%Concurrency) { lock +(^User.FakturaD(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lockok=2&&($tlevel) %0CacheLock($classname(),"E")=1 if lockok { set lock=1 } else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if ('$Data(^User.FakturaD(id))) {
					set insert=1
					if lock { lock -(^User.FakturaD(id)#"E") set (lock,lockok) = 0 }
				}
			}
			if insert {
				if ('lockok&&..%Concurrency&&$tlevel)||(i%%Concurrency=4) {  lock +(^User.FakturaD(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:(lockok=2&&(i%%Concurrency'=4)) %0CacheLock($classname(),"E")=1 set:lockok lock=1 if 'lockok { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if i%%Concurrency=3 { lock +(^User.FakturaD(id)#"ES") set tSharedLock=1 }
				set ^User.FakturaD(id)=$lb("",i%dataWystawienia,i%wartoscFaktury,i%listaFakturPacjenta)
			}
			else {
				set ^User.FakturaD(id)=$lb("",i%dataWystawienia,i%wartoscFaktury,i%listaFakturPacjenta)
			}
			set tStatus = 1
		}
		catch tInnerException {
			if ('idassigned) { Set $zobjoid("",$listget(i%"%%OID"))="" Set $this."%%OID" = "" kill:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this) }
			if (tSharedLock) {  lock -(^User.FakturaD(id)#"ES") } elseif (lockok=1)&&(insert)&&(i%%Concurrency=4) {  lock -(^User.FakturaD(id)) }
		}
		if lock lock -(^User.FakturaD(id)#"E")
		if $Isobject(tInnerException) { throw tInnerException }
	}
	catch tException {
		set tStatus = tException.AsStatus()
	}
	quit tStatus }
%SaveDirect(id="",idList="",data,concurrency=-1) public {
	try {
		set zzc5v1=$listget(data,4)
		if concurrency=-1 { set concurrency=$zu(115,10) }
		if id'="" { set insert=0,idassigned=1 } else { set insert=1,idassigned=0 }
		set lock=0,tSharedLock=0
		if 'idassigned { set id=$i(^User.FakturaD) }
		if (zzc5v1'="")&&('##class(User.Pacjent).%ExistsId(zzc5v1)) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5824,"User.Faktura.listaFakturPacjenta("_$zu(144,1,zzc5v1)_")")) }
		try {
			set tInnerException = ""
			;
			if 'insert {
				if concurrency { lock +(^User.FakturaD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if ('$Data(^User.FakturaD(id))) {
					set insert=1
					if lock { lock -(^User.FakturaD(id)#"E") set (lock,lockok) = 0 }
				}
			}
			if insert {
				if concurrency { lock +(^User.FakturaD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				set ^User.FakturaD(id)=data
			}
			else {
				set ^User.FakturaD(id)=data
			}
			set tStatus = 1
		}
		catch tInnerException {
		}
		if lock lock -(^User.FakturaD(id)#"E")
		if $Isobject(tInnerException) { throw tInnerException }
	}
	catch tException {
		set tStatus = tException.AsStatus()
	}
	quit tStatus }
%SaveIndices(pStartId="",pEndId="",lockExtent=0) public {
	Quit 1 }
%SerializeObject(serial,partial=0) public {
	try {
		If $get(%objTX2(+$this)) { Set partial = 1 } ElseIf ('partial) { Set %objTX2(+$this) = 1 }
		Set sc=..%ValidateObject(,0) Throw:('sc) ##class(%Exception.StatusException).ThrowIfInterrupt(sc)
		Set sc=..%NormalizeObject() Throw:('sc) ##class(%Exception.StatusException).ThrowIfInterrupt(sc)
		If r%FakturaPozycjiFaktury'="" { Set:'$data(%objTX(1,+r%FakturaPozycjiFaktury,1)) %objTX(1,+r%FakturaPozycjiFaktury)=r%FakturaPozycjiFaktury,%objTX(1,+r%FakturaPozycjiFaktury,1)=..FakturaPozycjiFakturyGetObject(1),%objTX(1,+r%FakturaPozycjiFaktury,6)=2 Set M%FakturaPozycjiFaktury=1,i%FakturaPozycjiFaktury=$listget(%objTX(1,+r%FakturaPozycjiFaktury,1)) }
		If r%listaFakturPacjenta'="" { Set:'$data(%objTX(1,+r%listaFakturPacjenta,1)) %objTX(1,+r%listaFakturPacjenta)=r%listaFakturPacjenta,%objTX(1,+r%listaFakturPacjenta,1)=..listaFakturPacjentaGetObject(1),%objTX(1,+r%listaFakturPacjenta,6)=1 Set M%listaFakturPacjenta=1,i%listaFakturPacjenta=$listget(%objTX(1,+r%listaFakturPacjenta,1)) }
		If r%pracownikWystawiajacy'="" { Set:'$data(%objTX(1,+r%pracownikWystawiajacy,1)) %objTX(1,+r%pracownikWystawiajacy)=r%pracownikWystawiajacy,%objTX(1,+r%pracownikWystawiajacy,1)=..pracownikWystawiajacyGetObject(1),%objTX(1,+r%pracownikWystawiajacy,6)=2 Set M%pracownikWystawiajacy=1,i%pracownikWystawiajacy=$listget(%objTX(1,+r%pracownikWystawiajacy,1)) }
		s:$g(%objtxSTATUS)=2 %objtxLIST(+$this)=$this
		Set id=$listget(serial),sc=..%SaveData(.id) If ('sc) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt(sc) }
		Set serial=(..%Oid())
		if 'partial {
			Set %objTX2(+$this) = 0
		}
		set sc=1
	}
	catch tException {
		If 'partial { Set %objTX2(+$this) = 0 }
		set sc = tException.AsStatus()
	}
	Quit sc }
%AddToSaveSet(depth=3,refresh=0) public {
	If $data(%objTX(1,+$this)) && ('refresh) Quit 1
	Set sc=1,intOref=+$this
	If refresh Set intPoref="" For  Set intPoref=$order(%objTX(1,intOref,2,intPoref)) Quit:intPoref=""  Kill %objTX(1,intPoref,3,intOref),%objTX(1,intOref,2,intPoref)
	Set serial=..%Oid(),%objTX(1,intOref)=$this,%objTX(1,intOref,1)=serial,%objTX(1,intOref,6)=1 If (serial '= "") && (depth<2) { Quit 1 } Else { Set %objTX(7,intOref)=1 }
	Set Poref=r%%source If Poref'="",'$data(%objTX(1,+Poref)) Set %objTX(6,$i(%objTX(6)))=Poref
	Set Poref=r%FakturaPozycjiFaktury If Poref'="",'$data(%objTX(1,+Poref)) Set %objTX(6,$i(%objTX(6)))=Poref
	Set Poref=r%listaFakturPacjenta If Poref'="" Set:'$data(%objTX(1,+Poref)) %objTX(6,$i(%objTX(6)))=Poref Set %objTX(8,$i(%objTX(8)))=$lb(+Poref,intOref,2)
	Set Poref=r%pracownikWystawiajacy If Poref'="",'$data(%objTX(1,+Poref)) Set %objTX(6,$i(%objTX(6)))=Poref
exit	Quit sc }
%SortBegin(idxlist="",excludeunique=0)
	Quit 1
%SortEnd(idxlist="",commit=1,excludeunique=0) public {
	Quit 1 }
%UnlockExtent(shared=0,immediate=0) public {
	If 'shared {
		If 'immediate {
			Lock -^User.FakturaD
			 Quit 1
		}
		Lock -^User.FakturaD#"I"
		Quit 1
	}
	If 'immediate {
		Lock -^User.FakturaD#"S"
		Quit 1
	}
	Lock -^User.FakturaD#"SI"
	Quit 1 }
%UnlockId(id,shared=0,immediate=0) public {
	If 'shared {
		If 'immediate {
			Lock -(^User.FakturaD(id)#"E")
			Quit 1
		}
		Lock -(^User.FakturaD(id)#"IE")
		Quit 1
	}
	If 'immediate {
		Lock -(^User.FakturaD(id)#"SE")
		Quit 1
	}
	Lock -(^User.FakturaD(id)#"SIE")
	Quit 1 }
%ValidateIndices(idxList="",autoCorrect=0,lockOption=1,multiProcess=1)
	w !,"There are no indices to validate for class 'User.Faktura'"
	QUIT 1
%ValidateObject(force=0,checkserial=1) public {
	set sc=1
	If '$system.CLS.GetModified() Quit sc
	If m%%id Set iv=..%id If iv'="" Set rc=(..%idIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"%id",iv)
	If m%%seriesCount Set iv=..%seriesCount If iv'="" Set rc=(..%seriesCountIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"%seriesCount",iv)
	Set iv=..dataWystawienia If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::dataWystawienia("_$this_",ID="_..%Id()_")"),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%dataWystawienia Set rc=(..dataWystawieniaIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"dataWystawienia",iv)
	Set iv=..wartoscFaktury If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::wartoscFaktury("_$this_",ID="_..%Id()_")"),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%wartoscFaktury Set rc=(..wartoscFakturyIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"wartoscFaktury",iv)
	Quit sc }
zPopulate(count=10,verbose=0,DeferIndices=1,objects=0,tune=1,deterministic=0)
	New errcnt,i,id,keepobjects,obj,rss1,save,saved
	Set saved=0,keepobjects=0,errcnt=0
	Do $ZU(165,0,$S(deterministic:481516,1:$RANDOM(99999999)))
	If objects Set keepobjects=1,objects=0
	If DeferIndices Do ..%SortBegin("",1)
	s ^CacheTempNodes("gbl",$j,$name(^CacheTempPop($j)))=$lb($h,$username) Kill ^CacheTempPop($j)
	d ##class(%Library.PopulateUtils).BuildReferenceSample("User.Pacjent",.rss1)
	For i=1:1:count Do  if errcnt>1000 write:verbose !,"over 1,000 errors encountered with no successful save - exiting" quit
	. Set obj=##class(User.Faktura).%New()
	. Set obj.%id=""
	. Set obj.%seriesNames=""
	. Set obj.dataWystawienia=##class(%Library.PopulateUtils).Date(,)
	. Set id=##class(%Library.PopulateUtils).ArrayElement(.rss1) If id'="",##class(User.Pacjent).%ExistsId(id) Do obj.listaFakturPacjentaSetObjectId(id)
	. Set obj.wartoscFaktury=##class(%Library.PopulateUtils).Integer(0,)
	. If 'keepobjects Do
	. . Set save=obj.%Save()
	. . If (''save) Set saved=saved+1,errcnt=0 If verbose Write !,"Object saved...",saved
	. . If ('save) set errcnt=errcnt+1 if verbose Do DisplayError^%apiOBJ(save)
	. If keepobjects Set objects($Increment(objects))=obj
	. Set obj=""
	k ^CacheTempNodes("gbl",$j,$name(^CacheTempPop($j))) Kill ^CacheTempPop($j)
	If DeferIndices Do ..%SortEnd(,,1)
	If tune Do TuneTable^%apiSQL("SQLUser.Faktura",1,verbose,.%msg,1)
	Quit saved
zXMLDTD(top,format,input,dtdlist)
 Quit ##class(%XML.Implementation).XMLDTD("User.Faktura",.top,.format,.input,.dtdlist)
zXMLExportInternal()
 New tag,summary,attrsVal,savelocal,aval,k,tmpPrefix,prefixDepth,hasNoContent,hasElement,topAttrs,beginprefix,endprefix,savexsiAttrs,initialxsiAttrs,initlist,initialCR,inlineFlag,popAtEnd,saveTopPrefix,saveTypesPrefix,saveAttrsPrefix,saveUsePrefix,initlist
 Set $ztrap="XMLExportInternalTrap",popAtEnd=0
 Set summary=summaryArg,initialxsiAttrs=xsiAttrs
 If group Quit $$Error^%apiOBJ(6386,"User.Faktura")
 If indentFlag Set initialCR=($extract(currentIndent,1,2)=$c(13,10))
 Set id=createId
 Set temp=""
 If id'="" {
   If $piece($get(idlist(+$this)),",",2)'="" Quit 1
   Set idlist(+$this)=id_",1"
 }
 If encoded Set initlist=$lb($get(oreflist),inlineFlagArg),oreflist=1,inlineFlag=inlineFlagArg
 If 'nocycle,('encoded||inlineFlag) {
   If $data(oreflist($this)) Quit $$Error^%apiOBJ(6296,"User.Faktura")
   Set oreflist($this)=""
 }
 Set tag=$get(topArg)
 Set tmpi=(($get(typeAttr)'="")&&(typeAttr'="User.Faktura"))
 If $IsObject(namespaces) {
     Set popAtEnd=1,saveTopPrefix=topPrefix,saveTypesPrefix=typesPrefix,saveAttrsPrefix=attrsPrefix,saveUsePrefix=usePrefix
     Set sc=namespaces.PushNodeForExport("",$get(local,0),(encoded||tmpi),"",,.topPrefix,.topAttrs,.typesPrefix,.attrsPrefix,.usePrefix)
     If 'sc Quit sc
   Set beginprefix=$select(namespaces.ElementQualified&&usePrefix:typesPrefix,1:"")
   If topAttrs'="" Set temp=temp_" "_topAttrs
   If tag="" Set tag="Faktura"
   Set xsitype=namespaces.OutputTypeAttribute
 } Else {
   Set saveTopPrefix=topPrefix,saveTypesPrefix=typesPrefix,saveAttrsPrefix=attrsPrefix,saveUsePrefix=usePrefix
   Set typesPrefix=namespaces If (typesPrefix'=""),($extract(typesPrefix,*)'=":") Set typesPrefix=typesPrefix_":"
   If 'encoded Set namespaces=""
   Set (topPrefix,attrsPrefix,topAttrs,beginprefix)=""
   If tag="" Set tag=typesPrefix_"Faktura"
   Set xsitype=0
 }
 Set local=+$get(local),savelocal=local
 Set endprefix="</"_beginprefix,beginprefix="<"_beginprefix
 If tmpi Set temp=temp_" "_xsiPrefix_"type="""_typesPrefix_"Faktura"""_xsiAttrs,xsiAttrs=""
   If id'="" Set temp=" "_$select($get(soap12):soapPrefix_"id",1:"id")_"=""id"_id_""""_temp
 If encoded Set temp=temp_xsiAttrs,xsiAttrs=""
 If indentFlag Set %xmlmsg=currentIndent if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg } Set currentIndent=$select(initialCR:"",1:$c(13,10))_currentIndent_indentChars
 If tag[":" Set topPrefix=$piece(tag,":"),tag=$piece(tag,":",2)  If topPrefix'="" Set topPrefix=topPrefix_":"
 Set %xmlmsg="<"_topPrefix_tag_temp if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set attrsVal=attrsArg,attrsArg="" Set %xmlmsg=attrsVal if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set %xmlmsg=">" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..dataWystawienia
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"dataWystawienia"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"date""",1:"")_">"_$select(val="":"",1:$zdate(val,3,,,,,-672045))_endprefix_"dataWystawienia>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..wartoscFaktury
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"wartoscFaktury"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"long""",1:"")_">"_val_endprefix_"wartoscFaktury>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set aval=..FakturaPozycjiFaktury
 Set k="" Set:deepFlag val=aval.GetNext(.k) If k'="" {
   If encoded {
     If indentFlag Set %xmlmsg=currentIndent Set currentIndent=currentIndent_indentChars if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
     Set temp="",temp1=$parameter("User.PozycjaFaktury","NAMESPACE")
     Set temp1=$select((temp1'="")&&$IsObject(namespaces):namespaces.GetNamespacePrefix(temp1,.temp),1:typesPrefix)
     If soap12 { Set %xmlmsg=beginprefix_"FakturaPozycjiFaktury"_$select(xsitype:"",1:" "_soapPrefix_"itemType="""_temp1_$select($parameter("User.PozycjaFaktury","XMLSUMMARY")'="":"s_PozycjaFaktury",1:"PozycjaFaktury")_"""")_" "_soapPrefix_"arraySize="""_aval.Count()_""""_""_temp_">" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
     } Else { Set %xmlmsg=beginprefix_"FakturaPozycjiFaktury "_$select(xsitype:xsiPrefix_"type="""_soapPrefix_"Array""",1:soapPrefix_"arrayType="""_temp1_$select($parameter("User.PozycjaFaktury","XMLSUMMARY")'="":"s_PozycjaFaktury",1:"PozycjaFaktury")_"["_aval.Count()_"]""")_""_temp_">" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg } }
   }
   Else {
     If indentFlag Set %xmlmsg=currentIndent Set currentIndent=currentIndent_indentChars if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
     Set %xmlmsg=beginprefix_"FakturaPozycjiFaktury>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
   }
   While k'="" {
     If $IsObject(val) {
       Set id=""
       If encoded,'inlineFlag {
         Set temp=$select($parameter("User.PozycjaFaktury","XMLSUMMARY")'="":-1,1:1)
         Set id=+$get(idlist(temp*val))
         If 'soap12 , (id=0) Set id=$increment(idlist),oreflist(temp*id)=val,idlist(temp*val)=id
       }
       If +id'=0 {
         Set %xmlmsg=currentIndent_beginprefix_"PozycjaFaktury "_$select(soap12:soapPrefix_"ref=""",1:"href=""#")_"id"_id_""" />" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
       } Else { if id=0 Set id=$increment(idlist)
         Set topArg="PozycjaFaktury",summaryArg=1,group=0,createId=$get(id),typeAttr=$select(encoded||xsitype:"*",1:"User.PozycjaFaktury"),local=1,savexsiAttrs=xsiAttrs
         Set sc=val.XMLExportInternal() Goto:'sc XMLExportExit Set xsiAttrs=savexsiAttrs
         If 'encoded Do aval.%UnSwizzleAt(k)
       }
     } Else {
       Set %xmlmsg=currentIndent_beginprefix_"PozycjaFaktury "_xsiPrefix_"nil=""true"""_xsiAttrs_"/>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
     }
     Set val=aval.GetNext(.k)
   }
   If indentFlag Set currentIndent=$extract(currentIndent,1,*-$length(indentChars)) Set %xmlmsg=currentIndent if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
   Set %xmlmsg=endprefix_"FakturaPozycjiFaktury>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set aval=..pracownikWystawiajacy
 Set k="" Set:deepFlag val=aval.GetNext(.k) If k'="" {
   If encoded {
     If indentFlag Set %xmlmsg=currentIndent Set currentIndent=currentIndent_indentChars if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
     Set temp="",temp1=$parameter("User.Pracownik","NAMESPACE")
     Set temp1=$select((temp1'="")&&$IsObject(namespaces):namespaces.GetNamespacePrefix(temp1,.temp),1:typesPrefix)
     If soap12 { Set %xmlmsg=beginprefix_"pracownikWystawiajacy"_$select(xsitype:"",1:" "_soapPrefix_"itemType="""_temp1_$select($parameter("User.Pracownik","XMLSUMMARY")'="":"s_Pracownik",1:"Pracownik")_"""")_" "_soapPrefix_"arraySize="""_aval.Count()_""""_""_temp_">" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
     } Else { Set %xmlmsg=beginprefix_"pracownikWystawiajacy "_$select(xsitype:xsiPrefix_"type="""_soapPrefix_"Array""",1:soapPrefix_"arrayType="""_temp1_$select($parameter("User.Pracownik","XMLSUMMARY")'="":"s_Pracownik",1:"Pracownik")_"["_aval.Count()_"]""")_""_temp_">" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg } }
   }
   Else {
     If indentFlag Set %xmlmsg=currentIndent Set currentIndent=currentIndent_indentChars if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
     Set %xmlmsg=beginprefix_"pracownikWystawiajacy>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
   }
   While k'="" {
     If $IsObject(val) {
       Set id=""
       If encoded,'inlineFlag {
         Set temp=$select($parameter("User.Pracownik","XMLSUMMARY")'="":-1,1:1)
         Set id=+$get(idlist(temp*val))
         If 'soap12 , (id=0) Set id=$increment(idlist),oreflist(temp*id)=val,idlist(temp*val)=id
       }
       If +id'=0 {
         Set %xmlmsg=currentIndent_beginprefix_"Pracownik "_$select(soap12:soapPrefix_"ref=""",1:"href=""#")_"id"_id_""" />" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
       } Else { if id=0 Set id=$increment(idlist)
         Set topArg="Pracownik",summaryArg=1,group=0,createId=$get(id),typeAttr=$select(encoded||xsitype:"*",1:"User.Pracownik"),local=1,savexsiAttrs=xsiAttrs
         Set sc=val.XMLExportInternal() Goto:'sc XMLExportExit Set xsiAttrs=savexsiAttrs
         If 'encoded Do aval.%UnSwizzleAt(k)
       }
     } Else {
       Set %xmlmsg=currentIndent_beginprefix_"Pracownik "_xsiPrefix_"nil=""true"""_xsiAttrs_"/>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
     }
     Set val=aval.GetNext(.k)
   }
   If indentFlag Set currentIndent=$extract(currentIndent,1,*-$length(indentChars)) Set %xmlmsg=currentIndent if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
   Set %xmlmsg=endprefix_"pracownikWystawiajacy>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 If indentFlag { Set currentIndent=$extract(currentIndent,1,*-$length(indentChars)) Set %xmlmsg=currentIndent if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }}
 Set %xmlmsg="</"_topPrefix_tag_">"
 if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg } If indentFlag,'initialCR if $data(%xmlBlock) { Set %xmlmsg="" Do xeWriteLine^%occXMLInternal } else { write ! } Set $extract(currentIndent,1,2)=""
 If '$IsObject(namespaces) || (popAtEnd=1) Set topPrefix=saveTopPrefix,typesPrefix=saveTypesPrefix,attrsPrefix=saveAttrsPrefix,usePrefix=saveUsePrefix
 If popAtEnd Do namespaces.PopNode()
 If encoded Set oreflist=$list(initlist),inlineFlag=$list(initlist,2)
 If 'encoded||inlineFlag {
   If 'nocycle Kill oreflist($this)
 } ElseIf $get(oreflist)'=1 {
   Set oreflist=1
   Set id=$order(oreflist(""))
   While id'="" {
     Set val=oreflist(id)
     Kill oreflist(id)
     Set group=0,createId=$zabs(id),typeAttr="*",local=savelocal,xsiAttrs=initialxsiAttrs
     If $classname(val)="User.Faktura" {
       Set attrsArg=attrsVal
       Set topArg=tag,summaryArg=0
       Set sc=val.XMLExportInternal()
     } Else {
       Set topArg="",summaryArg=(id<0)
       Set sc=val.XMLExportInternal()
     }
     If 'sc Quit
     Set id=$order(oreflist(""))
   }
   Kill oreflist
 }
 Quit sc
XMLExportInternalTrap Set $ztrap=""
 If $data(val) , $IsObject(val) , ($piece($ze,">",1)="<METHOD DOES NOT EXIST") {
   Set sc=$$Error^%apiOBJ(6249,$classname(val))
 } Else {
   Set sc=$$Error^%apiOBJ(5002,$ze)
 }
XMLExportExit 
 If '$IsObject(namespaces) || (popAtEnd=1) Set topPrefix=saveTopPrefix,typesPrefix=saveTypesPrefix,attrsPrefix=saveAttrsPrefix,usePrefix=saveUsePrefix
 If popAtEnd Do namespaces.PopNode()
 Quit sc
zXMLGetSchemaImports(imports,classes)
 Quit ##class(%XML.Implementation).XMLGetSchemaImports("User.Faktura",.imports,.classes)
zXMLImportAttributes()
 ;
 Quit 1
XMLImportAttrErr Quit $$Error^%apiOBJ(6260,ref,$get(@(tree)@("d",$zlascii(attributeList(ref),13))),@(tree)@("d",$zlascii(nodelist,9))_$$XMLImportAttrLocation(nodelist))
XMLImportFixedAttrErr Quit $$Error^%apiOBJ(6320,ref,$get(@(tree)@("d",$zlascii(attributeList(ref),13))),@(tree)@("d",$zlascii(nodelist,9))_$$XMLImportAttrLocation(nodelist))
XMLImportAttrLocation(nodelist) new msg,loc
 Set loc=$lb($zlascii(nodelist,21),$zlascii(nodelist,25))
 If loc="" Quit ""
 Set msg=$get(^%qCacheMsg("%ObjectErrors",$s(""'="":$zcvt("","L"),1:$s($mvv(58)="":"en",1:$mvv(58))),"XMLImportLocation")," (%1,%2)")
 Quit $$FormatText^%occMessages(msg,$listget(loc,1),$listget(loc,2))
zXMLImportInternal()
 New child,childlist,node,nodelist,inner,innerlist,data,encodedArray,key,nsIndex,savechild,savechildlist,saveinner,saveinnnerlist,exists
 Set $ztrap="XMLImportInternalTrap"
 Set encoded=$case($piece(fmt,",",1),"":0,"literal":0,"encoded":1,"encoded12":1,:"")
 If encoded="" Quit $$Error^%apiOBJ(6231,fmt)
 Set nsIndex=$select($get(namespace)="":"",1:$get(@(tree)@("N",namespace)))
 Set node=nodeArg,nodelist=nodeArgChildlist
 If tag'=@(tree)@("d",$zlascii(nodelist,9)) Set inner=node Goto XMLImportMalformed
 If bareProjection Quit $$Error^%apiOBJ(6386,"User.Faktura")
 If encoded {
   Do XMLImportAttrnode() If $data(attributeList("id")) Set idlist(node)=$this
 }
 If $zboolean(+($zlascii(nodelist,13)#16),+1,1) Quit 1
 Set sc=$$XMLImportElements()
 If $get(checkRequired),(''sc) { Set nodelist=""
   If '$data(exists("dataWystawienia")) Set nodelist=nodelist_"dataWystawienia, "
   If '$data(exists("wartoscFaktury")) Set nodelist=nodelist_"wartoscFaktury, "
   If nodelist'="" Set sc=$$Error^%apiOBJ(6318,$extract(nodelist,1,*-2))
 }
XMLImportExit Quit sc
XMLImportElements() ;
XMLLOOP1 Set descriptor=$zlascii(nodelist,$zwascii(nodelist,17)) Set child=($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)_","_$zwascii(nodelist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else { Set child="" }} For { Quit:child=""  Quit:(descriptor#16)'=2  Set descriptor=$piece(child,",",2)+4 Set child=$piece(child,",",1)_","_descriptor Set descriptor=$zlascii(nodelist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else {Set child="" }} } Goto XMLLOOP2
XMLLOOP For  { Set descriptor=$piece(child,",",2)+4 Set child=$piece(child,",",1)_","_descriptor Set descriptor=$zlascii(nodelist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else {Set child="" }} Quit:child=""  Quit:(descriptor#16)'=2  }
XMLLOOP2 If child="" Quit sc
 If (descriptor#16)'=0 Set inner=child Goto XMLImportMalformedNoTag
 Set childlist=@(tree)@((descriptor\16))
 Set tag=@(tree)@("d",$zlascii(childlist,9))
 If tag="dataWystawienia" {
   If ($get(namespace)'=""),'$case($zwascii(childlist,19),0:1,nsIndex:1,:0) Goto XMLImportNSchild
   Set exists("dataWystawienia")=1
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             Set data=$zstrip(data,"<>W",$c(13,10)) If data'="" Set data=..dataWystawieniaXSDToLogical(data) Goto:data="" XMLImportErrchild Goto:('$s($zu(115,13)&&(data=$c(0)):1,$isvalidnum(data,0,0,2980013):1,'$isvalidnum(data):$$Error^%apiOBJ(7207,data),data<0:$$Error^%apiOBJ(7204,data,0),1:$$Error^%apiOBJ(7203,data,2980013))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..dataWystawienia=data
   Goto XMLLOOP }
 If tag="wartoscFaktury" {
   If ($get(namespace)'=""),'$case($zwascii(childlist,19),0:1,nsIndex:1,:0) Goto XMLImportNSchild
   Set exists("wartoscFaktury")=1
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             Set data=$zstrip(data,"<>W",$c(13,10)) If data'="" Set data=$s($tr(data,"Ee(),.")'=data:"",1:$number(data,"I",0)) Goto:data="" XMLImportErrchild Goto:('$select(data=$c(0)&&$zu(115,13):1,$isvalidnum(data,0,0):1,'$isvalidnum(data):$$Error^%apiOBJ(7207,data),1:$$Error^%apiOBJ(7204,data,0))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..wartoscFaktury=data
   Goto XMLLOOP }
 If tag="FakturaPozycjiFaktury" {
   If ($get(namespace)'=""),'$case($zwascii(childlist,19),0:1,nsIndex:1,:0) Goto XMLImportNSchild
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else {
     If 'sc Goto XMLImportExit
     Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set inner=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set inner=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,inner,.descriptor) } Else { Set inner="" }} For { Quit:inner=""  Quit:(descriptor#16)'=2  Set descriptor=$piece(inner,",",2)+4 Set inner=$piece(inner,",",1)_","_descriptor Set descriptor=$zlascii(childlist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set inner=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,inner,.descriptor) } Else {Set inner="" }} }
     While inner'="" {
       If (descriptor#16)'=2 {
         Set innerlist=@(tree)@((descriptor\16))
         If 'encoded,(@(tree)@("d",$zlascii(innerlist,9))'="PozycjaFaktury") Goto XMLImportBadTag
         If ($get(namespace)'=""),'$case($zwascii(innerlist,19),0:1,nsIndex:1,:0) Goto XMLImportNS
         If encoded Set saveinner=inner,saveinnerlist=innerlist
         If encoded,$$XMLImportId() {
           Set data=idlist(inner)
         } Else {
           If 'sc Goto XMLImportExit
           Do XMLImportAttrinner()
           Set class=$select(($zwascii($get(attributeList("type")),9)=1):$get(@(tree)@("d",$zlascii(attributeList("type"),13))),1:"")
           If (class="") || (class="PozycjaFaktury") {
             Set class="User.PozycjaFaktury"
           } Else {
             If $length(class,":")=2 Set class=$piece(class,":",2)
             Set class=$get(^oddCOM("User.PozycjaFaktury",85,"s",class))_$get(^oddXML("User.PozycjaFaktury","s",class)) If class="" Set class=0
             Set tmp=$get(@(tree)@("n",$zwascii(attributeList("type"),11)))
             If (class=0)||(($listlength(class)>1)&&(tmp="")) Set class=$get(@(tree)@("d",$zlascii(attributeList("type"),13))) Goto XMLImportBadType
             If $listlength(class)>1 {
               For tmpi=1:1:$listlength(class) {
                 If tmp=$parameter($list(class,tmpi),"NAMESPACE") Set class=$list(class,tmpi),tmpi=0 Quit
               }
               If tmpi Set class=$get(@(tree)@("d",$zlascii(attributeList("type"),13))) Goto XMLImportBadType
             } Else { Set class=$list(class) }
           }
           Set data=$classmethod(class,"XMLNew",handler,inner,$this)
           If $isobject(data) Set tag=@(tree)@("d",$zlascii(innerlist,9)),nodeArg=inner,nodeArgChildlist=innerlist,bareProjection=0,summaryArg=1,keynameattr="",sc=data.XMLImportInternal() Goto:('sc) XMLImportExit
           If encoded Do XMLImportAttrinner() If $data(attributeList("id")) Set idlist(inner)=data
         }
         If encoded Set inner=saveinner,innerlist=saveinnerlist
         If data'="" Do ..FakturaPozycjiFaktury.Insert(data)
       }
       For  { Set descriptor=$piece(inner,",",2)+4 Set inner=$piece(inner,",",1)_","_descriptor Set descriptor=$zlascii(childlist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set inner=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,inner,.descriptor) } Else {Set inner="" }} Quit:inner=""  Quit:(descriptor#16)'=2  }
     }
     Quit:('sc)
   }
   If encoded Set child=savechild,childlist=savechildlist
   Goto XMLLOOP }
 If tag="pracownikWystawiajacy" {
   If ($get(namespace)'=""),'$case($zwascii(childlist,19),0:1,nsIndex:1,:0) Goto XMLImportNSchild
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else {
     If 'sc Goto XMLImportExit
     Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set inner=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set inner=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,inner,.descriptor) } Else { Set inner="" }} For { Quit:inner=""  Quit:(descriptor#16)'=2  Set descriptor=$piece(inner,",",2)+4 Set inner=$piece(inner,",",1)_","_descriptor Set descriptor=$zlascii(childlist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set inner=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,inner,.descriptor) } Else {Set inner="" }} }
     While inner'="" {
       If (descriptor#16)'=2 {
         Set innerlist=@(tree)@((descriptor\16))
         If 'encoded,(@(tree)@("d",$zlascii(innerlist,9))'="Pracownik") Goto XMLImportBadTag
         If ($get(namespace)'=""),'$case($zwascii(innerlist,19),0:1,nsIndex:1,:0) Goto XMLImportNS
         If encoded Set saveinner=inner,saveinnerlist=innerlist
         If encoded,$$XMLImportId() {
           Set data=idlist(inner)
         } Else {
           If 'sc Goto XMLImportExit
           Do XMLImportAttrinner()
           Set class=$select(($zwascii($get(attributeList("type")),9)=1):$get(@(tree)@("d",$zlascii(attributeList("type"),13))),1:"")
           If (class="") || (class="Pracownik") {
             Set class="User.Pracownik"
           } Else {
             If $length(class,":")=2 Set class=$piece(class,":",2)
             Set class=$get(^oddCOM("User.Pracownik",85,"s",class))_$get(^oddXML("User.Pracownik","s",class)) If class="" Set class=0
             Set tmp=$get(@(tree)@("n",$zwascii(attributeList("type"),11)))
             If (class=0)||(($listlength(class)>1)&&(tmp="")) Set class=$get(@(tree)@("d",$zlascii(attributeList("type"),13))) Goto XMLImportBadType
             If $listlength(class)>1 {
               For tmpi=1:1:$listlength(class) {
                 If tmp=$parameter($list(class,tmpi),"NAMESPACE") Set class=$list(class,tmpi),tmpi=0 Quit
               }
               If tmpi Set class=$get(@(tree)@("d",$zlascii(attributeList("type"),13))) Goto XMLImportBadType
             } Else { Set class=$list(class) }
           }
           Set data=$classmethod(class,"XMLNew",handler,inner,$this)
           If $isobject(data) Set tag=@(tree)@("d",$zlascii(innerlist,9)),nodeArg=inner,nodeArgChildlist=innerlist,bareProjection=0,summaryArg=1,keynameattr="",sc=data.XMLImportInternal() Goto:('sc) XMLImportExit
           If encoded Do XMLImportAttrinner() If $data(attributeList("id")) Set idlist(inner)=data
         }
         If encoded Set inner=saveinner,innerlist=saveinnerlist
         If data'="" Do ..pracownikWystawiajacy.Insert(data)
       }
       For  { Set descriptor=$piece(inner,",",2)+4 Set inner=$piece(inner,",",1)_","_descriptor Set descriptor=$zlascii(childlist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set inner=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,inner,.descriptor) } Else {Set inner="" }} Quit:inner=""  Quit:(descriptor#16)'=2  }
     }
     Quit:('sc)
   }
   If encoded Set child=savechild,childlist=savechildlist
   Goto XMLLOOP }
 Goto XMLImportBadTagchild
XMLImportBadTagchild Set inner=child
XMLImportBadTag Quit $$Error^%apiOBJ(6237,tag_$$XMLImportLocation(inner))
XMLImportBadTypenode Set inner=node Goto XMLImportBadType
XMLImportBadTypechild Set inner=child
XMLImportBadType Quit $$Error^%apiOBJ(6277,class,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)))_$$XMLImportLocation(inner))
XMLImportErrnode Set inner=node Goto XMLImportErr
XMLImportErrchild Set inner=child
XMLImportErr
 Set data=##class(%XML.ImportHandler).GetNextChild(tree,inner,"")
 If (data'="") {
   If ($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))#16)'=0 {
     Quit $$Error^%apiOBJ(6232,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner),$extract(@(tree)@("d",($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))\16)),1,200))
   } Else {
     Quit $$Error^%apiOBJ(6253,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner),@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))\16)),9)))
   }
 } Else {
   Quit $$Error^%apiOBJ(6252,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner))
 }
XMLImportIdErr Set sc=$$Error^%apiOBJ(6236,id,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner)) Quit sc
XMLImportMalformed Set sc=$$Error^%apiOBJ(6233,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)))_$$XMLImportLocation(inner)) Quit sc
XMLImportMalformedNoTag Set node=$select($piece(inner,",",1)<=0:0,1:$zlascii(@(tree)@($piece(inner,",",1)),1)_","_$zlascii(@(tree)@($piece(inner,",",1)),5)),sc=$$Error^%apiOBJ(6254,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16))),$select(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)))_$$XMLImportLocation(node)) Quit sc
XMLImportNSchild Set inner=child
XMLImportNS Set sc=$$Error^%apiOBJ(6235,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner)) Quit sc
XMLImportLocation(node) new msg,loc
 Set loc=$lb($zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),21),$zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),25))
 If loc="" Quit ""
 Set msg=$get(^%qCacheMsg("%ObjectErrors",$s(""'="":$zcvt("","L"),1:$s($mvv(58)="":"en",1:$mvv(58))),"XMLImportLocation")," (%1,%2)")
 Quit $$FormatText^%occMessages(msg,$listget(loc,1),$listget(loc,2))
XMLImportInternalTrap Set $ztrap=""
 Set loc=$select($ZE["<CLASS DOES NOT EXIST>":" for element "_tag_$$XMLImportLocation(child),1:"")
 Quit $$Error^%apiOBJ(5002,$ZE_loc)
XMLImportIdChild() Set inner=child,innerlist=childlist,tmp=$$XMLImportId(),child=inner,childlist=innerlist Quit tmp
XMLImportId() ;
 Do XMLImportAttrinner()
 If $data(attributeList("href")) {
   Set id=$get(@(tree)@("d",$zlascii(attributeList("href"),13)))
   If $extract(id)="#" {
     Set tmp=$select($get(@(tree)@("i",$extract(id,2,*)))="":"",1:$piece(@(tree)@("i",$extract(id,2,*)),",",1)_","_$piece(@(tree)@("i",$extract(id,2,*)),",",2)) If tmp="" Goto XMLImportIdErr
     Set inner=tmp
     Set descriptor=$zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2)) Set innerlist=@(tree)@((descriptor\16))
   }
 } ElseIf $data(attributeList("ref")),($get(@(tree)@("n",$zwascii(attributeList("ref"),9)))="http://www.w3.org/2003/05/soap-encoding") {
   Set id=$get(@(tree)@("d",$zlascii(attributeList("ref"),13)))
   Set tmp=$select($get(@(tree)@("i",id))="":"",1:$piece(@(tree)@("i",id),",",1)_","_$piece(@(tree)@("i",id),",",2)) If tmp="" Goto XMLImportIdErr
   Set inner=tmp
   Set descriptor=$zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2)) Set innerlist=@(tree)@((descriptor\16))
 } ElseIf '$data(attributeList("id")) {
   Quit 0
 }
 Quit $data(idlist(inner))
XMLImportAttrnode()
 If $get(attributeList)=node Quit
 Kill attributeList
 Set attributeList=node
 Set offset=29 While offset<$zwascii(nodelist,17) { Set attribute=$extract(nodelist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
XMLImportAttrchild()
 If $get(attributeList)=child Quit
 Kill attributeList
 Set attributeList=child
 Set offset=29 While offset<$zwascii(childlist,17) { Set attribute=$extract(childlist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
XMLImportAttrinner()
 If $get(attributeList)=inner Quit
 Kill attributeList
 Set attributeList=inner
 Set offset=29 While offset<$zwascii(innerlist,17) { Set attribute=$extract(innerlist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
zXMLIsObjectEmpty(ignoreNull)
 If ..dataWystawienia'="" Quit 0
 If ..wartoscFaktury'="" Quit 0
 If ..FakturaPozycjiFaktury.Count()>0 Quit 0
 If ..pracownikWystawiajacy.Count()>0 Quit 0
 Quit 1
zXMLNew(document,node,containerOref="")
	Quit (##class(User.Faktura).%New())
zXMLSchema(top="",format="",namespacePrefix="",input=0,refOnly=0,schema)
 Quit ##class(%XML.Implementation).XMLSchema("User.Faktura",top,format,namespacePrefix,input,refOnly,.schema)
zobliczWartoscPozycjiFaktury() public {
	SET zapytanie = "SELECT SUM(pf.cenaZaSztuke*pf.liczbaSztuk) AS wartoscFaktury FROM Faktura f INNER JOIN PozycjaFaktury pf ON f.ID = pf.listaPozycji WHERE f.ID = ?"
	SET wyniki = ##Class(%SQL.Statement).%ExecDirect(,zapytanie,..%Id())
	DO wyniki.%Next()
	Return "Wartosc faktury: " _ wyniki.%Get("wartoscFaktury") }
zFakturaPozycjiFakturyGetObject(force=0) public {
	Quit $select(r%FakturaPozycjiFaktury=""&&($data(i%FakturaPozycjiFaktury)):$select(i%FakturaPozycjiFaktury="":"",1:$listbuild(i%FakturaPozycjiFaktury_"")),(''..FakturaPozycjiFaktury.%GetSwizzleObject(force,.oid)):oid,1:"") }
zFakturaPozycjiFakturyGetObjec2(force=0) public {
	Quit $listget(..FakturaPozycjiFakturyGetObject(force)) }
zFakturaPozycjiFakturyGetSwizzl(noswizzle=0) public {
	If r%FakturaPozycjiFaktury'="" Quit r%FakturaPozycjiFaktury
	If i%FakturaPozycjiFaktury'="" {
		Set oid=$select(i%FakturaPozycjiFaktury="":"",1:$listbuild(i%FakturaPozycjiFaktury_""))
		Set oref=##class("%Library.RelationshipObject").%Open(oid,,.sc) If ('sc)||(oref="") Do:$get(^%SYS("ThrowSwizzleError"),0) $zutil(96,3,19,1) Quit ""
	} Else { Set oref=##class("%Library.RelationshipObject").%New($listbuild("User.PozycjaFaktury","listaPozycji",+$this,"many",1,1)) If oref="" Quit "" }
	Set modstate=$system.CLS.GetModifiedBits() Set r%FakturaPozycjiFaktury=oref Do $system.CLS.SetModifiedBits(modstate)
	Set oref.ElementType="User.PozycjaFaktury"
	Do oref.%SetModified(0)
	Quit oref }
zFakturaPozycjiFakturyIsEmpty() public {
	Quit $listget(..FakturaPozycjiFakturyGetObject(1))="" }
zFakturaPozycjiFakturyNewObject() public {
	Set newobject=##class("%Library.RelationshipObject").%New($listbuild("User.PozycjaFaktury","listaPozycji",+$this,"many",1,1)) If newobject="" Quit ""
	Set ..FakturaPozycjiFaktury=newobject
	Quit newobject }
zFakturaPozycjiFakturyRFetch(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) public {
 Set ReturnCount=0,AtEnd=1,RowSet="" Quit 1 }
zFakturaPozycjiFakturyRelate(oref) public {
	Quit ..FakturaPozycjiFaktury.Relate(oref) }
zFakturaPozycjiFakturySet(newvalue) public {
	If newvalue="" {
		If r%FakturaPozycjiFaktury="",i%FakturaPozycjiFaktury="" Quit 1
	} Else {
		If '$isobject(newvalue) Quit $$Error^%apiOBJ(5807,newvalue)
		If r%FakturaPozycjiFaktury=newvalue Quit 1
		If r%FakturaPozycjiFaktury="",i%FakturaPozycjiFaktury'="",i%FakturaPozycjiFaktury=$listget(newvalue."%%OID") Set modstate=$system.CLS.GetModifiedBits() Set r%FakturaPozycjiFaktury=newvalue Do newvalue.listaPozycjiRelate($this),$system.CLS.SetModifiedBits(modstate) Quit 1
	}
	Set r%FakturaPozycjiFaktury=newvalue,i%FakturaPozycjiFaktury=0,i%FakturaPozycjiFaktury=""
	Quit 1 }
zFakturaPozycjiFakturyUnRelate(oref) public {
	Quit ..FakturaPozycjiFaktury.UnRelate(oref) }
zdataWystawieniaDisplayToLogica(%val) public {
 q:%val="" "" set %val=$zdateh(%val,,,5,80,20,,,"Error: '"_%val_"' is an invalid DISPLAY Date value") q:%val||(%val=0) %val s %msg=%val ZTRAP "ODAT" }
zdataWystawieniaGetStored(id) public {
	Quit $Select(id'="":$listget($g(^User.FakturaD(id)),2),1:"") }
zdataWystawieniaIsValid(%val) public {
	Q $s($zu(115,13)&&(%val=$c(0)):1,$isvalidnum(%val,0,0,2980013):1,'$isvalidnum(%val):$$Error^%apiOBJ(7207,%val),%val<0:$$Error^%apiOBJ(7204,%val,0),1:$$Error^%apiOBJ(7203,%val,2980013)) }
zdataWystawieniaLogicalToDispla(%val) public {
	Quit $select(%val="":"",%val'?0.1"-"4N1"-"2N1"-"2N.1(1" "2N1":"2N1":"2N.1(1"."0.9N)):$zdate(%val,-1,,4,,,-672045),1:$$FormatJulian^%qarfunc(%val,-1)) }
zdataWystawieniaLogicalToOdbc(%val="") public {
	Quit $select(%val="":"",%val'?0.1"-"4N1"-"2N1"-"2N.1(1" "2N1":"2N1":"2N.1(1"."0.9N)):$zdate(%val,3,,,,,-672045),1:$piece(%val," ",1)) }
zdataWystawieniaLogicalToXSD(%val) public {
   quit $select(%val="":"",1:$zdate(%val,3,,,,,-672045)) }
zdataWystawieniaNormalize(%val) public {
   Quit $s($zu(115,13)&&(%val=$c(0)):"",1:%val\1) }
zdataWystawieniaOdbcToLogical(%val="") public {
 quit:%val=""||($zu(115,13)&&(%val=$c(0))) "" quit:$isvalidnum(%val) %val set %val=$zdateh(%val,3,,,,,,,"Error: '"_%val_"' is an invalid ODBC/JDBC Date value") q:%val||(%val=0) %val s %msg=%val ZTRAP "ODAT" }
zdataWystawieniaXSDToLogical(%val) public {
   Set len=$length(%val)
   If len'=10 {
       If $extract(%val,len)="Z" {
           Set %val=$extract(%val,1,len-1),len=len-1
       } ElseIf $case($extract(%val,len-5),"+":1,"-":1,:0) {
           Set %val=$extract(%val,1,len-6),len=len-6
       }
   }
   If $extract(%val,11,19)="T00:00:00" {
       If (len=19)||(($extract(%val,20,21)=".0")&&($translate($extract(%val,22,len),"0","")="")) {
           Set %val=$extract(%val,1,10)
       }
   }
   Quit $select(%val="":"",1:$zdateh(%val,3,,,,,-672045,,"")) }
zlistaFakturPacjentaGetObject(force=0) public {
	Quit $select(r%listaFakturPacjenta=""||(i%listaFakturPacjenta'=""):$select(i%listaFakturPacjenta="":"",1:$listbuild(i%listaFakturPacjenta_"")),(''..listaFakturPacjenta.%GetSwizzleObject(force,.oid)):oid,1:"") }
zlistaFakturPacjentaGetObjectId(force=0) public {
	Quit $listget(..listaFakturPacjentaGetObject(force)) }
zlistaFakturPacjentaGetStored(id) public {
	Quit $Select(id'="":$listget($g(^User.FakturaD(id)),4),1:"") }
zlistaFakturPacjentaGetSwizzled(noswizzle=0) public {
	If r%listaFakturPacjenta'="" Quit r%listaFakturPacjenta
	If i%listaFakturPacjenta="" Quit ""
	Set oid=$select(i%listaFakturPacjenta="":"",1:$listbuild(i%listaFakturPacjenta_""))
	Set oref=##class("User.Pacjent").%Open(oid,,.sc) If ('sc)||(oref="") Do:$get(^%SYS("ThrowSwizzleError"),0) $zutil(96,3,19,1) Quit ""
	Set modstate=$system.CLS.GetModifiedBits() Set r%listaFakturPacjenta=oref Do $system.CLS.SetModifiedBits(modstate)
	Do oref.pacjentNaFakturzeRelate($this)
	Quit oref }
zlistaFakturPacjentaNewObject() public {
	Set newobject=##class("User.Pacjent").%New() If newobject="" Quit ""
	Set ..listaFakturPacjenta=newobject
	Do ..listaFakturPacjenta.pacjentNaFakturzeRelate($this)
	Quit newobject }
zlistaFakturPacjentaOnDelete(id="",concurrency=-1) [ id,SQLCODE ] public { New %msg,%ROWCOUNT,%ROWID,SQLCODE 
	 ;---&sql(select %ID into :id from SQLUser.Faktura where listaFakturPacjenta = :id)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, id, SQLCODE
	do %0Fo
	Quit $Select(SQLCODE:1,1:$$Error^%apiOBJ(5823,$classname()_"."_"listaFakturPacjenta")) }
 q
%0Fo n sqldata8d,sqldata9d,sqldata10d,sqldata12d,sqldata16d,sqldata17d,sqldata4d,sqldata3d,sqldata6d,sqldata7d
 s $zt="%0Ferr"
 n %sqltime s %sqltime=$zh
 s sqldata8d=$zu(115,2)
 s sqldata9d=0,sqldata10d=""
 d:$zu(115,15) $system.ECP.Sync()
 s sqldata4d=$g(id),sqldata4d=$s(sqldata4d="":"",$isvalidnum(sqldata4d):+sqldata4d,1:sqldata4d)
 s SQLCODE=100
 ; asl MOD# 2
 s id=""
%0FmBk1 s sqldata12d="" s id=$o(^User.FakturaD(id),1,sqldata12d)
 i id="" g %0FmBdun
 Set sqldata3d=$lg(sqldata12d,4)
 g:'(sqldata3d=sqldata4d) %0FmBk1
 g:'(sqldata3d'="") %0FmBk1
 goto:sqldata8d'=1 %0FmBuncommitted
 if sqldata8d=1 {
 	lock +^User.FakturaD($p(id,"||",1))#"S":$zu(115,4)
 	if $t { set sqldata10d=$name(^User.FakturaD($p(id,"||",1)))_"#""SI""",sqldata9d=1 }
 	else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.Faktura for RowID value: "_id ztrap "LOCK"  }
 }
 ; asl MOD# 3
 s sqldata6d=$zlist(sqldata3d)
 i id'="" s sqldata16d="" i $d(^User.FakturaD(id),sqldata16d)
 e  g %0FmCdun
 Set sqldata3d=$lg(sqldata16d,4)
 s sqldata7d=$zlist(sqldata3d)
 g:sqldata6d'=sqldata7d %0FmCdun
%0FmBuncommitted ;
 s SQLCODE=0 g %0Fc
%0FmCdun if $g(sqldata8d)=1 { if $g(sqldata9d)=1 { l -@sqldata10d s sqldata9d=0 } elseif $g(sqldata9d)=2 { do $classmethod($li(sqldata10d),"%UnlockId",$li(sqldata10d,2),1,1)  s sqldata9d=0 } }
 g %0FmBk1
%0FmBdun 
%0FmAdun 
%0Fc s %ROWCOUNT='SQLCODE
 if $g(sqldata8d)=1 { if $g(sqldata9d)=1 { l -@sqldata10d } elseif $g(sqldata9d)=2 { do $classmethod($li(sqldata10d),"%UnlockId",$li(sqldata10d,2),1,1)  } }
 s:$d(%sqltime) sqldata17d=$g(sqldata17d)+$zh-%sqltime
 n context,tmp,count,total,mean s context=$system.Context.SQL()
 if $d(sqldata17d,%sqltime) {
 if $g(context.Stats)<$zu(99) { d AggregateStats^%SYS.SQLSRV() }
 s tmp=$g(context.Stats($namespace,"ud0jde2nVfgIdbW28xCiym9XpwU="))
 s count=$lg(tmp,1),total=$lg(tmp,2),mean=total+%sqltime/(count+1)
 s context.Stats($namespace,"ud0jde2nVfgIdbW28xCiym9XpwU=")=$lb(count+1,total+%sqltime,$s(+count=0:0,1:(%sqltime-mean)**2+(count*((total/count-mean)**2+$lg(tmp,3)))/(count+1))) }
 q
%0Ferr s $zt=""
 d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 g %0Fc
zlistaFakturPacjentaRExec(%qHandle,inverse) [ c1,inverse,SQLCODE ] public { New %msg,%ROWCOUNT,%ROWID,c1,SQLCODE 
	Set %qHandle=$increment(%objcn)
	 ;---&sql(DECLARE Q2 CURSOR FOR
 	 ;---		SELECT ID FROM SQLUser.Faktura where listaFakturPacjenta=:inverse)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, inverse, SQLCODE
	
	 ;---&sql(OPEN Q2)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE
	do %Q20o
	If SQLCODE Quit $$Error^%apiOBJ(5821,"SQLCODE = "_SQLCODE)
	Quit 1 }
zlistaFakturPacjentaRClose(%qHandle) [ c1,inverse,SQLCODE ] public { New %msg,%ROWCOUNT,%ROWID,c1,inverse,SQLCODE 
	New SQLCODE
	 ;---&sql(CLOSE Q2)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE
	do %Q20c
	Kill %objcsc(%qHandle),%objcsp(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsl(%qHandle),%objcsR(%qHandle),%objcsZ(%qHandle),%objcsd(%qHandle)
	Quit 1 }
zlistaFakturPacjentaRFetch(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) [ c1,inverse,SQLCODE ] public { New %msg,%ROWCOUNT,%ROWID,c1,inverse,SQLCODE 
	Set RowSet="",ReturnCount=0,AtEnd=0
	For {
		 ;---&sql(FETCH Q2 INTO :c1)
 		 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, c1, SQLCODE
		do %0Lo
		If 'SQLCODE { Set RowSet=RowSet_$lb(c1),ReturnCount=ReturnCount+1 Quit:ReturnCount=FetchCount||(($length(RowSet)+($length(RowSet)\ReturnCount))>24000) } Else { Set AtEnd=1 Quit }
	}
	Quit 1 }
 q
%Q20o 
 try { s SQLCODE=$s($g(%objcsc(%qHandle)):-101,1:0) q:SQLCODE'=0 
 n %sqltime s %sqltime=$zh
 s %objcsd(%qHandle,1)=0 s:$d(%0CacheRowLimit)#2 %objcsd(%qHandle,2)=%0CacheRowLimit
 s %objcsd(%qHandle,3)=$zu(115,2)
 s %objcsd(%qHandle,4)=0,%objcsd(%qHandle,5)=""
 d:$zu(115,15) $system.ECP.Sync()
 s %objcsd(%qHandle,6)=$g(inverse),%objcsd(%qHandle,6)=$s(%objcsd(%qHandle,6)="":"",$isvalidnum(%objcsd(%qHandle,6)):+%objcsd(%qHandle,6),1:%objcsd(%qHandle,6))
 s %objcsc(%qHandle)=1,SQLCODE=0
 s:$d(%sqltime) %objcsd(%qHandle,7)=$g(%objcsd(%qHandle,7))+$zh-%sqltime
 } catch { d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %objcsd(%qHandle),%objcsc(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsp(%qHandle) }
 q
%0Hfirst 
 ; asl MOD# 2
 s %objcsd(%qHandle,8)=""
%0HmBk1 s %objcsd(%qHandle,9)="" s %objcsd(%qHandle,8)=$o(^User.FakturaD(%objcsd(%qHandle,8)),1,%objcsd(%qHandle,9))
 i %objcsd(%qHandle,8)="" g %0HmBdun
 Set %objcsd(%qHandle,10)=$lg(%objcsd(%qHandle,9),4)
 g:'(%objcsd(%qHandle,10)=%objcsd(%qHandle,6)) %0HmBk1
 g:'(%objcsd(%qHandle,10)'="") %0HmBk1
 goto:%objcsd(%qHandle,3)'=1 %0HmBuncommitted
 if %objcsd(%qHandle,3)=1 {
 	lock +^User.FakturaD($p(%objcsd(%qHandle,8),"||",1))#"S":$zu(115,4)
 	if $t { set %objcsd(%qHandle,5)=$name(^User.FakturaD($p(%objcsd(%qHandle,8),"||",1)))_"#""SI""",%objcsd(%qHandle,4)=1 }
 	else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.Faktura for RowID value: "_%objcsd(%qHandle,8) ztrap "LOCK"  }
 }
 ; asl MOD# 3
 s %objcsd(%qHandle,11)=$zlist(%objcsd(%qHandle,10))
 i %objcsd(%qHandle,8)'="" s %objcsd(%qHandle,12)="" i $d(^User.FakturaD(%objcsd(%qHandle,8)),%objcsd(%qHandle,12))
 e  g %0HmCdun
 Set %objcsd(%qHandle,10)=$lg(%objcsd(%qHandle,12),4)
 s %objcsd(%qHandle,13)=$zlist(%objcsd(%qHandle,10))
 g:%objcsd(%qHandle,11)'=%objcsd(%qHandle,13) %0HmCdun
%0HmBuncommitted ;
 s:$g(SQLCODE)'<0 SQLCODE=0 s %ROWCOUNT=$i(%objcsd(%qHandle,1)),%ROWID=%objcsd(%qHandle,8),%objcsc(%qHandle)=10
 //-- FETCH Output
 s:$d(%sqltime) %objcsd(%qHandle,7)=$g(%objcsd(%qHandle,7))+$zh-%sqltime
 quit
%Q20f //-- FETCH tag
 i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  } i %objcsc(%qHandle)=100 { s SQLCODE=100 q  } s SQLCODE=0
 i $d(%objcsd(%qHandle,2))#2,$g(%objcsd(%qHandle,1))'<%objcsd(%qHandle,2) { s SQLCODE=100,%ROWCOUNT=%objcsd(%qHandle,1),%objcsc(%qHandle)=100 q }
 n %sqltime s %sqltime=$zh
 g %0Hfirst:%objcsc(%qHandle)=1
%0HmCdun if $g(%objcsd(%qHandle,3))=1 { if $g(%objcsd(%qHandle,4))=1 { l -@%objcsd(%qHandle,5) s %objcsd(%qHandle,4)=0 } elseif $g(%objcsd(%qHandle,4))=2 { do $classmethod($li(%objcsd(%qHandle,5)),"%UnlockId",$li(%objcsd(%qHandle,5),2),1,1)  s %objcsd(%qHandle,4)=0 } }
 g %0HmBk1
%0HmBdun 
%0HmAdun 
 s %ROWCOUNT=%objcsd(%qHandle,1),SQLCODE=100,%objcsc(%qHandle)=100
 s:$d(%sqltime) %objcsd(%qHandle,7)=$g(%objcsd(%qHandle,7))+$zh-%sqltime
 //-- no [more] data
 quit
%Q20c i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  }
 n %sqltime s %sqltime=$zh
 s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%objcsd(%qHandle,1)),1:0)
 if $g(%objcsd(%qHandle,3))=1 { if $g(%objcsd(%qHandle,4))=1 { l -@%objcsd(%qHandle,5) } elseif $g(%objcsd(%qHandle,4))=2 { do $classmethod($li(%objcsd(%qHandle,5)),"%UnlockId",$li(%objcsd(%qHandle,5),2),1,1)  } }
 s:$d(%sqltime) %objcsd(%qHandle,7)=$g(%objcsd(%qHandle,7))+$zh-%sqltime
 n context,tmp,count,total,mean s context=$system.Context.SQL()
 if $d(%objcsd(%qHandle,7),%sqltime) {
 if $g(context.Stats)<$zu(99) { d AggregateStats^%SYS.SQLSRV() }
 s tmp=$g(context.Stats($namespace,"vjrxNrpuBQbGS6nl2v40bhDTLVg="))
 s count=$lg(tmp,1),total=$lg(tmp,2),mean=total+%sqltime/(count+1)
 s context.Stats($namespace,"vjrxNrpuBQbGS6nl2v40bhDTLVg=")=$lb(count+1,total+%sqltime,$s(+count=0:0,1:(%sqltime-mean)**2+(count*((total/count-mean)**2+$lg(tmp,3)))/(count+1))) }
 k %objcsd(%qHandle),%objcsc(%qHandle)
 s SQLCODE=0
 quit  // close
%0Herr d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 s %objcsc(%qHandle)=100
 quit  // error
%0Lo try { do %Q20f q:SQLCODE'=0
 s c1=%objcsd(%qHandle,8)
 } catch { do %0Herr }
 q
zlistaFakturPacjentaRelate(oref) public {
	If r%listaFakturPacjenta=oref Quit 1
	If i%listaFakturPacjenta'="",$listget(oref."%%OID")=i%listaFakturPacjenta Set modstate=$system.CLS.GetModifiedBits() Set r%listaFakturPacjenta=oref Do $system.CLS.SetModifiedBits(modstate) Quit 1
	If r%listaFakturPacjenta'="" Do ..listaFakturPacjentaUnRelate(r%listaFakturPacjenta)
	Set tmp=i%listaFakturPacjenta Kill i%listaFakturPacjenta,r%listaFakturPacjenta Set r%listaFakturPacjenta=oref,i%listaFakturPacjenta=tmp
	Quit 1 }
zlistaFakturPacjentaSet(newvalue) public {
	If newvalue="" {
		If r%listaFakturPacjenta="",i%listaFakturPacjenta="" Quit 1
	} Else {
		If '$isobject(newvalue) Quit $$Error^%apiOBJ(5807,newvalue)
		If r%listaFakturPacjenta=newvalue Quit 1
		If r%listaFakturPacjenta="",i%listaFakturPacjenta'="",i%listaFakturPacjenta=$listget(newvalue."%%OID") Set modstate=$system.CLS.GetModifiedBits() Set r%listaFakturPacjenta=newvalue Do newvalue.pacjentNaFakturzeRelate($this),$system.CLS.SetModifiedBits(modstate) Quit 1
	}
	If r%listaFakturPacjenta'="" Do r%listaFakturPacjenta.pacjentNaFakturzeUnRelate($this)
	Set r%listaFakturPacjenta=newvalue,i%listaFakturPacjenta=0,i%listaFakturPacjenta=""
	If newvalue'="" Do newvalue.pacjentNaFakturzeRelate($this)
	Quit 1 }
zlistaFakturPacjentaSetObject(newvalue) public {
	If r%listaFakturPacjenta="" Set i%listaFakturPacjenta=$listget(newvalue) Quit 1
	If newvalue'="",i%listaFakturPacjenta=$listget(newvalue) Quit 1
	Set sc=..listaFakturPacjenta.%GetSwizzleObject(0,.oid) Quit:('sc) sc
	If newvalue'="",$listget(oid)=$listget(newvalue) Quit 1
	Do ..listaFakturPacjenta.pacjentNaFakturzeUnRelate($this) Set r%listaFakturPacjenta="",i%listaFakturPacjenta=0,i%listaFakturPacjenta=$listget(newvalue) Quit 1 }
zlistaFakturPacjentaSetObjectId(newid) public {
	Quit ..listaFakturPacjentaSetObject($select(newid="":"",1:$listbuild(newid_""))) }
zlistaFakturPacjentaUnRelate(oref) public {
	If r%listaFakturPacjenta=oref Set r%listaFakturPacjenta="",i%listaFakturPacjenta=0,i%listaFakturPacjenta="" Quit 1
	If r%listaFakturPacjenta'="" Quit $$Error^%apiOBJ(5499)
	Set i%listaFakturPacjenta=0,i%listaFakturPacjenta=""
	Quit 1 }
zlistaFakturPacjentaUnSwizzle(force=0) public {
 Quit:r%listaFakturPacjenta="" 1
	Set sc=..listaFakturPacjenta.%GetSwizzleObject(force,.newvalue) Quit:('sc) sc
	Set modstate=$system.CLS.GetModifiedBits() Set r%listaFakturPacjenta="" Do $system.CLS.SetModifiedBits(modstate)
 Set i%listaFakturPacjenta=$listget(newvalue)
 Quit 1 }
zpracownikWystawiajacyGetObject(force=0) public {
	Quit $select(r%pracownikWystawiajacy=""&&($data(i%pracownikWystawiajacy)):$select(i%pracownikWystawiajacy="":"",1:$listbuild(i%pracownikWystawiajacy_"")),(''..pracownikWystawiajacy.%GetSwizzleObject(force,.oid)):oid,1:"") }
zpracownikWystawiajacyGetObjec2(force=0) public {
	Quit $listget(..pracownikWystawiajacyGetObject(force)) }
zpracownikWystawiajacyGetSwizzl(noswizzle=0) public {
	If r%pracownikWystawiajacy'="" Quit r%pracownikWystawiajacy
	If i%pracownikWystawiajacy'="" {
		Set oid=$select(i%pracownikWystawiajacy="":"",1:$listbuild(i%pracownikWystawiajacy_""))
		Set oref=##class("%Library.RelationshipObject").%Open(oid,,.sc) If ('sc)||(oref="") Do:$get(^%SYS("ThrowSwizzleError"),0) $zutil(96,3,19,1) Quit ""
	} Else { Set oref=##class("%Library.RelationshipObject").%New($listbuild("User.Pracownik","fakturyPracownika",+$this,"many",1,1)) If oref="" Quit "" }
	Set modstate=$system.CLS.GetModifiedBits() Set r%pracownikWystawiajacy=oref Do $system.CLS.SetModifiedBits(modstate)
	Set oref.ElementType="User.Pracownik"
	Do oref.%SetModified(0)
	Quit oref }
zpracownikWystawiajacyIsEmpty() public {
	Quit $listget(..pracownikWystawiajacyGetObject(1))="" }
zpracownikWystawiajacyNewObject() public {
	Set newobject=##class("%Library.RelationshipObject").%New($listbuild("User.Pracownik","fakturyPracownika",+$this,"many",1,1)) If newobject="" Quit ""
	Set ..pracownikWystawiajacy=newobject
	Quit newobject }
zpracownikWystawiajacyRFetch(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) public {
 Set ReturnCount=0,AtEnd=1,RowSet="" Quit 1 }
zpracownikWystawiajacyRelate(oref) public {
	Quit ..pracownikWystawiajacy.Relate(oref) }
zpracownikWystawiajacySet(newvalue) public {
	If newvalue="" {
		If r%pracownikWystawiajacy="",i%pracownikWystawiajacy="" Quit 1
	} Else {
		If '$isobject(newvalue) Quit $$Error^%apiOBJ(5807,newvalue)
		If r%pracownikWystawiajacy=newvalue Quit 1
		If r%pracownikWystawiajacy="",i%pracownikWystawiajacy'="",i%pracownikWystawiajacy=$listget(newvalue."%%OID") Set modstate=$system.CLS.GetModifiedBits() Set r%pracownikWystawiajacy=newvalue Do newvalue.fakturyPracownikaRelate($this),$system.CLS.SetModifiedBits(modstate) Quit 1
	}
	Set r%pracownikWystawiajacy=newvalue,i%pracownikWystawiajacy=0,i%pracownikWystawiajacy=""
	Quit 1 }
zpracownikWystawiajacyUnRelate(oref) public {
	Quit ..pracownikWystawiajacy.UnRelate(oref) }
zwartoscFakturyDisplayToLogical(%val) public {
	Q $select(%val="":"",%val=$c(0)&&$zu(115,13):"",1:$s($in(%val,"","")'="":+$in(%val,"",%val),1:%val)) }
zwartoscFakturyGetStored(id) public {
	Quit $Select(id'="":$listget($g(^User.FakturaD(id)),3),1:"") }
zwartoscFakturyIsValid(%val) public {
	Quit $select(%val=$c(0)&&$zu(115,13):1,$isvalidnum(%val,0,0):1,'$isvalidnum(%val):$$Error^%apiOBJ(7207,%val),1:$$Error^%apiOBJ(7204,%val,0)) }
zwartoscFakturyNormalize(%val) public {
	Quit $select(%val=$c(0)&&$zu(115,13):"",1:%val\1) }
zwartoscFakturyXSDToLogical(%val) public {
	Q $s($tr(%val,"Ee(),.")'=%val:"",1:$number(%val,"I",0)) }
zExtentExecute(%qHandle) [ c1,SQLCODE ] public { New %msg,%ROWCOUNT,%ROWID,c1,SQLCODE 
	Set sc=1
	s %qHandle=$i(%objcn)
	 ;---&sql(DECLARE QExtent CURSOR FOR
 	 ;---		 SELECT ID FROM SQLUser.Faktura)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE
	
	 ;---&sql(OPEN QExtent)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE
	do %QExtent0o
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5821,"SQLCODE = "_SQLCODE) } Else { Set sc=1 }
	Quit sc }
zExtentClose(%qHandle) [ c1,SQLCODE ] public { New %msg,%ROWCOUNT,%ROWID,c1,SQLCODE 
	 ;---&sql(CLOSE QExtent)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE
	do %QExtent0c
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) } Else { Set sc=1 }
	Kill %objcsc(%qHandle),%objcsp(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsl(%qHandle),%objcsR(%qHandle),%objcsZ(%qHandle),%objcsd(%qHandle)
	Quit sc }
zExtentFetch(%qHandle,Row,AtEnd=0) [ c1,SQLCODE ] public { New %msg,%ROWCOUNT,%ROWID,c1,SQLCODE 
	Set Row="",AtEnd=0
	 ;---&sql(FETCH QExtent INTO :c1)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, c1, SQLCODE
	do %0Qo
	If 'SQLCODE { Set Row=$lb(c1) Set sc=1 }
	ElseIf SQLCODE=100 { Set AtEnd=1,sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) }
	Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set AtEnd=1,sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	QUIT sc }
zExtentFetchRows(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) [ c1,SQLCODE ] public { New %msg,%ROWCOUNT,%ROWID,c1,SQLCODE 
	Set RowSet="",ReturnCount=0,AtEnd=0
	For {
		 ;---&sql(FETCH QExtent INTO :c1)
 		 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, c1, SQLCODE
		do %0Ro
		If 'SQLCODE { Set RowSet=RowSet_$lb(c1),ReturnCount=ReturnCount+1 Quit:(ReturnCount=FetchCount)||(($l(RowSet)+($l(RowSet)\ReturnCount))>24000) } Else { Set AtEnd=1 Quit }
	}
	If 'SQLCODE { Set sc=1 } ElseIf SQLCODE=100 { Set sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) } Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	Quit sc }
zExtentSendODBC(%qHandle,array,qacn,%qrc,piece,ColumnCount) [ c1,SQLCODE ] public { New %msg,%ROWCOUNT,%ROWID,c1,SQLCODE 
	set %qrc=0,piece=0
	for {
		set rc=..ExtentFetch(.%qHandle,.row,.atend)
		if ('rc) { set %qrc=-400 set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=-400,%sqlcontext.Message=$g(%msg) do ProcessError^%ourProcedure(rc,$get(%sqlcontext),.%qrc,.%msg),Logerr^%SYS.SQLSRV(%qrc,"","SP",.%msg) RETURN  }
		if row="" { set %qrc=100 set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=100 RETURN  }
		if $g(%protocol)>50 { RETURN:$zobjexport(row,60) }
		else {
			if %protocol>46 { for piece=1:1:ColumnCount { goto:$zobjexport($lg(row,piece),50) SPDone } }
			else { for piece=1:1:ColumnCount { goto:$zobjexport($lg(row,piece),7) SPDone } }
		}
	}
	QUIT
SPDone	set:%protocol>46 piece=piece+1
	kill array(qacn)
	for i=piece:1:ColumnCount { set array(qacn,i)=$lg(row,i) }
	QUIT }
 q
%QExtent0o 
 try { s SQLCODE=$s($g(%objcsc(%qHandle)):-101,1:0) q:SQLCODE'=0 
 n %sqltime s %sqltime=$zh
 s %objcsd(%qHandle,1)=0 s:$d(%0CacheRowLimit)#2 %objcsd(%qHandle,2)=%0CacheRowLimit
 s %objcsd(%qHandle,3)=$zu(115,2)
 s %objcsd(%qHandle,4)=0,%objcsd(%qHandle,5)=""
 d:$zu(115,15) $system.ECP.Sync()
 s %objcsc(%qHandle)=1,SQLCODE=0
 s:$d(%sqltime) %objcsd(%qHandle,6)=$g(%objcsd(%qHandle,6))+$zh-%sqltime
 } catch { d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %objcsd(%qHandle),%objcsc(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsp(%qHandle) }
 q
%0Mfirst 
 ; asl MOD# 2
 s %objcsd(%qHandle,7)=""
%0MmBk1 s %objcsd(%qHandle,7)=$o(^User.FakturaD(%objcsd(%qHandle,7)))
 i %objcsd(%qHandle,7)="" g %0MmBdun
 goto:%objcsd(%qHandle,3)'=1 %0MmBuncommitted
 if %objcsd(%qHandle,3)=1 {
 	lock +^User.FakturaD($p(%objcsd(%qHandle,7),"||",1))#"S":$zu(115,4)
 	if $t { set %objcsd(%qHandle,5)=$name(^User.FakturaD($p(%objcsd(%qHandle,7),"||",1)))_"#""SI""",%objcsd(%qHandle,4)=1 }
 	else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.Faktura for RowID value: "_%objcsd(%qHandle,7) ztrap "LOCK"  }
 }
 ; asl MOD# 3
 i %objcsd(%qHandle,7)'="",$d(^User.FakturaD(%objcsd(%qHandle,7)))
 e  g %0MmCdun
%0MmBuncommitted ;
 s:$g(SQLCODE)'<0 SQLCODE=0 s %ROWCOUNT=$i(%objcsd(%qHandle,1)),%ROWID=%objcsd(%qHandle,7),%objcsc(%qHandle)=10
 //-- FETCH Output
 s:$d(%sqltime) %objcsd(%qHandle,6)=$g(%objcsd(%qHandle,6))+$zh-%sqltime
 quit
%QExtent0f //-- FETCH tag
 i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  } i %objcsc(%qHandle)=100 { s SQLCODE=100 q  } s SQLCODE=0
 i $d(%objcsd(%qHandle,2))#2,$g(%objcsd(%qHandle,1))'<%objcsd(%qHandle,2) { s SQLCODE=100,%ROWCOUNT=%objcsd(%qHandle,1),%objcsc(%qHandle)=100 q }
 n %sqltime s %sqltime=$zh
 g %0Mfirst:%objcsc(%qHandle)=1
%0MmCdun if $g(%objcsd(%qHandle,3))=1 { if $g(%objcsd(%qHandle,4))=1 { l -@%objcsd(%qHandle,5) s %objcsd(%qHandle,4)=0 } elseif $g(%objcsd(%qHandle,4))=2 { do $classmethod($li(%objcsd(%qHandle,5)),"%UnlockId",$li(%objcsd(%qHandle,5),2),1,1)  s %objcsd(%qHandle,4)=0 } }
 g %0MmBk1
%0MmBdun 
%0MmAdun 
 s %ROWCOUNT=%objcsd(%qHandle,1),SQLCODE=100,%objcsc(%qHandle)=100
 s:$d(%sqltime) %objcsd(%qHandle,6)=$g(%objcsd(%qHandle,6))+$zh-%sqltime
 //-- no [more] data
 quit
%QExtent0c i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  }
 n %sqltime s %sqltime=$zh
 s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%objcsd(%qHandle,1)),1:0)
 if $g(%objcsd(%qHandle,3))=1 { if $g(%objcsd(%qHandle,4))=1 { l -@%objcsd(%qHandle,5) } elseif $g(%objcsd(%qHandle,4))=2 { do $classmethod($li(%objcsd(%qHandle,5)),"%UnlockId",$li(%objcsd(%qHandle,5),2),1,1)  } }
 s:$d(%sqltime) %objcsd(%qHandle,6)=$g(%objcsd(%qHandle,6))+$zh-%sqltime
 n context,tmp,count,total,mean s context=$system.Context.SQL()
 if $d(%objcsd(%qHandle,6),%sqltime) {
 if $g(context.Stats)<$zu(99) { d AggregateStats^%SYS.SQLSRV() }
 s tmp=$g(context.Stats($namespace,"AHSuByEh6VVBpqhdPAoDCo172kQ="))
 s count=$lg(tmp,1),total=$lg(tmp,2),mean=total+%sqltime/(count+1)
 s context.Stats($namespace,"AHSuByEh6VVBpqhdPAoDCo172kQ=")=$lb(count+1,total+%sqltime,$s(+count=0:0,1:(%sqltime-mean)**2+(count*((total/count-mean)**2+$lg(tmp,3)))/(count+1))) }
 k %objcsd(%qHandle),%objcsc(%qHandle)
 s SQLCODE=0
 quit  // close
%0Merr d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 s %objcsc(%qHandle)=100
 quit  // error
%0Qo try { do %QExtent0f q:SQLCODE'=0
 s c1=%objcsd(%qHandle,7)
 } catch { do %0Merr }
 q
%0Ro try { do %QExtent0f q:SQLCODE'=0
 s c1=%objcsd(%qHandle,7)
 } catch { do %0Merr }
 q
zExtentFunc() public {
	try {
		set tSchemaPath = ##class(%SQL.Statement).%ClassPath($classname())
			set tStatement = ##class(%SQL.Statement).%New(,tSchemaPath)
			do tStatement.prepare(" SELECT ID FROM SQLUser . Faktura")
		set tResult = tStatement.%Execute()
	}
	catch tException { if '$Isobject($Get(tResult)) { set tResult = ##class(%SQL.StatementResult).%New() } set tResult.%SQLCODE=tException.AsSQLCODE(),tResult.%Message=tException.AsSQLMessage() }
	Quit tResult }
zExtentGetInfo(colinfo,parminfo,idinfo,%qHandle,extoption=0,extinfo) public {
 s parminfo=""
	s:'($d(^oddCOM($classname(),"q","Extent",21),clientinfo)#2)&&'$s($d(^(2),clientinfo)#2&&(clientinfo'=$classname()):$d(^oddCOM(clientinfo,"q","Extent",21),clientinfo)#2||($d(^oddDEF(clientinfo,"q","Extent",21),clientinfo)#2),1:$d(^oddDEF($classname(),"q","Extent",21),clientinfo)#2) clientinfo=""
	Set:extoption extinfo=$s($d(^oddCOM($classname(),"q","Extent",38))#2:^(38),$d(^oddCOM($g(^(2),$classname()),"q","Extent",38))#2:^(38),1:$s($d(^oddDEF($g(^oddCOM($classname(),"q","Extent",2),$classname()),"q","Extent",38))#2:^(38),1:""))
	If clientinfo'="" Set colinfo=$listget(clientinfo,1),parminfo=$listget(clientinfo,2),idinfo=$listget(clientinfo,3) Quit 1
	Set colinfo="",parminfo="",idinfo=$listbuild(0)
	Set sc=$$externaltype^%apiOLE("%Library.Integer",.exttypes,"0")
	Quit:('sc) sc
	s:'($d(^oddCOM($classname(),"q","Extent",23),names)#2)&&'$s($d(^(2),names)#2&&(names'=$classname()):$d(^oddCOM(names,"q","Extent",23),names)#2||($d(^oddDEF(names,"q","Extent",23),names)#2),1:$d(^oddDEF($classname(),"q","Extent",23),names)#2) names=""
	s:'($d(^oddCOM($classname(),"q","Extent",22),captions)#2)&&'$s($d(^(2),captions)#2&&(captions'=$classname()):$d(^oddCOM(captions,"q","Extent",22),captions)#2||($d(^oddDEF(captions,"q","Extent",22),captions)#2),1:$d(^oddDEF($classname(),"q","Extent",22),captions)#2) captions=""
	For i=1:1:1 Set colinfo=colinfo_$listbuild($listbuild($listget(names,i),$piece(exttypes,",",i),$listget(captions,i)))
	Set idinfo=$listbuild(1,$classname())
	s ^oddCOM($classname(),"q","Extent",21)=$listbuild(colinfo,parminfo,idinfo)
	Quit 1 }
zExtentGetODBCInfo(colinfo,parminfo,qHandle) public {
	set version = $Select($Get(%protocol,41)>40:4,1:3)
	Set metadata=$lb(1,1,"ID",4,10,0,2,"ID","Faktura","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,1),0)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	If version=4 {
		Set colinfo=$li(metadata,2,2+cmdlen)
	} Else {
		Set colinfo=$li(metadata,2,2)
		For i=0:1:colcount-1 Set colinfo=colinfo_$list(metadata,3+(i*10),11+(i*10))
	}
	Quit 1 }
zlistaFakturPacjentaCheck(id="",lockonly=0) public {
	Quit ##class(User.Pacjent).%1Check(id,lockonly)
}
zlistaFakturPacjentaDelete(id="",concurrency=-1) public {
	quit ..listaFakturPacjentaOnDelete(.id,.concurrency) }
zlistaFakturPacjentaSQLFKeyExis(%p...)
	new %ROWCOUNT,%ROWID,%msg,SQLCODE
	 ;---&sql(SELECT listaFakturPacjenta
 	 ;---	     FROM   SQLUser.Faktura
 	 ;---	     WHERE  listaFakturPacjenta=:%p(1))
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE
	do %0So
	QUIT SQLCODE=0
 q
%0So n sqldata7d,sqldata8d,sqldata9d,sqldata11d,sqldata15d,sqldata16d,sqldata2d,sqldata4d,sqldata1d,sqldata5d,sqldata6d
 s $zt="%0Serr"
 n %sqltime s %sqltime=$zh
 s sqldata7d=$zu(115,2)
 s sqldata8d=0,sqldata9d=""
 d:$zu(115,15) $system.ECP.Sync()
 s sqldata2d=$g(%p(1)),sqldata2d=$s(sqldata2d="":"",$isvalidnum(sqldata2d):+sqldata2d,1:sqldata2d)
 s SQLCODE=100
 ; asl MOD# 2
 s sqldata4d=""
%0SmBk1 s sqldata11d="" s sqldata4d=$o(^User.FakturaD(sqldata4d),1,sqldata11d)
 i sqldata4d="" g %0SmBdun
 Set sqldata1d=$lg(sqldata11d,4)
 g:'(sqldata1d=sqldata2d) %0SmBk1
 g:'(sqldata1d'="") %0SmBk1
 goto:sqldata7d'=1 %0SmBuncommitted
 if sqldata7d=1 {
 	lock +^User.FakturaD($p(sqldata4d,"||",1))#"S":$zu(115,4)
 	if $t { set sqldata9d=$name(^User.FakturaD($p(sqldata4d,"||",1)))_"#""SI""",sqldata8d=1 }
 	else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.Faktura for RowID value: "_sqldata4d ztrap "LOCK"  }
 }
 ; asl MOD# 3
 s sqldata5d=$zlist(sqldata1d)
 i sqldata4d'="" s sqldata15d="" i $d(^User.FakturaD(sqldata4d),sqldata15d)
 e  g %0SmCdun
 Set sqldata1d=$lg(sqldata15d,4)
 s sqldata6d=$zlist(sqldata1d)
 g:sqldata5d'=sqldata6d %0SmCdun
%0SmBuncommitted ;
 s SQLCODE=0 g %0Sc
%0SmCdun if $g(sqldata7d)=1 { if $g(sqldata8d)=1 { l -@sqldata9d s sqldata8d=0 } elseif $g(sqldata8d)=2 { do $classmethod($li(sqldata9d),"%UnlockId",$li(sqldata9d,2),1,1)  s sqldata8d=0 } }
 g %0SmBk1
%0SmBdun 
%0SmAdun 
%0Sc s %ROWCOUNT='SQLCODE
 if $g(sqldata7d)=1 { if $g(sqldata8d)=1 { l -@sqldata9d } elseif $g(sqldata8d)=2 { do $classmethod($li(sqldata9d),"%UnlockId",$li(sqldata9d,2),1,1)  } }
 s:$d(%sqltime) sqldata16d=$g(sqldata16d)+$zh-%sqltime
 n context,tmp,count,total,mean s context=$system.Context.SQL()
 if $d(sqldata16d,%sqltime) {
 if $g(context.Stats)<$zu(99) { d AggregateStats^%SYS.SQLSRV() }
 s tmp=$g(context.Stats($namespace,"6Zs+YJ//WoNtxGFPRBUtmkMmUog="))
 s count=$lg(tmp,1),total=$lg(tmp,2),mean=total+%sqltime/(count+1)
 s context.Stats($namespace,"6Zs+YJ//WoNtxGFPRBUtmkMmUog=")=$lb(count+1,total+%sqltime,$s(+count=0:0,1:(%sqltime-mean)**2+(count*((total/count-mean)**2+$lg(tmp,3)))/(count+1))) }
 q
%0Serr s $zt=""
 d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 g %0Sc
zlistaFakturPacjentaSQLFKeyRefA(pSameTable=0,k,pNoLock=0,%p...)
		// ON UPDATE/DELETE NOACTION
	quit:%p(1)="" 0 new rx set rx=..listaFakturPacjentaSQLFKeyExists(%p(1)) set:rx %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler27",,"SQLUser"_"."_"Faktura",k,"listaFakturPacjenta","'listaFakturPacjenta'") QUIT rx
zIDKEYCheck(K1,lockonly=0,concurrency=-1) public {
	s id=K1,exists=..%ExistsId(id) q:'exists $s('lockonly:$$Error^%apiOBJ(5797,$classname(),"IDKEY",id),1:1) s:concurrency=-1 concurrency=$select(..#DEFAULTCONCURRENCY="$zu(115,10)":$zu(115,10),1:$xecute("q "_..#DEFAULTCONCURRENCY)) if concurrency { s status=..%LockId(id,1) q:('status) status } if 'lockonly { s exists=..%ExistsId(id) d:concurrency ..%UnlockId(id,1,0) quit $s('exists:$$Error^%apiOBJ(5797,$classname(),"IDKEY",id),1:1) } else { d:concurrency ..%UnlockId(id,1,0) q 1 }
}
zIDKEYDelete(K1,concurrency=-1) public {
	Quit ..%DeleteId(.K1,concurrency) }
zIDKEYExists(K1,id="")
	s id=K1 q ..%ExistsId(K1)
	Quit
zIDKEYOpen(K1,concurrency=-1,sc) public { Set:'($data(sc)#2) sc=1
	Quit ..%OpenId(.K1,concurrency,.sc) }
zIDKEYSQLCheckUnique(pFromOrig=0,%pID,%pVals...)
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLCheckUnique")
zIDKEYSQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key IDKEY.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=%pVal(1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"SQLUser"_"."_"Faktura"_":"_"IDKEY") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv=$d(^User.FakturaD(%pVal(1))) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Quit
zIDKEYSQLFindPKeyByConstraint(%con)
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLFindPKeyByConstraint")
zIDKEYSQLFindRowIDByConstraint(%con,pInternal=0)
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLFindRowIDByConstraint")
]]></Routine>


<Class name="User.Faktura">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>65172,74109.119475</TimeChanged>
<TimeCreated>64423,65996.964856</TimeCreated>

<Property name="dataWystawienia">
<Type>%Date</Type>
<Required>1</Required>
</Property>

<Property name="wartoscFaktury">
<Type>%Integer</Type>
<Required>1</Required>
<Parameter name="MINVAL" value="0"/>
</Property>

<Property name="FakturaPozycjiFaktury">
<Type>User.PozycjaFaktury</Type>
<Cardinality>many</Cardinality>
<Inverse>listaPozycji</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="listaFakturPacjenta">
<Type>User.Pacjent</Type>
<Cardinality>one</Cardinality>
<Inverse>pacjentNaFakturze</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="pracownikWystawiajacy">
<Type>User.Pracownik</Type>
<Cardinality>many</Cardinality>
<Inverse>fakturyPracownika</Inverse>
<Relationship>1</Relationship>
</Property>

<Method name="obliczWartoscPozycjiFaktury">
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	SET zapytanie = "SELECT SUM(pf.cenaZaSztuke*pf.liczbaSztuk) AS wartoscFaktury FROM Faktura f INNER JOIN PozycjaFaktury pf ON f.ID = pf.listaPozycji WHERE f.ID = ?"
	
	SET wyniki = ##Class(%SQL.Statement).%ExecDirect(,zapytanie,..%Id())
	
	DO wyniki.%Next()
	
	Return "Wartosc faktury: " _ wyniki.%Get("wartoscFaktury")
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.FakturaD</DataLocation>
<DefaultData>FakturaDefaultData</DefaultData>
<IdLocation>^User.FakturaD</IdLocation>
<IndexLocation>^User.FakturaI</IndexLocation>
<StreamLocation>^User.FakturaS</StreamLocation>
<ExtentSize>3</ExtentSize>
<Data name="FakturaDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>dataWystawienia</Value>
</Value>
<Value name="3">
<Value>wartoscFaktury</Value>
</Value>
<Value name="4">
<Value>listaFakturPacjenta</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="dataWystawienia">
<Selectivity>33.3333%</Selectivity>
<AverageFieldSize>5</AverageFieldSize>
</Property>
<Property name="listaFakturPacjenta">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="wartoscFaktury">
<Selectivity>33.3333%</Selectivity>
<AverageFieldSize>8.67</AverageFieldSize>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Routine name="User.Osoba.1" type="INT" languagemode="0" generated="1" timestamp="65172,73146.642586"><![CDATA[
 ;User.Osoba.1
 ;(C)InterSystems, generated for class User.Osoba.  Do NOT edit. 06/08/2019 08:19:06PM
 ;;79786155;User.Osoba
 ;
zprzedstawSie() public {
	Return " " }
zadresGetObject(force=0) public {
	Quit $select(r%adres=""&&($data(i%adres)):$select(i%adres="":"",1:$listbuild(i%adres_"")),(''..adres.%GetSwizzleObject(force,.oid)):oid,1:"") }
zadresGetObjectId(force=0) public {
	Quit $listget(..adresGetObject(force)) }
zadresGetSwizzled(noswizzle=0) public {
	If noswizzle Quit r%adres
	If '$data(i%adres) Set modstate=$system.CLS.GetSModifiedBits() Set oref=..adresNewObject() Do $system.CLS.SetSModifiedBits(modstate) Set r%adres=0,r%adres=oref Quit oref
	Set oref=##class(User.Adres).%Open($select(i%adres="":"",1:$listbuild(i%adres_"")),,.sc) If ('sc) Do:$get(^%SYS("ThrowSwizzleError"),0) $zutil(96,3,19,1) Quit ""
	Set modstate=$system.CLS.GetModifiedBits() Set r%adres=oref Do $system.CLS.SetModifiedBits(modstate)
	Quit oref }
zadresIsEmpty() public {
	Quit $listget(..adresGetObject(1))="" }
zadresNewObject() public {
	Set newobject=##class(User.Adres).%New() If newobject="" Quit ""
	Set ..adres=newobject
	Quit newobject }
zadresSet(newvalue) public {
	If newvalue="" {
		Kill i%adres,r%adres Set r%adres=""
	} Else {
		If '$isobject(newvalue) { Quit $$Error^%apiOBJ(5807,newvalue) } If r%adres=newvalue { Quit 1 }
		Set r%adres=0,i%adres=0,r%adres=newvalue,i%adres=""
	}
	Quit 1 }
zadresSetObject(newvalue) public {
	If newvalue'="",$data(i%adres,tmp),tmp=$listget(newvalue) Quit 1
	Set i%adres=$listget(newvalue),r%adres=0,r%adres=""
	Quit 1 }
zadresSetObjectId(newid) public {
	Quit ..adresSetObject($select(newid="":"",1:$listbuild(newid_""))) }
zadresUnSwizzle(force=0) public {
	If r%adres="",$data(i%adres) Quit 1
	Set sc=..adres.%GetSwizzleObject(force,.newvalue) Quit:('sc) sc
	Set modstate=$system.CLS.GetModifiedBits() Set r%adres="" Do $system.CLS.SetModifiedBits(modstate)
	Set i%adres=$listget(newvalue)
	Quit 1 }
zimieIsValid(%val) public {
	Q $s(%val'[","&&(",Adam, Bogdan, Patrycja, Magda, Krystian, Beata, Aleksandra,Tomasz,"[(","_$select(%val=$c(0):"",1:%val)_",")):1,1:$$Error^%apiOBJ(7205,%val,",Adam, Bogdan, Patrycja, Magda, Krystian, Beata, Aleksandra,Tomasz")) }
znazwiskoIsValid(%val) public {
	Q $s(%val'[","&&(",Nowak, Pawluk, Makowska, Kopydlowka, Kowal, Kwiatkowski,"[(","_$select(%val=$c(0):"",1:%val)_",")):1,1:$$Error^%apiOBJ(7205,%val,",Nowak, Pawluk, Makowska, Kopydlowka, Kowal, Kwiatkowski")) }
]]></Routine>


<Class name="User.Osoba">
<Abstract>1</Abstract>
<TimeChanged>65172,71805.449116</TimeChanged>
<TimeCreated>64419,68441.28418</TimeCreated>

<Property name="imie">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="255"/>
<Parameter name="VALUELIST" value=",Adam, Bogdan, Patrycja, Magda, Krystian, Beata, Aleksandra,Tomasz"/>
</Property>

<Property name="nazwisko">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="255"/>
<Parameter name="VALUELIST" value=",Nowak, Pawluk, Makowska, Kopydlowka, Kowal, Kwiatkowski"/>
</Property>

<Property name="adres">
<Type>User.Adres</Type>
<Required>1</Required>
</Property>

<Method name="przedstawSie">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Return " "
]]></Implementation>
</Method>
</Class>


<Routine name="User.Pacjent.1" type="INT" languagemode="0" generated="1" timestamp="65172,73146.742946"><![CDATA[
 ;User.Pacjent.1
 ;(C)InterSystems, generated for class User.Pacjent.  Do NOT edit. 06/08/2019 08:19:06PM
 ;;51624838;User.Pacjent
 ;
SQLUPPER(v,l) { quit $zu(28,v,7,$g(l,32767)) }
ALPHAUP(v,r) { quit $zu(28,v,6) }
STRING(v,l) { quit $zu(28,v,9,$g(l,32767)) }
SQLSTRING(v,l) { quit $zu(28,v,8,$g(l,32767)) }
UPPER(v) { quit $zu(28,v,5) }
MVR(v) { quit $zu(28,v,2) }
TRUNCATE(v,l) { quit $e(v,1,$g(l,3641144)) }
%BindExport(dev,Seen,RegisterOref,AllowedDepth,AllowedCapacity) public {
   i $d(Seen(+$this)) q 1
   Set Seen(+$this)=$this
   s sc = 1
 s proporef=..%source
 s proporef=..adres
 s proporef=..pacjentNaFakturze
   d:RegisterOref InitObjVar^%SYS.BINDSRV($this)
   i dev'="" s t=$io u dev i $zobjexport($this_"",3)+$zobjexport($this."%%OID",3)+$zobjexport($this,3)!1 u t
 If AllowedDepth>0 Set AllowedDepth = AllowedDepth - 1
 If AllowedCapacity>0 Set AllowedCapacity = AllowedCapacity - 1/3
 s proporef=..%source
 s proporef=..adres
       i proporef'="" s sc=1 i AllowedDepth'=0,AllowedCapacity'=0 s sc=proporef.%BindExport(dev,.Seen,RegisterOref,AllowedDepth,AllowedCapacity) q:('sc) sc
 s proporef=..pacjentNaFakturze
       i proporef'="" d
  . s idx="" i proporef'="" f  s elemoref=proporef.GetNext(.idx) q:idx=""  s sc=1 i AllowedDepth'=0,AllowedCapacity'=0 s sc=elemoref.%BindExport(dev,.Seen,RegisterOref,AllowedDepth,AllowedCapacity) q:('sc)
  q:('sc) sc
       i proporef'="",dev'="" s t=$io u dev i $zobjexport(proporef_"",3)+$zobjexport(proporef."%%OID",3)+$zobjexport(proporef,3)!1 u t
       if proporef'="",dev'="" d
       . s t=$io u dev i $zobjexport(5_"",3)!1 u t
       . s t=$io u dev i $zobjexport(proporef.Count()_"",3)!1 u t
     . for i=1:1:proporef.Count()  s t=$io u dev i $zobjexport(proporef.GetAt(i)_"",3)!1 u t
   Quit sc }
%BuildIndices(pIndexList="",pAutoPurge=1,pLockFlag=0,pJournalFlag=1,pStartID="",pEndID="",pIgnoreIndexList="") public {
	If (pIndexList="")||(($listlength(pIndexList)=1)&&($listget(pIndexList,1)="")) { Quit 1 }
	Quit $$Error^%apiOBJ(5066,$classname()_"::"_$ListToString(pIndexList)) }
%BuildIndicesSegment(pStartID,pEndID,pIndexHandle=0,pLockFlag=1,pFirstRange=0,pJob="") public {
	QUIT 1 }
%CheckConstraints(pID,pConstraintList="",pCheckDisabled=0,pErrorInfo) public {
	if (''..%OnDetermineClass($select(pID="":"",1:$listbuild(pID_"")),.tMSTC)) && (tMSTC '= $classname()) { quit $classmethod(tMSTC,"%CheckConstraints",pID,pConstraintList) } else { quit 1 } }
%CheckConstraintsForExtent(pConstraintList="",pCheckDisabled=0,pErrorLog) [ SQLCODE,tID ] public { New %msg,%ROWCOUNT,%ROWID,SQLCODE,tID 
	kill pErrorLog set tStatusAll = 1, pErrorLog = 0 if '$listvalid(pConstraintList) { set pConstraintList = $listfromstring(pConstraintList) }
	 ;---&sql(declare ext cursor for select %ID into :tID FROM SQLUser.Pacjent)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE, tID
	
	 ;---&sql(open ext)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE
	do %ext0o
	if SQLCODE '< 0 {
		for {
			 ;---&sql(fetch ext)
 			 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE
			do %0Do
			if SQLCODE { if SQLCODE=100 { quit } elseif SQLCODE<0 { set tStatusAll = $select(+tStatusAll:$$Error^%apiOBJ(5521,SQLCODE,$Get(%msg)),1:$$AppendStatus^%occSystem(tStatusAll,$$Error^%apiOBJ(5521,SQLCODE,$Get(%msg)))) quit } }
			set tStatus = ..%CheckConstraints(tID,pConstraintList,pCheckDisabled,.tErrorInfo)
			if ('tStatus) { set tStatusAll = $select(+tStatusAll:tStatus,1:$$AppendStatus^%occSystem(tStatusAll,tStatus)) set:pErrorLog<1000 pErrorLog = pErrorLog + 1, pErrorLog(pErrorLog) = tErrorInfo _ $Listbuild(tStatus) }
		}
		 ;---&sql(close ext)
 		 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE
		do %ext0c
	}
	quit tStatusAll }
 q
%ext0o 
 try { s SQLCODE=$s($g(%ext0116c):-101,1:0) q:SQLCODE'=0 
 n %sqltime s %sqltime=$zh
 s %ext0116d(1)=0 s:$d(%0CacheRowLimit)#2 %ext0116d(2)=%0CacheRowLimit
 s %ext0116d(3)=$zu(115,2)
 s %ext0116d(4)=0,%ext0116d(5)=""
 d:$zu(115,15) $system.ECP.Sync()
 s %ext0116c=1,SQLCODE=0
 s:$d(%sqltime) %ext0116d(6)=$g(%ext0116d(6))+$zh-%sqltime
 } catch { d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %ext0116c,%ext0116d,%ext0116E,%ext0116n,%ext0116R }
 q
%0Afirst 
 ; asl MOD# 2
 s tID=""
%0AmBk1 s tID=$o(^User.PacjentD(tID))
 i tID="" g %0AmBdun
 goto:%ext0116d(3)'=1 %0AmBuncommitted
 if %ext0116d(3)=1 {
 	lock +^User.PacjentD($p(tID,"||",1))#"S":$zu(115,4)
 	if $t { set %ext0116d(5)=$name(^User.PacjentD($p(tID,"||",1)))_"#""SI""",%ext0116d(4)=1 }
 	else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.Pacjent for RowID value: "_tID ztrap "LOCK"  }
 }
 ; asl MOD# 3
 i tID'="",$d(^User.PacjentD(tID))
 e  g %0AmCdun
%0AmBuncommitted ;
 s:$g(SQLCODE)'<0 SQLCODE=0 s %ROWCOUNT=$i(%ext0116d(1)),%ROWID=tID,%ext0116c=10
 //-- FETCH Output
 s:$d(%sqltime) %ext0116d(6)=$g(%ext0116d(6))+$zh-%sqltime
 quit
%ext0f //-- FETCH tag
 i '$g(%ext0116c) { s SQLCODE=-102 q  } i %ext0116c=100 { s SQLCODE=100 q  } s SQLCODE=0
 i $d(%ext0116d(2))#2,$g(%ext0116d(1))'<%ext0116d(2) { s SQLCODE=100,%ROWCOUNT=%ext0116d(1),%ext0116c=100 q }
 n %sqltime s %sqltime=$zh
 g %0Afirst:%ext0116c=1
%0AmCdun if $g(%ext0116d(3))=1 { if $g(%ext0116d(4))=1 { l -@%ext0116d(5) s %ext0116d(4)=0 } elseif $g(%ext0116d(4))=2 { do $classmethod($li(%ext0116d(5)),"%UnlockId",$li(%ext0116d(5),2),1,1)  s %ext0116d(4)=0 } }
 g %0AmBk1
%0AmBdun 
%0AmAdun 
 s %ROWCOUNT=%ext0116d(1),SQLCODE=100,%ext0116c=100
 s:$d(%sqltime) %ext0116d(6)=$g(%ext0116d(6))+$zh-%sqltime
 //-- no [more] data
 quit
%ext0c i '$g(%ext0116c) { s SQLCODE=-102 q  }
 n %sqltime s %sqltime=$zh
 s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%ext0116d(1)),1:0)
 if $g(%ext0116d(3))=1 { if $g(%ext0116d(4))=1 { l -@%ext0116d(5) } elseif $g(%ext0116d(4))=2 { do $classmethod($li(%ext0116d(5)),"%UnlockId",$li(%ext0116d(5),2),1,1)  } }
 s:$d(%sqltime) %ext0116d(6)=$g(%ext0116d(6))+$zh-%sqltime
 n context,tmp,count,total,mean s context=$system.Context.SQL()
 if $d(%ext0116d(6),%sqltime) {
 if $g(context.Stats)<$zu(99) { d AggregateStats^%SYS.SQLSRV() }
 s tmp=$g(context.Stats($namespace,"cwOq1Dc2+ztY/U394Ks/oht4yT4="))
 s count=$lg(tmp,1),total=$lg(tmp,2),mean=total+%sqltime/(count+1)
 s context.Stats($namespace,"cwOq1Dc2+ztY/U394Ks/oht4yT4=")=$lb(count+1,total+%sqltime,$s(+count=0:0,1:(%sqltime-mean)**2+(count*((total/count-mean)**2+$lg(tmp,3)))/(count+1))) }
 k %ext0116c,%ext0116d,%ext0116E,%ext0116n,%ext0116R
 s SQLCODE=0
 quit  // close
%0Aerr d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 s %ext0116c=100
 quit  // error
%0Do try { do %ext0f q:SQLCODE'=0
 } catch { do %0Aerr }
 q
%ComposeOid(id) public {
	set tCLASSNAME = $listget($g(^User.PacjentD(id)),1)
	if tCLASSNAME="" { quit $select(id="":"",1:$listbuild(id_"","User.Pacjent")) }
	set tClass=$piece(tCLASSNAME,$extract(tCLASSNAME),*-1)
	set:tClass'["." tClass="User."_tClass
	quit $select(id="":"",1:$listbuild(id_"",tClass)) }
%Construct(initvalue) public {
	Set i%%Concurrency=$zu(115,10),i%%seriesCount=1,i%pacjentNaFakturze=$listbuild("User.Faktura","listaFakturPacjenta",+$this,"many",1,1)
	Kill i%%data,i%%seriesNames,i%adres
	Set m%pacjentNaFakturze=0,M%pacjentNaFakturze=0
	Quit 1 }
%ConstructCloneInit(object,deep=0,cloned,location) public {
	Set i%"%%OID"=""
	If deep>0 {
		If $isobject(..%source)=1 Set r%%source=r%%source.%ConstructClone(1,.cloned),i%%source=""
		If $data(i%adres),$isobject(..adres)=1 Set r%adres=r%adres.%ConstructClone(1,.cloned),i%adres=""
		If $isobject(..pacjentNaFakturze)=1 {
			If ..pacjentNaFakturze.NotLoaded Do ..pacjentNaFakturze.Load()
			Set tmprel=r%pacjentNaFakturze,tmpref=tmprel.InverseReference,tmprel.InverseReference=$this
			Set r%pacjentNaFakturze=r%pacjentNaFakturze.%ConstructClone(1,.cloned),i%pacjentNaFakturze=""
			Set tmprel.InverseReference=tmpref
		}
	} Else {
		If ..pacjentNaFakturze'="" {
			If deep=-1 {
				Set r%pacjentNaFakturze="",i%pacjentNaFakturze=$listbuild("User.Faktura","listaFakturPacjenta",+$this,"many",1,1)
			} Else {
				If ..pacjentNaFakturze.NotLoaded Do ..pacjentNaFakturze.Load()
				Set tmprel=r%pacjentNaFakturze,tmpref=tmprel.InverseReference,tmprel.InverseReference=$this
				Set r%pacjentNaFakturze=r%pacjentNaFakturze.%ConstructClone(0,.cloned),i%pacjentNaFakturze=""
				Set tmprel.InverseReference=tmpref
			}
		}
	}
	Quit 1 }
%CopyDataFromModel(pData,pTypes,pSeries="") public {
 // Generated by %ZEN.DataModel.ObjectDataModel
 Set tSC = 1
 For sno = $S(pSeries="":1,1:pSeries):1:..%seriesCount {
 Set pData(sno,"imie") = ..imieLogicalToDisplay(..imie)
 Set pData(sno,"nazwisko") = ..nazwiskoLogicalToDisplay(..nazwisko)
 Kill tData,tTypes
 Set tSC = ..adres.%CopyDataFromModel(.tData,.tTypes,sno)
 If ('tSC) Quit
 Set k = $O(tData(sno,""))
 While (k'="") {
  Set pData(sno,"adres"_"."_k) = $G(tData(sno,k))
  Set k = $O(tData(sno,k))
 }
 Set pData(sno,"PESEL") = ..PESELLogicalToDisplay(..PESEL)
 Quit:pSeries'=""
 }
 If ('tSC) Quit tSC
 Quit tSC }
%CopyDataToModel(pData,pSeries="") public {
 // Generated by %ZEN.DataModel.ObjectDataModel
 Set tSC = 1
 For sno = $S(pSeries="":1,1:pSeries):1:..%seriesCount {
 Set ..imie = ..imieDisplayToLogical($G(pData(sno,"imie")))
 Set ..nazwisko = ..nazwiskoDisplayToLogical($G(pData(sno,"nazwisko")))
 Kill tData
 Set k = $O(pData(sno,"adres."))
 While ($E(k,1,6)="adres.") {
  Set tData(sno,$P(k,".",2,999)) = $G(pData(sno,k))
  Set k = $O(pData(sno,k))
 }
 Set tSC = ..adres.%CopyDataToModel(.tData,sno)
 If ('tSC) Quit
 Set ..PESEL = ..PESELDisplayToLogical($G(pData(sno,"PESEL")))
 Quit:pSeries'=""
 }
 If ('tSC) Quit tSC
 Quit tSC }
%CreateModelInstance(pID,pConcurrency=-1,pSC) public { Set:'($data(pSC)#2) pSC=1
	Quit $S(pID="":..%New(),1:..%OpenId(pID,pConcurrency,.pSC)) }
%Delete(oid="",concurrency=-1) public {
	Quit:oid="" $$Error^%apiOBJ(5813,$classname()) Set id=$listget(oid) Quit:id="" $$Error^%apiOBJ(5812,$classname()) set traninit=0
	set $ZTRAP="%DeleteERR"
	If concurrency = -1 Set concurrency=$zu(115,10)
	If (concurrency > 4) || (concurrency < 0) || (concurrency '= (concurrency\1)) Quit $$Error^%apiOBJ(5828)
	Set class=$listget(oid,2)
	If class="" { Set sc=..%OnDetermineClass(oid,.class) Quit:('sc) sc Set oid=$select(oid="":"",1:$listbuild($listget(oid),class)_$select($listget(oid,3)'="":$listbuild($list(oid,3)),1:"")) } Else { Set class=$s(class="":"",class[".":class,$e(class)'="%":"User."_class,1:"%Library."_$e(class,2,*)) }
	If $classname()'=class Quit $classmethod(class,"%Delete",oid,concurrency)
	If +$g(%objtxSTATUS)=0 { Set traninit=1 k %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxOIDUNASSIGNED,%objtxMODIFIED,%objtxVERSION k:'$TLevel %objtxTID,%objtxID i '$zu(115,9) { s %objtxSTATUS=1 } else { TStart  s %objtxSTATUS=2 } }
	Set sc=##class(User.Faktura).listaFakturPacjentaOnDelete(id,concurrency) Goto:('sc) %DeleteEnd
	Set oref=$zobjoid($listget(oid,2),$listget(oid)) If $isobject(oref)=1 Do oref.%DeleteOID()
	Set sc=..%DeleteData(id,concurrency)
%DeleteEnd If traninit { If (''sc) { i $g(%objtxSTATUS)=1 { k %objtxSTATUS } else { If $Tlevel { TCommit  } k %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxOIDUNASSIGNED,%objtxMODIFIED,%objtxVERSION k:'$TLevel %objtxTID,%objtxID } } Else { i $g(%objtxSTATUS)=2 { s sc=$select(+sc:$$%TRollBack^%occTransaction(),1:$$AppendStatus^%occSystem(sc,$$%TRollBack^%occTransaction())) k %objtxTID,%objtxID } else { k %objtxSTATUS } } }
	Quit sc
%DeleteERR	Set $ZTrap="", sc=$$Error^%apiOBJ(5002,$ZE) goto %DeleteEnd }
%DeleteData(id,concurrency) public {
	Quit:id="" $$Error^%apiOBJ(5812)
	set $Ztrap="DeleteDataERR" set lockok=0,sc=""
	If concurrency {
		Lock +(^User.PacjentD(id)#"E"):$zu(115,4)
		Set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0))
		Set:lockok=2&&($tlevel) %0CacheLock($classname(),"E")=1
		If 'lockok {
			Quit $$Error^%apiOBJ(5803,$classname())
		}
	}
	If ($Data(^User.PacjentD(id))) {
		If $data(^oddEXTR($classname())) {
			Set fc=""
			For {
				Set fc=$order(^oddEXTR($classname(),"n","%1","f",fc))
				Quit:fc=""
				Set fk=""
				For {
					Set fk=$order(^oddEXTR($classname(),"n","%1","f",fc,fk))
					Quit:fk=""
					If $get(^oddEXTR($classname(),"n","%1","f",fc,fk,61))'="" {
						Set sc=$classmethod(fc,fk_"Delete",id)
						If ('sc) { Goto DeleteDataEXIT }
					}
				}
			}
			Set fc=""
			For {
				Set fc=$order(^oddEXTR($classname(),"n","IDKEY","f",fc))
				Quit:fc=""
				Set fk=""
				For {
					Set fk=$order(^oddEXTR($classname(),"n","IDKEY","f",fc,fk))
					Quit:fk=""
					If $get(^oddEXTR($classname(),"n","IDKEY","f",fc,fk,61))'="" {
						Set sc=$classmethod(fc,fk_"Delete",id)
						If ('sc) { Goto DeleteDataEXIT }
					}
				}
			}
		}
		Kill ^User.PacjentD(id)
		Set sc=1
	}
	Else { Set sc=$$Error^%apiOBJ(5810,$classname(),id) }
DeleteDataEXIT
	If concurrency,lockok {
		Lock -(^User.PacjentD(id)#"E")
	}
DeleteDataRET	Set $Ztrap = ""
	QUIT sc
DeleteDataERR	Set $Ztrap = "DeleteDataRET"
	Set sc = $$Error^%apiOBJ(5002,$ZE)
	Goto DeleteDataEXIT }
%Exists(oid="") public {
	Quit ..%ExistsId($listget(oid)) }
%ExistsId(id) public {
	Try { set tExists = $s(id="":0,$d(^User.PacjentD(id)):1,1:0) } catch tException { set tExists = 0 if '(tException.%IsA("%Exception.SystemException")) { throw tException } elseif tException.Name'="<SUBSCRIPT>" { ZT $ZE } } quit tExists }
%FileIndices(id,pIndexHandle=0) public {
	Quit 1 }
%GetPropertyInfo(pInfo,pExtended=0,pModelId="",pContainer="") public {
 // Generated by %ZEN.DataModel.ObjectDataModel
 Set tSC = 1
 Set pInfo("imie") = $I(pInfo)
 Set pInfo("nazwisko") = $I(pInfo)
 Set tSC = ##class(User.Adres).%GetPropertyInfo(.pInfo,pExtended,pModelId,"adres")
 Quit:('tSC) tSC
 Set pInfo("PESEL") = $I(pInfo)
 If (pExtended) {
  Set tProp = "imie"
  Set pInfo(tProp,"%type") = "combobox"
  Set pInfo(tProp,"required") = 1
  Set pInfo(tProp,"valueList") = "Adam, Bogdan, Patrycja, Magda, Krystian, Beata, Aleksandra,Tomasz"
  Set tProp = "nazwisko"
  Set pInfo(tProp,"%type") = "combobox"
  Set pInfo(tProp,"required") = 1
  Set pInfo(tProp,"valueList") = "Nowak, Pawluk, Makowska, Kopydlowka, Kowal, Kwiatkowski"
  Set tProp = "PESEL"
  Set pInfo(tProp,"%type") = "text"
  Set pInfo(tProp,"size") = 11
  Set pInfo(tProp,"required") = 1
  Set pInfo(tProp,"maxlength") = 11
 }
 Quit tSC }
%GetPropertyList(pModelId="",pContainer="") public {
	Quit "imie,nazwisko,"_##class(User.Adres).%GetPropertyList(pModelId,"adres")_",PESEL"
}
%InsertBatch(objects,concurrency=0,useTransactions=0) public {
	try {
		set numerrs=0,errs="",cnt=0,ptr=0
		while $listnext(objects,ptr,data) {
			set cnt=cnt+1
			set lock=0
			if (useTransactions) tstart
			set id=$i(^User.PacjentD)
			try {
				set tInnerException = ""
				;
				if concurrency { lock +(^User.PacjentD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				set ^User.PacjentD(id)=data
				if (useTransactions) { tcommit }
			}
			catch tInnerException {
				set newerr=$lb(cnt,tInnerException.AsStatus())
				if '($length(errs)+$length(newerr)>32767) { set numerrs=numerrs+1, errs=errs_newerr }
				if (useTransactions) && ($Tlevel) trollback
			}
			if lock lock -(^User.PacjentD(id)#"E")
		}
	}
	catch tException {
		set newerr=$lb($g(cnt),tException.AsStatus())
		if '($length(errs)+$length(newerr)>32767) { set numerrs=numerrs+1, errs=errs_newerr }
	}
	QUIT ($lb(numerrs))_errs }
%KillExtentData()
	Kill ^User.PacjentD
	Quit 1
%LoadData(id) public {
	New %s1
	set $ZTrap="CatchError",locked=0,$ze=""
	If i%%Concurrency=4 {
		Lock +(^User.PacjentD(id)#"E"):$zu(115,4)
		if '$t do init s i%%Concurrency=0 return $$Error^%apiOBJ(5803,$classname())
	} ElseIf i%%Concurrency>1 {
		Lock +(^User.PacjentD(id)#"SE"):$zu(115,4)
		if '$t do init s i%%Concurrency=0 return $$Error^%apiOBJ(5803,$classname())
		set locked = 1
	}
	If $d(^User.PacjentD(id),%s1)#2 {
		If i%%Concurrency=2 { Lock -(^User.PacjentD(id)#"SIE") }
		Set i%imie=$lg(%s1,2),i%nazwisko=$lg(%s1,3),i%adres=$lg(%s1,4),i%PESEL=$lg(%s1,5)
		Quit 1
	} Else {
		If i%%Concurrency=2 { Lock -(^User.PacjentD(id)#"SIE") }
		do init
		set sc = $$Error^%apiOBJ(5809,$classname(),id) goto CatchError
	}
CatchError	set $ZTrap = "" if $ZE'="" { s sc = $$Error^%apiOBJ(5002,$ZE) }
	If ($get(locked))&&(i%%Concurrency<3) { Lock -(^User.PacjentD(id)#"SIE") }
	if '('sc) { set sc=$$Error^%apiOBJ(5809,$classname(),id) }
	return sc
init	Set i%adres="",i%imie="",i%nazwisko="",i%PESEL=""
	quit }
%LoadDataFromMemory(id,objstate,obj) public {
	New %s1
	If $d(objstate(id)) {
		Set %s1=$g(objstate(id))
		Set i%imie=$lg(%s1,2),i%nazwisko=$lg(%s1,3),i%adres=$lg(%s1,4),i%PESEL=$lg(%s1,5)
		Quit 1
	} Else {
		Set i%adres="",i%imie="",i%nazwisko="",i%PESEL=""
		Quit $$Error^%apiOBJ(5809,$classname(),id)
	} }
%LoadInit(oid="",concurrency="",reset=0) public {
	If concurrency'="" Set i%%Concurrency=concurrency
	If reset {
		Kill i%%data,i%%seriesNames,i%%source,i%adres,i%pacjentNaFakturze
	}
	Set i%%id="",i%%seriesCount=1,i%%source="",r%%source="",r%adres="",i%pacjentNaFakturze=$listbuild("User.Faktura","listaFakturPacjenta",+$this,"many",1,1),r%pacjentNaFakturze=""
	If 'reset { Set i%"%%OID"=oid If oid'="" { Set $zobjoid("",$listget(oid))=$this } }
	Quit 1 }
%LockExtent(shared=0) public {
	If shared {
		Lock +(^User.PacjentD#"S"):$zu(115,4) Quit:$t 1
		Quit $$Error^%apiOBJ(5799,$classname())
	}
	Lock +(^User.PacjentD):$zu(115,4) Quit:$t 1
	Quit $$Error^%apiOBJ(5798,$classname()) }
%LockId(id,shared=0,timeout) public { Set:'($data(timeout)#2) timeout=$zu(115,4)
	If id="" { Quit $$Error^%apiOBJ(5812) }
	Set sc=1
	If 'shared {
		Lock +(^User.PacjentD(id)#"E"):timeout Quit:$t 1
		Quit $$Error^%apiOBJ(5803,id_":"_$classname())
	}
	Lock +(^User.PacjentD(id)#"SE"):timeout Quit:$t 1
	Quit $$Error^%apiOBJ(5804,id_":"_$classname()) }
%NormalizeObject() public {
	If '$system.CLS.GetModified() Quit 1
	If m%%id Set:i%%id'="" i%%id=(..%idNormalize(i%%id))
	If m%%seriesCount Set:i%%seriesCount'="" i%%seriesCount=(..%seriesCountNormalize(i%%seriesCount))
	If m%PESEL Set:i%PESEL'="" i%PESEL=(..PESELNormalize(i%PESEL))
	If m%imie Set:i%imie'="" i%imie=(..imieNormalize(i%imie))
	If m%nazwisko Set:i%nazwisko'="" i%nazwisko=(..nazwiskoNormalize(i%nazwisko))
	Quit 1 }
%ObjectModified() public {
	If $system.CLS.GetModified() Quit 1
	If r%adres'="",..adres.%ObjectModified() Quit 1
	Quit 0 }
%OnDeleteSource(pID) public {
	Quit ..%DeleteId(pID) }
%OnDetermineClass(oid,class) public {
	Set id=$listget($get(oid))
	Quit:id="" $$Error^%apiOBJ(5812)
	Set idclass=$lg($get(^User.PacjentD(id)),1)
	If idclass="" { Set class="User.Pacjent" Quit 1 }
	Set class=$piece(idclass,$extract(idclass),*-1)
	Set:class'["." class="User."_class
	QUIT 1 }
%OnSaveSource(pSource) public {
 Set tSC = ..%Save() Set:(''tSC) ..%id = ..%Id() Quit tSC }
%PhysicalAddress(id,paddr)
	if $Get(id)="" Quit $$Error^%apiOBJ(5813,$classname())
	if (id="") { quit $$Error^%apiOBJ(5832,$classname(),id) }
	s paddr(1)=$lb($Name(^User.PacjentD(id)),$classname(),"IDKEY","listnode",id)
	s paddr=1
	Quit 1
%PurgeIndices(idxlist="",lockExtent=0,pIgnoreIndexList="") public {
	If idxlist="" { Quit 1 }
	Quit $$Error^%apiOBJ(5066,$classname()_"::"_$ListToString(idxlist)) }
%SQLAcquireLock(%rowid,s=0,unlockref=0)
	new %d,gotlock
	set %d(1)=%rowid set s=$e("E",'unlockref)_$e("S",s)
	lock +^User.PacjentD(%d(1))#s:$zu(115,4) set gotlock=$t
	if gotlock,'unlockref { set:$case($SYSTEM.Lock.ReturnCode(),2:1,4:1,:0)&&($tlevel) %0CacheLock("User.Pacjent","E")=1 }
	set:gotlock&&unlockref unlockref=unlockref+1,unlockref(unlockref)=$lb($name(^User.PacjentD(%d(1))),"User.Pacjent",s_"D")
	QUIT gotlock
%SQLAcquireTableLock(s=0,SQLCODE,to="")
	set s=$e("S",s) set:to="" to=$zu(115,4) lock +^User.PacjentD#s:to QUIT:$t 1 set SQLCODE=-110 if s="S" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler35",,"SQLUser"_"."_"Pacjent") } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler36",,"SQLUser"_"."_"Pacjent") } QUIT 0
	Quit
%SQLBuildIndices(pIndices="",pLockFlag=0,pStartID="",pEndID="",pIgnoreIndexList="")
	QUIT ..%BuildIndices(pIndices,,pLockFlag,,pStartID,pEndID,pIgnoreIndexList)
%SQLBuildPurgeIndexForRow(pIndices="",pActions="BP",pLockRow=1,%d,%e,pIgnoreIndexList="")
	// Purge and build index nodes for a single row using given values, return Status Code
	new sn,tSC,tLock set tSC=1,pActions=$zcvt(pActions,"U")
	try {
		if $g(%d(1))="" { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'SQLUser.Pacjent'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'SQLUser.Pacjent'"))) RETURN tSC }
		if pLockRow { if '..%SQLAcquireLock(%d(1)) { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'SQLUser.Pacjent' with %ID = '"_%d(1)_"'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'SQLUser.Pacjent' with %ID = '"_%d(1)_"'"))) RETURN tSC  } else { set tLock=1 }}
		if pLockRow { do ..%SQLReleaseLock(%d(1),0,0) set tLock=0 }
	}
	catch {
		if $g(tLock) { do ..%SQLReleaseLock(%d(1),0,0) }
		set tSC=$select(+tSC:$$Error^%apiOBJ(5594,$ze),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5594,$ze)))
	}
	QUIT tSC
%SQLCopyIcolIntoName()
	if %oper="DELETE" {
		set:$d(%d(1)) %f("ID")=%d(1)
		QUIT
	}
	set:$d(%d(1)) %f("ID")=%d(1) set:$a(%e,2)&&$d(%d(2)) %f("PESEL")=%d(2) set:$a(%e,3)&&$d(%d(3)) %f("adres")=%d(3) set:$a(%e,4)&&$d(%d(4)) %f("imie")=%d(4) set:$a(%e,5)&&$d(%d(5)) %f("nazwisko")=%d(5) set:$a(%e,6)&&$d(%d(6)) %f("x__classname")=%d(6) set:$a(%e,7)&&$d(%d(7)) %f("adres_kodPocztowy")=%d(7) set:$a(%e,8)&&$d(%d(8)) %f("adres_kraj")=%d(8) set:$a(%e,9)&&$d(%d(9)) %f("adres_miasto")=%d(9) set:$a(%e,10)&&$d(%d(10)) %f("adres_ulica")=%d(10)
	QUIT
%SQLDefineiDjVars(%d,subs,master)
	QUIT
%SQLDelete(%rowid,%check,%tstart=1,%mv=0,%polymorphic=0)
	new bva,ce,%d,dc,%e,%ele,%itm,%key,%l,%nc,omcall,%oper,%pos,%s,sn,sqlcode,subs set %oper="DELETE",sqlcode=0,%ROWID=%rowid,%d(1)=%rowid,%e(1)=%rowid,%l=$c(0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,2) {
		new %ls lock +^User.PacjentD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("User.Pacjent","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"SQLUser"_"."_"Pacjent",$g(%d(1))) QUIT  }
	}
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORDelete"
	do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) if sqlcode { set SQLCODE=-106 do ..%SQLEExit() QUIT  }
	if %e(6)'="" { set sn=$p(%e(6),$e(%e(6)),$l(%e(6),$e(%e(6)))-1) if "Pacjent"'=sn { new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLDelete",%rowid,%check,%tstart,%mv,1) QUIT  }}
	if '$a(%check),'$zu(115,7) do  if sqlcode set SQLCODE=sqlcode do ..%SQLEExit() QUIT  
	. new %fk,%k,%p,%st,%t,%z set %k="",%p("%1")="%d(1),",%p("IDKEY")="%d(1),"
	. for  quit:sqlcode<0  set %k=$o(^oddEXTR("User.Pacjent","n",%k)) quit:%k=""  set %t="" for  set %t=$o(^oddEXTR("User.Pacjent","n",%k,"f",%t)) quit:%t=""  set %st=(%t="User.Pacjent") set %fk="" for  set %fk=$order(^oddEXTR("User.Pacjent","n",%k,"f",%t,%fk)) quit:%fk=""  x "set %z=$classmethod(%t,%fk_""SQLFKeyRefAction"",%st,%k,$a(%check,2),"_%p(%k)_")" if %z set sqlcode=-124 quit  
	set ce="" for  { set ce=$order(^oddSQL("SQLUser","Pacjent","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children
	if '$a(%check,3) {
	}
	k ^User.PacjentD(%d(1))
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORDelete	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"Pacjent",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"Pacjent") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT
	Quit
%SQLDeleteTempStreams()
	// Delete all temporary streams
	QUIT
%SQLEExit()
	do ..%SQLUnlock() 
	if %tstart,$zu(115,1)=1,$TLEVEL { set %tstart=0 TROLLBACK 1 } kill:$g(omcall) %0CacheSQLRA QUIT  
	Quit
%SQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key %1.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=%pVal(1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"SQLUser"_"."_"Pacjent"_":"_"%1") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv=$d(^User.PacjentD(%pVal(1))) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Quit
%SQLGetLock(pRowId,pShared=0,pUnlockRef)
	QUIT ..%SQLAcquireLock(pRowId,pShared,.pUnlockRef)
%SQLGetOld(%rowid,%d,%e,sqlcode)
	new s set %d(1)=%rowid if '$d(^User.PacjentD(%d(1)),s) { set sqlcode=100 quit  }
	Set %e(6)=$lg(s)
	set %e(9)=$lg($lg(s,4)) set %e(8)=$lg($lg(s,4),2) set %e(10)=$lg($lg(s,4),3) set %e(7)=$lg($lg(s,4),4)
	QUIT
%SQLGetOldAll()
	new s set %d(1)=%rowid if '$d(^User.PacjentD(%d(1)),s) { set sqlcode=100 quit  }
	Set %e(6)=$lg(s),%e(4)=$lg(s,2),%e(5)=$lg(s,3),%e(3)=$lg(s,4),%e(2)=$lg(s,5)
	set %e(9)=$lg($lg(s,4)) set %e(8)=$lg($lg(s,4),2) set %e(10)=$lg($lg(s,4),3) set %e(7)=$lg($lg(s,4),4)
	QUIT
%SQLInsert(%d,%check,%inssel,%vco,%tstart=1,%mv=0)
	new bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,sqlcode,sn,subs,icol set %oper="INSERT",sqlcode=0,%l=$c(0,0,0)
	if $a(%check,7) { new %diu merge %diu=%d }
	if $d(%d(1)),'$zu(115,11) { if %d(1)'="" { set SQLCODE=-111,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler6",,"ID","SQLUser"_"."_"Pacjent") QUIT ""  } kill %d(1) } 
	if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode QUIT "" }
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  } set $zt="ERRORInsert"
	do ..%SQLInsertComputes()
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
		do:($g(%d(3))="")&&(($g(%d(7))="")&&($g(%d(8))="")&&($g(%d(9))="")&&($g(%d(10))="")) ..%SQLMissing("adres")
			do:$g(%d(2))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,3)) do:$g(%d(4))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,5)) do:$g(%d(5))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,6)) 
			quit:sqlcode<0		// A required field was missing
		} while 0
		if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT "" }		// A constraint failed
	}
	if '$d(%d(1)) { set %d(1)=$i(^User.PacjentD) } elseif %d(1)>$g(^User.PacjentD) { if $i(^User.PacjentD,$zabs(%d(1)-$g(^User.PacjentD))) {}} elseif $d(^User.PacjentD(%d(1))) { set SQLCODE=-119,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler33",,"ID",%d(1),"SQLUser"_"."_"Pacjent"_"."_"ID") do ..%SQLEExit() QUIT "" }
	for icol=6,7,8,9,10 { set:'($d(%d(icol))#2) %d(icol)="" }
	if '$a(%check,2) {
		new %ls lock +^User.PacjentD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("User.Pacjent","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"SQLUser"_"."_"Pacjent",$g(%d(1))) do ..%SQLEExit() QUIT ""  }
	}
	set ^User.PacjentD(%d(1))=$lb($g(%d(6)),%d(4),%d(5),$lb($g(%d(9)),$g(%d(8)),$g(%d(10)),$g(%d(7))),%d(2))
	lock:$a(%l) -^User.PacjentD(%d(1))#"E"
	TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0
	QUIT %d(1) 			// %SQLInsert
ERRORInsert	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"Pacjent",$ze)
	if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"Pacjent") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  }
	do ..%SQLEExit()
	QUIT ""
%SQLInsertComputes(view=0)
	if 'view {
	do SQLComputeIns7
	do SQLComputeIns8
	do SQLComputeIns9
	do SQLComputeIns10
	}
	QUIT
SQLComputeIns7		// Compute code for field adres_kodPocztowy
 s:(%oper="INSERT"&&($g(%d(3))'=""))||(%oper="UPDATE") %d(7)=$lg($g(%d(3)),4) q
SQLComputeIns8		// Compute code for field adres_kraj
 s:(%oper="INSERT"&&($g(%d(3))'=""))||(%oper="UPDATE") %d(8)=$lg($g(%d(3)),2) q
SQLComputeIns9		// Compute code for field adres_miasto
 s:(%oper="INSERT"&&($g(%d(3))'=""))||(%oper="UPDATE") %d(9)=$lg($g(%d(3)),1) q
SQLComputeIns10		// Compute code for field adres_ulica
 s:(%oper="INSERT"&&($g(%d(3))'=""))||(%oper="UPDATE") %d(10)=$lg($g(%d(3)),3) q
%SQLInvalid(pIcol,pVal) public {
	set:$l($g(pVal))>40 pVal=$e(pVal,1,40)_"..." do:'$d(%n) ..%SQLnBuild() set %msg=$s($g(%msg)'="":%msg_$c(13,10),1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler37",,"SQLUser"_"."_"Pacjent"_"."_$lg(%n,pIcol),$s($g(pVal)'="":$s(pVal="":"<NULL>",pVal=$c(0):"<EMPTY STRING>",1:"'"_pVal_"'"),1:"")),sqlcode=$s(%oper="INSERT":-104,1:-105)
	QUIT sqlcode }
%SQLMissing(fname)
	set sqlcode=-108,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler47",,fname,"SQLUser"_"."_"Pacjent") quit
%SQLPurgeIndices(pIndices="",pLockExtent=0,pIgnoreIndexList="")
	QUIT ..%PurgeIndices(pIndices,pLockExtent,pIgnoreIndexList)
%SQLQuickBulkInsert(%nolock=0)
	// Insert multiple new rows with values %qd(icol)
	new c,call,nc,nr,%qd,r,x set:%nolock=2 %nolock=0
	set nr=$zobjexport(12) for r=1:1:nr { set nc=$zobjexport(12) kill %qd for c=1:1:nc { set:$zobjexport(17) %qd(c+1)=$zobjexport(12) } do ..%SQLQuickInsert(.%qd,%nolock) set x=$zobjexport($s(%qrc:-1,1:%ROWID),18) } QUIT
%SQLQuickBulkLoad(%rowidlist,%nolock=0,pkey=0)
	// QuickLoad multiple rows
	new i,rc set:%nolock=2 %nolock=0 set rc=0
	for i=2:1:$lg(%rowidlist)+1 { do ..%SQLQuickLoad($lg(%rowidlist,i),%nolock) if SQLCODE=0 { set rc=rc+1 } else { QUIT  } } set %ROWCOUNT=rc QUIT
	Quit
%SQLQuickBulkSave(%nolock=0)
	// Insert and/or Update multiple [new] rows with values %qd(icol)
	set x=$zobjexport(-1,18),%qrc=400,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler44",,"SQLUser"_"."_"Pacjent") QUIT
%SQLQuickBulkUpdate(%nolock=0)
	// Update multiple new rows with values %qd(icol)
	new c,call,nc,nr,%qd,r,x set:%nolock=2 %nolock=0 set nr=$zobjexport(12) for r=1:1:nr { set %rowid=$zobjexport(12),nc=$zobjexport(12) kill %qd for c=1:1:nc { set:$zobjexport(17) %qd(c+1)=$zobjexport(12) } do ..%SQLQuickUpdate(%rowid,.%qd,%nolock) set x=$zobjexport($s(%qrc:-1,1:%ROWID),18) quit:%qrc  } QUIT  
%SQLQuickDelete(%rowid,%nolock=0,pkey=0)
	// Delete row where SQLRowID=%rowid
	set:%nolock=2 %nolock=0
	do ..%SQLDelete(%rowid,$c(0,%nolock=1,0,0,0,0))
	if SQLCODE<0 { set %qrc=-SQLCODE,%ROWCOUNT=0 } else { set %ROWCOUNT=1,%qrc=SQLCODE } QUIT
	Quit
%SQLQuickInsert(d,%nolock=0,pkey=0,parentpkey=0)
	// Insert new row with values d(icol)
	set:%nolock=2 %nolock=0
	do ..%SQLQuickOdbcToLogical(.d)
	set %ROWID=..%SQLInsert(.d,$c(0,%nolock=1,0,0,0,0)),%ROWCOUNT='SQLCODE,%qrc=SQLCODE kill d QUIT
%SQLQuickLoad(%rowid,%nolock=0,pkey=0,qq=0)
	// Get fields from row where SQLRowID=%rowid
	new d,i,il,subs set:%nolock=2 %nolock=1
	if %nolock=0 { if '..%SQLAcquireLock(%rowid) { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler45",,"SQLUser"_"."_"Pacjent",%rowid),%ROWCOUNT=0 QUIT  } set:$zu(115,2) il=$zu(115,2,0) }
	new s,ul set ul=0,d(1)=%rowid if $zu(115,2)=1 { lock +^User.PacjentD(d(1))#"S":$zu(115,4) if $t { set ul=1 } else { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler46",,"SQLUser"_"."_"Pacjent",%rowid),%ROWCOUNT=0 quit  } }
	if '$d(^User.PacjentD(d(1)),s) { set SQLCODE=100,%qrc=100 if %nolock=0 { do:$g(il) $zu(115,2,il) }} else { set SQLCODE=0
	if qq { set d(6)=$lg(s) if d(6)'="" { new sn set sn=$p(d(6),$e(d(6)),$l(d(6),$e(d(6)))-1) if "Pacjent"'=sn { if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,1) do:$g(il) $zu(115,2,il) } kill d set:sn'["." sn="User."_sn do $classmethod(sn,"%SQLQuickLoad",%rowid,%nolock,0,1) QUIT  }}}
	set d(2)=$lg(s,5) set d(3)=$lg(s,4) set d(4)=$lg(s,2) set d(5)=$lg(s,3) set d(6)=$lg(s) set d(7)=$lg($lg(s,4),4) set d(8)=$lg($lg(s,4),2) set d(9)=$lg($lg(s,4)) set d(10)=$lg($lg(s,4),3)  }
	do ..%SQLQuickLogicalToOdbc(.d)
	if SQLCODE set %ROWCOUNT=0 set:SQLCODE<0 SQLCODE=-SQLCODE lock:ul -^User.PacjentD(d(1))#"SI" set %qrc=SQLCODE QUIT
	set:qq d=$zobjexport("User.Pacjent",18),d=$zobjexport(10,18) set i=-1 for  { set i=$o(d(i)) quit:i=""  set d=$zobjexport(d(i),18) } set %qrc=0,%ROWCOUNT=1 lock:ul -^User.PacjentD(d(1))#"SI" if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,0) do:$g(il) $zu(115,2,il) } QUIT
	Quit
%SQLQuickLogicalToOdbc(%d)
	set:$g(%d(3))'="" %d(3)=$$LogicalToOdbcField3(%d(3))
	QUIT
LogicalToOdbcField3(val="") {
	Quit $listget(val,1)_","_$listget(val,2)_","_$listget(val,3)_","_$listget(val,4)
}
	Quit
%SQLQuickOdbcToLogical(%d)
	set:$g(%d(3))'="" %d(3)=$$OdbcToLogicalField3(%d(3))
	QUIT
OdbcToLogicalField3(val="") {
	Quit $lb($piece(val,",",1),$piece(val,",",2),$piece(val,",",3),$piece(val,",",4))
}
	Quit
%SQLQuickUpdate(%rowid,d,%nolock=0,pkey=0)
	// Update row with SQLRowID=%rowid with values d(icol)
	set:%nolock=2 %nolock=0
	do ..%SQLQuickOdbcToLogical(.d)
	do ..%SQLUpdate(%rowid,$c(0,%nolock=1,0,0,0,0),.d) set %ROWCOUNT='SQLCODE set:SQLCODE=100 SQLCODE=0 set %qrc=SQLCODE kill d QUIT
%SQLReleaseLock(%rowid,s=0,i=0,e="")
	new %d
	set:e="" e=1 set %d(1)=%rowid set s=$e("E",e)_$e("S",s)_$e("D",i)
	lock -^User.PacjentD(%d(1))#s
	QUIT
%SQLReleaseTableLock(s=0,i=0)
	set s=$e("S",s)_$e("D",i) lock -^User.PacjentD#s QUIT 1
	Quit
%SQLUnlock()
	lock:$a(%l) -^User.PacjentD(%d(1))#"E"
	QUIT
%SQLUnlockError(cname)
	set sqlcode=-110 if %oper="DELETE" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler48",,"SQLUser"_"."_"Pacjent",cname) } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler49",,"SQLUser"_"."_"Pacjent",cname) } quit
	Quit
%SQLUpdate(%rowid,%check,%d,%vco,%tstart=1,%mv=0,%polymorphic=0,%soid)
	new %e,bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,icol,omcall,s,sn,sqlcode,subs,t set %oper="UPDATE",sqlcode=0,%ROWID=%rowid,$e(%e,1)=$c(0),%l=$c(0,0,0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode QUIT  }
	if $d(%d(1)),%d(1)'=%rowid { set SQLCODE=-107,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler16",,"ID","SQLUser"_"."_"Pacjent") QUIT  }
	for icol=2:1:10 { set $e(%e,icol)=$c($d(%d(icol))) }
	set %d(1)=%rowid,%e(1)=%rowid
	if '$a(%check,2) {
		new %ls lock +^User.PacjentD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("User.Pacjent","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"SQLUser"_"."_"Pacjent",$g(%d(1))) QUIT  }
	}
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORUpdate"
	if $g(%vco)="" { do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) i sqlcode { s SQLCODE=-109 do ..%SQLEExit() QUIT  } for icol=6,7,8,9,10 { set:'$d(%d(icol)) %d(icol)=%e(icol) set:%d(icol)=%e(icol) $e(%e,icol)=$c(0) }} else { do ..%SQLGetOldAll() if sqlcode { set SQLCODE=-109 do ..%SQLEExit() QUIT  } for icol=2,3,4,5,6,7,8,9,10 { set:'$d(%d(icol)) %d(icol)=%e(icol) set:%d(icol)=%e(icol) $e(%e,icol)=$c(0) }}
	if %e(6)'="" set sn=$p(%e(6),$e(%e(6)),$l(%e(6),$e(%e(6)))-1) if "Pacjent"'=sn new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLUpdate",%rowid,%check,.%d,$g(%vco),%tstart,%mv,1) QUIT
	do ..%SQLUpdateComputes()
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
			if ($a(%e,3)&&($g(%d(3))=""))||(($g(%d(7))="")&&($g(%d(8))="")&&($g(%d(9))="")&&($g(%d(10))="")) { do ..%SQLMissing("adres") }
			if $a(%e,2),$g(%d(2))="" { do ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,3)) }
			if $a(%e,4),$g(%d(4))="" { do ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,5)) }
			if $a(%e,5),$g(%d(5))="" { do ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,6)) }
			quit:sqlcode
		} while 0
		if sqlcode { set SQLCODE=sqlcode do ..%SQLEExit() QUIT  }
	}
	set:$s($a(%e,2):1,$a(%e,4):1,$a(%e,5):1,$a(%e,6):1,$a(%e,7):1,$a(%e,8):1,$a(%e,9):1,1:$a(%e,10)) s=$g(^User.PacjentD(%d(1))),^User.PacjentD(%d(1))=$lb($s($a(%e,6):%d(6),1:$lg(s)),$s($a(%e,4):%d(4),1:$lg(s,2)),$s($a(%e,5):%d(5),1:$lg(s,3)),$lb($s($a(%e,9):%d(9),1:$lg($lg(s,4))),$s($a(%e,8):%d(8),1:$lg($lg(s,4),2)),$s($a(%e,10):%d(10),1:$lg($lg(s,4),3)),$s($a(%e,7):%d(7),1:$lg($lg(s,4),4))),$s($a(%e,2):%d(2),1:$lg(s,5)))
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORUpdate	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"Pacjent",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"Pacjent") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT  
	Quit
%SQLUpdateComputes(view=0)
	if $a(%e,3) do SQLComputeUpd7 set:%d(7)'=$g(%e(7)) $e(%e,7)=$c(1)
	if $a(%e,3) do SQLComputeUpd8 set:%d(8)'=$g(%e(8)) $e(%e,8)=$c(1)
	if $a(%e,3) do SQLComputeUpd9 set:%d(9)'=$g(%e(9)) $e(%e,9)=$c(1)
	if $a(%e,3) do SQLComputeUpd10 set:%d(10)'=$g(%e(10)) $e(%e,10)=$c(1)
	QUIT
SQLComputeUpd7		// Compute code for field adres_kodPocztowy
 s:(%oper="INSERT"&&($g(%d(3))'=""))||(%oper="UPDATE") %d(7)=$lg($g(%d(3)),4) q
SQLComputeUpd8		// Compute code for field adres_kraj
 s:(%oper="INSERT"&&($g(%d(3))'=""))||(%oper="UPDATE") %d(8)=$lg($g(%d(3)),2) q
SQLComputeUpd9		// Compute code for field adres_miasto
 s:(%oper="INSERT"&&($g(%d(3))'=""))||(%oper="UPDATE") %d(9)=$lg($g(%d(3)),1) q
SQLComputeUpd10		// Compute code for field adres_ulica
 s:(%oper="INSERT"&&($g(%d(3))'=""))||(%oper="UPDATE") %d(10)=$lg($g(%d(3)),3) q
%SQLValidateFields(sqlcode)
	if $g(%d(4))'="",'($$ValidateField4(%d(4))) { set sqlcode=..%SQLInvalid(4+1,%d(4)) } 
	if $g(%d(5))'="",'($$ValidateField5(%d(5))) { set sqlcode=..%SQLInvalid(5+1,%d(5)) } 
	if $g(%d(9))'="",'($$ValidateField9(%d(9))) { set sqlcode=..%SQLInvalid(9+1,%d(9)) } 
	if $g(%d(10))'="",'($s(%d(10)'[","&&(",Czumy,Peowiakow,Wiejska,Zamojska,"[(","_$select(%d(10)=$c(0):"",1:%d(10))_",")):1,1:$$Error^%apiOBJ(7205,%d(10),",Czumy,Peowiakow,Wiejska,Zamojska"))) { set sqlcode=..%SQLInvalid(10+1,%d(10)) } 
	if $g(%d(8))'="",'($s(%d(8)'[","&&(",Polska,"[(","_$select(%d(8)=$c(0):"",1:%d(8))_",")):1,1:$$Error^%apiOBJ(7205,%d(8),",Polska"))) { set sqlcode=..%SQLInvalid(8+1,%d(8)) } 
	if $g(%d(2))'="",'($s(($s(%d(2)'=$c(0):$l(%d(2)),1:0)'<11)&&($l(%d(2))'>11):1,$s(%d(2)'=$c(0):$l(%d(2)),1:0)<11:$$Error^%apiOBJ(7202,%d(2),11),1:$$Error^%apiOBJ(7201,%d(2),11))) { set sqlcode=..%SQLInvalid(2+1,%d(2)) } 
	if $g(%d(7))'="",'(($l(%d(7))'>20)) { set sqlcode=..%SQLInvalid(7+1,%d(7)) } 
	QUIT 'sqlcode
ValidateField4(%val) {	Q $s(%val'[","&&(",Adam, Bogdan, Patrycja, Magda, Krystian, Beata, Aleksandra,Tomasz,"[(","_$select(%val=$c(0):"",1:%val)_",")):1,1:$$Error^%apiOBJ(7205,%val,",Adam, Bogdan, Patrycja, Magda, Krystian, Beata, Aleksandra,Tomasz"))
}
ValidateField5(%val) {	Q $s(%val'[","&&(",Nowak, Pawluk, Makowska, Kopydlowka, Kowal, Kwiatkowski,"[(","_$select(%val=$c(0):"",1:%val)_",")):1,1:$$Error^%apiOBJ(7205,%val,",Nowak, Pawluk, Makowska, Kopydlowka, Kowal, Kwiatkowski"))
}
ValidateField9(%val) {	Q $s(%val'[","&&(",Warszawa,Gdynia, Zamosc,Gdansk,Krakow,"[(","_$select(%val=$c(0):"",1:%val)_",")):1,1:$$Error^%apiOBJ(7205,%val,",Warszawa,Gdynia, Zamosc,Gdansk,Krakow"))
}
	Quit
%SQLnBuild() public {
	set %n=$lb(,"ID","PESEL","adres","imie","nazwisko","x__classname","adres_kodPocztowy","adres_kraj","adres_miasto","adres_ulica")
	QUIT }
%Save(related=1) public {
	Set $ZTrap="%SaveERR"
	New %objTX Set sc=1,traninit=0 If '$data(%objTX2) New %objTX2 Set %objTX2=1
	If +$g(%objtxSTATUS)=0 { Set traninit=1 k %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxOIDUNASSIGNED,%objtxMODIFIED,%objtxVERSION k:'$TLevel %objtxTID,%objtxID i '$zu(115,9) { s %objtxSTATUS=1 } else { TStart  s %objtxSTATUS=2 } }
	If $get(%objTX2(+$this)) Set sc=..%BuildObjectGraph(1) Quit:('sc) sc Set intRef=+$this,objValue=$get(%objTX(1,intRef,1)),sc=..%SerializeObject(.objValue,1) Set:(''sc) %objTX(1,intRef,1)=objValue Quit sc
	Set sc=..%BuildObjectGraph(related+2) If ('sc) ZTrap "SG"
	If '$data(%objTX(2)) s sc=1 GoTo %SaveCOMMIT
	Set %objTX(3)=0,intRef="" For  Set intRef=$order(%objTX(2,intRef)) Quit:intRef=""  If '$data(%objTX(1,intRef,2)) Set %objTX(3,$increment(%objTX(3)))=%objTX(1,intRef) Kill %objTX(2,intRef)
	For ptr=1:1 Quit:ptr>%objTX(3)  Set objRef=%objTX(3,ptr),objValue=$get(%objTX(1,+objRef,1)),sc=objRef.%SerializeObject(.objValue) Do  Set %objTX(1,+objRef,1)=objValue Kill %objTX(1,+objRef,3) Do $system.CLS.SetModified(objRef,0)
	. If ('sc) ZTrap "SG"
	. i $g(%objtxSTATUS)=2 { Set %objtxMODIFIED(+objRef)=$system.CLS.GetModifiedBits(objRef) }
	. Set intSucc="" For  Set intSucc=$order(%objTX(1,+objRef,3,intSucc)) Quit:intSucc=""  Kill %objTX(1,+objRef,3,intSucc),%objTX(1,intSucc,2,+objRef) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$increment(%objTX(3)))=%objTX(1,intSucc) Kill %objTX(2,intSucc)
	Kill %objTX(3) Set %objTX(3)=0 For  Set pserial=0 Do  Quit:'pserial
	. Set intRef="" For  Set intRef=$order(%objTX(2,intRef)) Quit:intRef=""  Set intPred="" For  Set intPred=$order(%objTX(1,intRef,2,intPred)) Quit:intPred=""  If $get(%objTX(1,intPred,6))=1 Set objValue=$get(%objTX(1,intPred,1)),sc=(%objTX(1,intPred)).%SerializeObject(.objValue,1) s:('sc) %objTX(2,intPred,1)=sc If (''sc) Set pserial=1,%objTX(1,intPred,1)=objValue Do
	. . Set intSucc="" For  Set intSucc=$order(%objTX(1,intPred,3,intSucc)) Quit:intSucc=""  Kill %objTX(1,intPred,3,intSucc),%objTX(1,intSucc,2,intPred) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$i(%objTX(3)))=%objTX(1,intSucc) Kill %objTX(2,intSucc)
	. . For ptr=1:1 Quit:ptr>%objTX(3)  Set objSerialize=%objTX(3,ptr),objValue=$get(%objTX(1,+objSerialize,1)),sc=objSerialize.%SerializeObject(.objValue) Do  Set %objTX(1,+objSerialize,1)=objValue Kill %objTX(1,+objSerialize,3) Do $system.CLS.SetModified(objSerialize,0)
	. . . If ('sc) ZTrap "SG"
	. . . i $g(%objtxSTATUS)=2 { Set %objtxMODIFIED(+objSerialize)=$system.CLS.GetModifiedBits(objSerialize) }
	. . . Set intSucc="" For  Set intSucc=$order(%objTX(1,+objSerialize,3,intSucc)) Quit:intSucc=""  Kill %objTX(1,+objSerialize,3,intSucc),%objTX(1,intSucc,2,+objSerialize) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$i(%objTX(3)))=%objTX(1,intSucc) Kill %objTX(2,intSucc)
	. . Kill %objTX(3) Set %objTX(3)=0
	If $data(%objTX(2))>2 {
		Set sc=$$Error^%apiOBJ(5827,$classname())
		set intRef="" for  set intRef=$order(%objTX(2,intRef)) quit:intRef=""  if ('$Get(%objTX(2,intRef,1),1)) set sc=$$EmbedStatus^%apiOBJ(sc,%objTX(2,intRef,1))
	 	ZTrap "SG"
	}
	Set cmd="" For  Set cmd=$order(%objTX(9,cmd)) Quit:cmd=""  Xecute cmd
%SaveCOMMIT	If traninit { i $g(%objtxSTATUS)=1 { k %objtxSTATUS } else { If $Tlevel { TCommit  } k %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxOIDUNASSIGNED,%objtxMODIFIED,%objtxVERSION k:'$TLevel %objtxTID,%objtxID } }
	Do $system.CLS.SetModified(0) Quit sc
%SaveERR	Set $ZTrap="" If $extract($zerror,1,5)'="<ZSG>" Set sc=$$Error^%apiOBJ(5002,$ZE)
	If $get(traninit) { i $g(%objtxSTATUS)=2 { s sc=$select(+sc:$$%TRollBack^%occTransaction(),1:$$AppendStatus^%occSystem(sc,$$%TRollBack^%occTransaction())) k %objtxTID,%objtxID } else { k %objtxSTATUS } }
	Quit sc }
%SaveData(id) public {
	try {
		set id=$listget(i%"%%OID") if id'="" { set insert=0,idassigned=1 } else { set insert=1,idassigned=0 }
		set lock=0,lockok=0,tSharedLock=0
		if 'idassigned { set id=$i(^User.PacjentD) Set $zobjoid("User.Pacjent",id)=$this,.."%%OID"=$lb(id_"","User.Pacjent") set:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this)="" }
		try {
			set tInnerException = ""
			;
			if 'insert {
				if (i%%Concurrency<4)&&(i%%Concurrency) { lock +(^User.PacjentD(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lockok=2&&($tlevel) %0CacheLock($classname(),"E")=1 if lockok { set lock=1 } else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if ('$Data(^User.PacjentD(id))) {
					set insert=1
					if lock { lock -(^User.PacjentD(id)#"E") set (lock,lockok) = 0 }
				}
			}
			if insert {
				if ('lockok&&..%Concurrency&&$tlevel)||(i%%Concurrency=4) {  lock +(^User.PacjentD(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:(lockok=2&&(i%%Concurrency'=4)) %0CacheLock($classname(),"E")=1 set:lockok lock=1 if 'lockok { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if i%%Concurrency=3 { lock +(^User.PacjentD(id)#"ES") set tSharedLock=1 }
				set ^User.PacjentD(id)=$lb("",i%imie,i%nazwisko,i%adres,i%PESEL)
			}
			else {
				set ^User.PacjentD(id)=$lb("",i%imie,i%nazwisko,i%adres,i%PESEL)
			}
			set tStatus = 1
		}
		catch tInnerException {
			if ('idassigned) { Set $zobjoid("",$listget(i%"%%OID"))="" Set $this."%%OID" = "" kill:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this) }
			if (tSharedLock) {  lock -(^User.PacjentD(id)#"ES") } elseif (lockok=1)&&(insert)&&(i%%Concurrency=4) {  lock -(^User.PacjentD(id)) }
		}
		if lock lock -(^User.PacjentD(id)#"E")
		if $Isobject(tInnerException) { throw tInnerException }
	}
	catch tException {
		set tStatus = tException.AsStatus()
	}
	quit tStatus }
%SaveDirect(id="",idList="",data,concurrency=-1) public {
	try {
		if concurrency=-1 { set concurrency=$zu(115,10) }
		if id'="" { set insert=0,idassigned=1 } else { set insert=1,idassigned=0 }
		set lock=0,tSharedLock=0
		if 'idassigned { set id=$i(^User.PacjentD) }
		try {
			set tInnerException = ""
			;
			if 'insert {
				if concurrency { lock +(^User.PacjentD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if ('$Data(^User.PacjentD(id))) {
					set insert=1
					if lock { lock -(^User.PacjentD(id)#"E") set (lock,lockok) = 0 }
				}
			}
			if insert {
				if concurrency { lock +(^User.PacjentD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				set ^User.PacjentD(id)=data
			}
			else {
				set ^User.PacjentD(id)=data
			}
			set tStatus = 1
		}
		catch tInnerException {
		}
		if lock lock -(^User.PacjentD(id)#"E")
		if $Isobject(tInnerException) { throw tInnerException }
	}
	catch tException {
		set tStatus = tException.AsStatus()
	}
	quit tStatus }
%SaveIndices(pStartId="",pEndId="",lockExtent=0) public {
	Quit 1 }
%SerializeObject(serial,partial=0) public {
	try {
		If $get(%objTX2(+$this)) { Set partial = 1 } ElseIf ('partial) { Set %objTX2(+$this) = 1 }
		Set sc=..%ValidateObject(,0) Throw:('sc) ##class(%Exception.StatusException).ThrowIfInterrupt(sc)
		Set sc=..%NormalizeObject() Throw:('sc) ##class(%Exception.StatusException).ThrowIfInterrupt(sc)
		If r%adres'="" { Set:'$data(%objTX(1,+r%adres,1)) %objTX(1,+r%adres)=r%adres,%objTX(1,+r%adres,1)=..adresGetObject(1),%objTX(1,+r%adres,6)=2 Set M%adres=1,i%adres=$listget(%objTX(1,+r%adres,1)) }
		If r%pacjentNaFakturze'="" { Set:'$data(%objTX(1,+r%pacjentNaFakturze,1)) %objTX(1,+r%pacjentNaFakturze)=r%pacjentNaFakturze,%objTX(1,+r%pacjentNaFakturze,1)=..pacjentNaFakturzeGetObject(1),%objTX(1,+r%pacjentNaFakturze,6)=2 Set M%pacjentNaFakturze=1,i%pacjentNaFakturze=$listget(%objTX(1,+r%pacjentNaFakturze,1)) }
		s:$g(%objtxSTATUS)=2 %objtxLIST(+$this)=$this
		Set id=$listget(serial),sc=..%SaveData(.id) If ('sc) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt(sc) }
		Set serial=(..%Oid())
		if 'partial {
			Set %objTX2(+$this) = 0
		}
		set sc=1
	}
	catch tException {
		If 'partial { Set %objTX2(+$this) = 0 }
		set sc = tException.AsStatus()
	}
	Quit sc }
%AddToSaveSet(depth=3,refresh=0) public {
	If $data(%objTX(1,+$this)) && ('refresh) Quit 1
	Set sc=1,intOref=+$this
	If refresh Set intPoref="" For  Set intPoref=$order(%objTX(1,intOref,2,intPoref)) Quit:intPoref=""  Kill %objTX(1,intPoref,3,intOref),%objTX(1,intOref,2,intPoref)
	Set serial=..%Oid(),%objTX(1,intOref)=$this,%objTX(1,intOref,1)=serial,%objTX(1,intOref,6)=1 If (serial '= "") && (depth<2) { Quit 1 } Else { Set %objTX(7,intOref)=1 }
	Set Poref=r%%source If Poref'="",'$data(%objTX(1,+Poref)) Set %objTX(6,$i(%objTX(6)))=Poref
	if ('$d(i%adres))&&(..adres)
	Set Poref=r%adres If Poref'="" Set:'$data(%objTX(1,+Poref)) %objTX(6,$i(%objTX(6)))=Poref Set %objTX(8,$i(%objTX(8)))=$lb(+Poref,intOref,3,i%adres)
	Set Poref=r%pacjentNaFakturze If Poref'="",'$data(%objTX(1,+Poref)) Set %objTX(6,$i(%objTX(6)))=Poref
exit	Quit sc }
%SortBegin(idxlist="",excludeunique=0)
	Quit 1
%SortEnd(idxlist="",commit=1,excludeunique=0) public {
	Quit 1 }
%UnlockExtent(shared=0,immediate=0) public {
	If 'shared {
		If 'immediate {
			Lock -^User.PacjentD
			 Quit 1
		}
		Lock -^User.PacjentD#"I"
		Quit 1
	}
	If 'immediate {
		Lock -^User.PacjentD#"S"
		Quit 1
	}
	Lock -^User.PacjentD#"SI"
	Quit 1 }
%UnlockId(id,shared=0,immediate=0) public {
	If 'shared {
		If 'immediate {
			Lock -(^User.PacjentD(id)#"E")
			Quit 1
		}
		Lock -(^User.PacjentD(id)#"IE")
		Quit 1
	}
	If 'immediate {
		Lock -(^User.PacjentD(id)#"SE")
		Quit 1
	}
	Lock -(^User.PacjentD(id)#"SIE")
	Quit 1 }
%ValidateIndices(idxList="",autoCorrect=0,lockOption=1,multiProcess=1)
	w !,"There are no indices to validate for class 'User.Pacjent'"
	QUIT 1
%ValidateObject(force=0,checkserial=1) public {
	set sc=1
	If (r%adres'="")||m%adres { Set iv=..adres If checkserial { Set rc=iv.%ValidateObject(force) If ('rc) { Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"adres",..adres) } } if iv.%IsNull() { Set rc=$$Error^%apiOBJ(5659,$classname()_"::adres("_$this_",ID="_..%Id()_")"),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc)) } }
	If '$system.CLS.GetModified() Quit sc
	If m%%id Set iv=..%id If iv'="" Set rc=(..%idIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"%id",iv)
	If m%%seriesCount Set iv=..%seriesCount If iv'="" Set rc=(..%seriesCountIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"%seriesCount",iv)
	Set iv=..PESEL If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::PESEL("_$this_",ID="_..%Id()_")"),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%PESEL Set rc=(..PESELIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"PESEL",iv)
	Set iv=..imie If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::imie("_$this_",ID="_..%Id()_")"),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%imie Set rc=(..imieIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"imie",iv)
	Set iv=..nazwisko If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::nazwisko("_$this_",ID="_..%Id()_")"),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%nazwisko Set rc=(..nazwiskoIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"nazwisko",iv)
	Quit sc }
zPopulate(count=10,verbose=0,DeferIndices=1,objects=0,tune=1,deterministic=0)
	New errcnt,i,id,keepobjects,obj,save,saved
	Set saved=0,keepobjects=0,errcnt=0
	Do $ZU(165,0,$S(deterministic:481516,1:$RANDOM(99999999)))
	If objects Set keepobjects=1,objects=0
	If DeferIndices Do ..%SortBegin("",1)
	s ^CacheTempNodes("gbl",$j,$name(^CacheTempPop($j)))=$lb($h,$username) Kill ^CacheTempPop($j)
	For i=1:1:count Do  if errcnt>1000 write:verbose !,"over 1,000 errors encountered with no successful save - exiting" quit
	. Set obj=##class(User.Pacjent).%New()
	. Set obj.%id=""
	. Set obj.%seriesNames=""
	. Do obj.adresSetObject(##class(User.Adres).PopulateSerial())
	. Set obj.imie=##class(%Library.PopulateUtils).ValueList(",Adam, Bogdan, Patrycja, Magda, Krystian, Beata, Aleksandra,Tomasz")
	. Set obj.nazwisko=##class(%Library.PopulateUtils).ValueList(",Nowak, Pawluk, Makowska, Kopydlowka, Kowal, Kwiatkowski")
	. Set obj.PESEL=##class(%Library.PopulateUtils).StringMin(11,11)
	. If 'keepobjects Do
	. . Set save=obj.%Save()
	. . If (''save) Set saved=saved+1,errcnt=0 If verbose Write !,"Object saved...",saved
	. . If ('save) set errcnt=errcnt+1 if verbose Do DisplayError^%apiOBJ(save)
	. If keepobjects Set objects($Increment(objects))=obj
	. Set obj=""
	k ^CacheTempNodes("gbl",$j,$name(^CacheTempPop($j))) Kill ^CacheTempPop($j)
	If DeferIndices Do ..%SortEnd(,,1)
	If tune Do TuneTable^%apiSQL("SQLUser.Pacjent",1,verbose,.%msg,1)
	Quit saved
zXMLDTD(top,format,input,dtdlist)
 Quit ##class(%XML.Implementation).XMLDTD("User.Pacjent",.top,.format,.input,.dtdlist)
zXMLExportInternal()
 New tag,summary,attrsVal,savelocal,aval,k,tmpPrefix,prefixDepth,hasNoContent,hasElement,topAttrs,beginprefix,endprefix,savexsiAttrs,initialxsiAttrs,initlist,initialCR,inlineFlag,popAtEnd,saveTopPrefix,saveTypesPrefix,saveAttrsPrefix,saveUsePrefix,initlist
 Set $ztrap="XMLExportInternalTrap",popAtEnd=0
 Set summary=summaryArg,initialxsiAttrs=xsiAttrs
 If group Quit $$Error^%apiOBJ(6386,"User.Pacjent")
 If indentFlag Set initialCR=($extract(currentIndent,1,2)=$c(13,10))
 Set id=createId
 Set temp=""
 If id'="" {
   If $piece($get(idlist(+$this)),",",2)'="" Quit 1
   Set idlist(+$this)=id_",1"
 }
 If encoded Set initlist=$lb($get(oreflist),inlineFlagArg),oreflist=1,inlineFlag=inlineFlagArg
 If 'nocycle,('encoded||inlineFlag) {
   If $data(oreflist($this)) Quit $$Error^%apiOBJ(6296,"User.Pacjent")
   Set oreflist($this)=""
 }
 Set tag=$get(topArg)
 Set tmpi=(($get(typeAttr)'="")&&(typeAttr'="User.Pacjent"))
 If $IsObject(namespaces) {
     Set popAtEnd=1,saveTopPrefix=topPrefix,saveTypesPrefix=typesPrefix,saveAttrsPrefix=attrsPrefix,saveUsePrefix=usePrefix
     Set sc=namespaces.PushNodeForExport("",$get(local,0),(encoded||tmpi),"",,.topPrefix,.topAttrs,.typesPrefix,.attrsPrefix,.usePrefix)
     If 'sc Quit sc
   Set beginprefix=$select(namespaces.ElementQualified&&usePrefix:typesPrefix,1:"")
   If topAttrs'="" Set temp=temp_" "_topAttrs
   If tag="" Set tag="Pacjent"
   Set xsitype=namespaces.OutputTypeAttribute
 } Else {
   Set saveTopPrefix=topPrefix,saveTypesPrefix=typesPrefix,saveAttrsPrefix=attrsPrefix,saveUsePrefix=usePrefix
   Set typesPrefix=namespaces If (typesPrefix'=""),($extract(typesPrefix,*)'=":") Set typesPrefix=typesPrefix_":"
   If 'encoded Set namespaces=""
   Set (topPrefix,attrsPrefix,topAttrs,beginprefix)=""
   If tag="" Set tag=typesPrefix_"Pacjent"
   Set xsitype=0
 }
 Set local=+$get(local),savelocal=local
 Set endprefix="</"_beginprefix,beginprefix="<"_beginprefix
 If tmpi Set temp=temp_" "_xsiPrefix_"type="""_typesPrefix_"Pacjent"""_xsiAttrs,xsiAttrs=""
   If id'="" Set temp=" "_$select($get(soap12):soapPrefix_"id",1:"id")_"=""id"_id_""""_temp
 If encoded Set temp=temp_xsiAttrs,xsiAttrs=""
 If indentFlag Set %xmlmsg=currentIndent if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg } Set currentIndent=$select(initialCR:"",1:$c(13,10))_currentIndent_indentChars
 If tag[":" Set topPrefix=$piece(tag,":"),tag=$piece(tag,":",2)  If topPrefix'="" Set topPrefix=topPrefix_":"
 Set %xmlmsg="<"_topPrefix_tag_temp if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set attrsVal=attrsArg,attrsArg="" Set %xmlmsg=attrsVal if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set %xmlmsg=">" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..imie
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"imie"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]]]><![CDATA[>","]]]]]]><![CDATA[><![CDATA[>")_"]]]]><![CDATA[>",1:val))_endprefix_"imie>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..nazwisko
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"nazwisko"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]]]><![CDATA[>","]]]]]]><![CDATA[><![CDATA[>")_"]]]]><![CDATA[>",1:val))_endprefix_"nazwisko>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..adres
 If 'val.XMLIsObjectEmpty(ignoreNull) {
   Set topArg="adres",summaryArg=1,group=0,createId="",typeAttr=$select(encoded||xsitype:"*",1:"User.Adres"),local=1,savexsiAttrs=xsiAttrs
   Set sc=val.XMLExportInternal() Goto:'sc XMLExportExit Set xsiAttrs=savexsiAttrs
 }
 Set val=..PESEL
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"PESEL"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]]]><![CDATA[>","]]]]]]><![CDATA[><![CDATA[>")_"]]]]><![CDATA[>",1:val))_endprefix_"PESEL>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set aval=..pacjentNaFakturze
 Set k="" Set:deepFlag val=aval.GetNext(.k) If k'="" {
   If encoded {
     If indentFlag Set %xmlmsg=currentIndent Set currentIndent=currentIndent_indentChars if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
     Set temp="",temp1=$parameter("User.Faktura","NAMESPACE")
     Set temp1=$select((temp1'="")&&$IsObject(namespaces):namespaces.GetNamespacePrefix(temp1,.temp),1:typesPrefix)
     If soap12 { Set %xmlmsg=beginprefix_"pacjentNaFakturze"_$select(xsitype:"",1:" "_soapPrefix_"itemType="""_temp1_$select($parameter("User.Faktura","XMLSUMMARY")'="":"s_Faktura",1:"Faktura")_"""")_" "_soapPrefix_"arraySize="""_aval.Count()_""""_""_temp_">" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
     } Else { Set %xmlmsg=beginprefix_"pacjentNaFakturze "_$select(xsitype:xsiPrefix_"type="""_soapPrefix_"Array""",1:soapPrefix_"arrayType="""_temp1_$select($parameter("User.Faktura","XMLSUMMARY")'="":"s_Faktura",1:"Faktura")_"["_aval.Count()_"]""")_""_temp_">" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg } }
   }
   Else {
     If indentFlag Set %xmlmsg=currentIndent Set currentIndent=currentIndent_indentChars if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
     Set %xmlmsg=beginprefix_"pacjentNaFakturze>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
   }
   While k'="" {
     If $IsObject(val) {
       Set id=""
       If encoded,'inlineFlag {
         Set temp=$select($parameter("User.Faktura","XMLSUMMARY")'="":-1,1:1)
         Set id=+$get(idlist(temp*val))
         If 'soap12 , (id=0) Set id=$increment(idlist),oreflist(temp*id)=val,idlist(temp*val)=id
       }
       If +id'=0 {
         Set %xmlmsg=currentIndent_beginprefix_"Faktura "_$select(soap12:soapPrefix_"ref=""",1:"href=""#")_"id"_id_""" />" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
       } Else { if id=0 Set id=$increment(idlist)
         Set topArg="Faktura",summaryArg=1,group=0,createId=$get(id),typeAttr=$select(encoded||xsitype:"*",1:"User.Faktura"),local=1,savexsiAttrs=xsiAttrs
         Set sc=val.XMLExportInternal() Goto:'sc XMLExportExit Set xsiAttrs=savexsiAttrs
         If 'encoded Do aval.%UnSwizzleAt(k)
       }
     } Else {
       Set %xmlmsg=currentIndent_beginprefix_"Faktura "_xsiPrefix_"nil=""true"""_xsiAttrs_"/>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
     }
     Set val=aval.GetNext(.k)
   }
   If indentFlag Set currentIndent=$extract(currentIndent,1,*-$length(indentChars)) Set %xmlmsg=currentIndent if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
   Set %xmlmsg=endprefix_"pacjentNaFakturze>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 If indentFlag { Set currentIndent=$extract(currentIndent,1,*-$length(indentChars)) Set %xmlmsg=currentIndent if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }}
 Set %xmlmsg="</"_topPrefix_tag_">"
 if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg } If indentFlag,'initialCR if $data(%xmlBlock) { Set %xmlmsg="" Do xeWriteLine^%occXMLInternal } else { write ! } Set $extract(currentIndent,1,2)=""
 If '$IsObject(namespaces) || (popAtEnd=1) Set topPrefix=saveTopPrefix,typesPrefix=saveTypesPrefix,attrsPrefix=saveAttrsPrefix,usePrefix=saveUsePrefix
 If popAtEnd Do namespaces.PopNode()
 If encoded Set oreflist=$list(initlist),inlineFlag=$list(initlist,2)
 If 'encoded||inlineFlag {
   If 'nocycle Kill oreflist($this)
 } ElseIf $get(oreflist)'=1 {
   Set oreflist=1
   Set id=$order(oreflist(""))
   While id'="" {
     Set val=oreflist(id)
     Kill oreflist(id)
     Set group=0,createId=$zabs(id),typeAttr="*",local=savelocal,xsiAttrs=initialxsiAttrs
     If $classname(val)="User.Pacjent" {
       Set attrsArg=attrsVal
       Set topArg=tag,summaryArg=0
       Set sc=val.XMLExportInternal()
     } Else {
       Set topArg="",summaryArg=(id<0)
       Set sc=val.XMLExportInternal()
     }
     If 'sc Quit
     Set id=$order(oreflist(""))
   }
   Kill oreflist
 }
 Quit sc
XMLExportInternalTrap Set $ztrap=""
 If $data(val) , $IsObject(val) , ($piece($ze,">",1)="<METHOD DOES NOT EXIST") {
   Set sc=$$Error^%apiOBJ(6249,$classname(val))
 } Else {
   Set sc=$$Error^%apiOBJ(5002,$ze)
 }
XMLExportExit 
 If '$IsObject(namespaces) || (popAtEnd=1) Set topPrefix=saveTopPrefix,typesPrefix=saveTypesPrefix,attrsPrefix=saveAttrsPrefix,usePrefix=saveUsePrefix
 If popAtEnd Do namespaces.PopNode()
 Quit sc
zXMLGetSchemaImports(imports,classes)
 Quit ##class(%XML.Implementation).XMLGetSchemaImports("User.Pacjent",.imports,.classes)
zXMLImportAttributes()
 ;
 Quit 1
XMLImportAttrErr Quit $$Error^%apiOBJ(6260,ref,$get(@(tree)@("d",$zlascii(attributeList(ref),13))),@(tree)@("d",$zlascii(nodelist,9))_$$XMLImportAttrLocation(nodelist))
XMLImportFixedAttrErr Quit $$Error^%apiOBJ(6320,ref,$get(@(tree)@("d",$zlascii(attributeList(ref),13))),@(tree)@("d",$zlascii(nodelist,9))_$$XMLImportAttrLocation(nodelist))
XMLImportAttrLocation(nodelist) new msg,loc
 Set loc=$lb($zlascii(nodelist,21),$zlascii(nodelist,25))
 If loc="" Quit ""
 Set msg=$get(^%qCacheMsg("%ObjectErrors",$s(""'="":$zcvt("","L"),1:$s($mvv(58)="":"en",1:$mvv(58))),"XMLImportLocation")," (%1,%2)")
 Quit $$FormatText^%occMessages(msg,$listget(loc,1),$listget(loc,2))
zXMLImportInternal()
 New child,childlist,node,nodelist,inner,innerlist,data,encodedArray,key,nsIndex,savechild,savechildlist,saveinner,saveinnnerlist,exists
 Set $ztrap="XMLImportInternalTrap"
 Set encoded=$case($piece(fmt,",",1),"":0,"literal":0,"encoded":1,"encoded12":1,:"")
 If encoded="" Quit $$Error^%apiOBJ(6231,fmt)
 Set nsIndex=$select($get(namespace)="":"",1:$get(@(tree)@("N",namespace)))
 Set node=nodeArg,nodelist=nodeArgChildlist
 If tag'=@(tree)@("d",$zlascii(nodelist,9)) Set inner=node Goto XMLImportMalformed
 If bareProjection Quit $$Error^%apiOBJ(6386,"User.Pacjent")
 If encoded {
   Do XMLImportAttrnode() If $data(attributeList("id")) Set idlist(node)=$this
 }
 If $zboolean(+($zlascii(nodelist,13)#16),+1,1) Quit 1
 Set sc=$$XMLImportElements()
 If $get(checkRequired),(''sc) { Set nodelist=""
   If '$data(exists("adres")) Set nodelist=nodelist_"adres, "
   If '$data(exists("imie")) Set nodelist=nodelist_"imie, "
   If '$data(exists("nazwisko")) Set nodelist=nodelist_"nazwisko, "
   If '$data(exists("PESEL")) Set nodelist=nodelist_"PESEL, "
   If nodelist'="" Set sc=$$Error^%apiOBJ(6318,$extract(nodelist,1,*-2))
 }
XMLImportExit Quit sc
XMLImportElements() ;
XMLLOOP1 Set descriptor=$zlascii(nodelist,$zwascii(nodelist,17)) Set child=($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)_","_$zwascii(nodelist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else { Set child="" }} For { Quit:child=""  Quit:(descriptor#16)'=2  Set descriptor=$piece(child,",",2)+4 Set child=$piece(child,",",1)_","_descriptor Set descriptor=$zlascii(nodelist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else {Set child="" }} } Goto XMLLOOP2
XMLLOOP For  { Set descriptor=$piece(child,",",2)+4 Set child=$piece(child,",",1)_","_descriptor Set descriptor=$zlascii(nodelist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else {Set child="" }} Quit:child=""  Quit:(descriptor#16)'=2  }
XMLLOOP2 If child="" Quit sc
 If (descriptor#16)'=0 Set inner=child Goto XMLImportMalformedNoTag
 Set childlist=@(tree)@((descriptor\16))
 Set tag=@(tree)@("d",$zlascii(childlist,9))
 If tag="imie" {
   If ($get(namespace)'=""),'$case($zwascii(childlist,19),0:1,nsIndex:1,:0) Goto XMLImportNSchild
   Set exists("imie")=1
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(data'[","&&(",Adam, Bogdan, Patrycja, Magda, Krystian, Beata, Aleksandra,Tomasz,"[(","_$select(data=$c(0):"",1:data)_",")):1,1:$$Error^%apiOBJ(7205,data,",Adam, Bogdan, Patrycja, Magda, Krystian, Beata, Aleksandra,Tomasz"))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..imie=data
   Goto XMLLOOP }
 If tag="nazwisko" {
   If ($get(namespace)'=""),'$case($zwascii(childlist,19),0:1,nsIndex:1,:0) Goto XMLImportNSchild
   Set exists("nazwisko")=1
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(data'[","&&(",Nowak, Pawluk, Makowska, Kopydlowka, Kowal, Kwiatkowski,"[(","_$select(data=$c(0):"",1:data)_",")):1,1:$$Error^%apiOBJ(7205,data,",Nowak, Pawluk, Makowska, Kopydlowka, Kowal, Kwiatkowski"))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..nazwisko=data
   Goto XMLLOOP }
 If tag="adres" {
   If ($get(namespace)'=""),'$case($zwascii(childlist,19),0:1,nsIndex:1,:0) Goto XMLImportNSchild
   Set exists("adres")=1
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     Do XMLImportAttrchild()
     Set class=$select(($zwascii($get(attributeList("type")),9)=1):$get(@(tree)@("d",$zlascii(attributeList("type"),13))),1:"")
     If (class="") || (class="Adres") {
       Set class="User.Adres"
     } Else {
       If $length(class,":")=2 Set class=$piece(class,":",2)
       Set class=$get(^oddCOM("User.Adres",85,"s",class))_$get(^oddXML("User.Adres","s",class)) If class="" Set class=0
       Set tmp=$get(@(tree)@("n",$zwascii(attributeList("type"),11)))
       If (class=0)||(($listlength(class)>1)&&(tmp="")) Set class=$get(@(tree)@("d",$zlascii(attributeList("type"),13))) Goto XMLImportBadTypechild
       If $listlength(class)>1 {
         For tmpi=1:1:$listlength(class) {
           If tmp=$parameter($list(class,tmpi),"NAMESPACE") Set class=$list(class,tmpi),tmpi=0 Quit
         }
         If tmpi Set class=$get(@(tree)@("d",$zlascii(attributeList("type"),13))) Goto XMLImportBadTypechild
       } Else { Set class=$list(class) }
     }
     Set data=$classmethod(class,"XMLNew",handler,child,$this)
     If $isobject(data) Set tag=@(tree)@("d",$zlascii(childlist,9)),nodeArg=child,nodeArgChildlist=childlist,bareProjection=0,summaryArg=1,keynameattr="",sc=data.XMLImportInternal() Goto:('sc) XMLImportExit
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   If data'="" Set ..adres=data
   Goto XMLLOOP }
 If tag="PESEL" {
   If ($get(namespace)'=""),'$case($zwascii(childlist,19),0:1,nsIndex:1,:0) Goto XMLImportNSchild
   Set exists("PESEL")=1
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($s(data'=$c(0):$l(data),1:0)'<11)&&($l(data)'>11):1,$s(data'=$c(0):$l(data),1:0)<11:$$Error^%apiOBJ(7202,data,11),1:$$Error^%apiOBJ(7201,data,11))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..PESEL=data
   Goto XMLLOOP }
 If tag="pacjentNaFakturze" {
   If ($get(namespace)'=""),'$case($zwascii(childlist,19),0:1,nsIndex:1,:0) Goto XMLImportNSchild
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else {
     If 'sc Goto XMLImportExit
     Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set inner=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set inner=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,inner,.descriptor) } Else { Set inner="" }} For { Quit:inner=""  Quit:(descriptor#16)'=2  Set descriptor=$piece(inner,",",2)+4 Set inner=$piece(inner,",",1)_","_descriptor Set descriptor=$zlascii(childlist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set inner=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,inner,.descriptor) } Else {Set inner="" }} }
     While inner'="" {
       If (descriptor#16)'=2 {
         Set innerlist=@(tree)@((descriptor\16))
         If 'encoded,(@(tree)@("d",$zlascii(innerlist,9))'="Faktura") Goto XMLImportBadTag
         If ($get(namespace)'=""),'$case($zwascii(innerlist,19),0:1,nsIndex:1,:0) Goto XMLImportNS
         If encoded Set saveinner=inner,saveinnerlist=innerlist
         If encoded,$$XMLImportId() {
           Set data=idlist(inner)
         } Else {
           If 'sc Goto XMLImportExit
           Do XMLImportAttrinner()
           Set class=$select(($zwascii($get(attributeList("type")),9)=1):$get(@(tree)@("d",$zlascii(attributeList("type"),13))),1:"")
           If (class="") || (class="Faktura") {
             Set class="User.Faktura"
           } Else {
             If $length(class,":")=2 Set class=$piece(class,":",2)
             Set class=$get(^oddCOM("User.Faktura",85,"s",class))_$get(^oddXML("User.Faktura","s",class)) If class="" Set class=0
             Set tmp=$get(@(tree)@("n",$zwascii(attributeList("type"),11)))
             If (class=0)||(($listlength(class)>1)&&(tmp="")) Set class=$get(@(tree)@("d",$zlascii(attributeList("type"),13))) Goto XMLImportBadType
             If $listlength(class)>1 {
               For tmpi=1:1:$listlength(class) {
                 If tmp=$parameter($list(class,tmpi),"NAMESPACE") Set class=$list(class,tmpi),tmpi=0 Quit
               }
               If tmpi Set class=$get(@(tree)@("d",$zlascii(attributeList("type"),13))) Goto XMLImportBadType
             } Else { Set class=$list(class) }
           }
           Set data=$classmethod(class,"XMLNew",handler,inner,$this)
           If $isobject(data) Set tag=@(tree)@("d",$zlascii(innerlist,9)),nodeArg=inner,nodeArgChildlist=innerlist,bareProjection=0,summaryArg=1,keynameattr="",sc=data.XMLImportInternal() Goto:('sc) XMLImportExit
           If encoded Do XMLImportAttrinner() If $data(attributeList("id")) Set idlist(inner)=data
         }
         If encoded Set inner=saveinner,innerlist=saveinnerlist
         If data'="" Do ..pacjentNaFakturze.Insert(data)
       }
       For  { Set descriptor=$piece(inner,",",2)+4 Set inner=$piece(inner,",",1)_","_descriptor Set descriptor=$zlascii(childlist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set inner=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,inner,.descriptor) } Else {Set inner="" }} Quit:inner=""  Quit:(descriptor#16)'=2  }
     }
     Quit:('sc)
   }
   If encoded Set child=savechild,childlist=savechildlist
   Goto XMLLOOP }
 Goto XMLImportBadTagchild
XMLImportBadTagchild Set inner=child
XMLImportBadTag Quit $$Error^%apiOBJ(6237,tag_$$XMLImportLocation(inner))
XMLImportBadTypenode Set inner=node Goto XMLImportBadType
XMLImportBadTypechild Set inner=child
XMLImportBadType Quit $$Error^%apiOBJ(6277,class,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)))_$$XMLImportLocation(inner))
XMLImportErrnode Set inner=node Goto XMLImportErr
XMLImportErrchild Set inner=child
XMLImportErr
 Set data=##class(%XML.ImportHandler).GetNextChild(tree,inner,"")
 If (data'="") {
   If ($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))#16)'=0 {
     Quit $$Error^%apiOBJ(6232,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner),$extract(@(tree)@("d",($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))\16)),1,200))
   } Else {
     Quit $$Error^%apiOBJ(6253,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner),@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))\16)),9)))
   }
 } Else {
   Quit $$Error^%apiOBJ(6252,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner))
 }
XMLImportIdErr Set sc=$$Error^%apiOBJ(6236,id,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner)) Quit sc
XMLImportMalformed Set sc=$$Error^%apiOBJ(6233,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)))_$$XMLImportLocation(inner)) Quit sc
XMLImportMalformedNoTag Set node=$select($piece(inner,",",1)<=0:0,1:$zlascii(@(tree)@($piece(inner,",",1)),1)_","_$zlascii(@(tree)@($piece(inner,",",1)),5)),sc=$$Error^%apiOBJ(6254,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16))),$select(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)))_$$XMLImportLocation(node)) Quit sc
XMLImportNSchild Set inner=child
XMLImportNS Set sc=$$Error^%apiOBJ(6235,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner)) Quit sc
XMLImportLocation(node) new msg,loc
 Set loc=$lb($zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),21),$zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),25))
 If loc="" Quit ""
 Set msg=$get(^%qCacheMsg("%ObjectErrors",$s(""'="":$zcvt("","L"),1:$s($mvv(58)="":"en",1:$mvv(58))),"XMLImportLocation")," (%1,%2)")
 Quit $$FormatText^%occMessages(msg,$listget(loc,1),$listget(loc,2))
XMLImportInternalTrap Set $ztrap=""
 Set loc=$select($ZE["<CLASS DOES NOT EXIST>":" for element "_tag_$$XMLImportLocation(child),1:"")
 Quit $$Error^%apiOBJ(5002,$ZE_loc)
XMLImportIdChild() Set inner=child,innerlist=childlist,tmp=$$XMLImportId(),child=inner,childlist=innerlist Quit tmp
XMLImportId() ;
 Do XMLImportAttrinner()
 If $data(attributeList("href")) {
   Set id=$get(@(tree)@("d",$zlascii(attributeList("href"),13)))
   If $extract(id)="#" {
     Set tmp=$select($get(@(tree)@("i",$extract(id,2,*)))="":"",1:$piece(@(tree)@("i",$extract(id,2,*)),",",1)_","_$piece(@(tree)@("i",$extract(id,2,*)),",",2)) If tmp="" Goto XMLImportIdErr
     Set inner=tmp
     Set descriptor=$zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2)) Set innerlist=@(tree)@((descriptor\16))
   }
 } ElseIf $data(attributeList("ref")),($get(@(tree)@("n",$zwascii(attributeList("ref"),9)))="http://www.w3.org/2003/05/soap-encoding") {
   Set id=$get(@(tree)@("d",$zlascii(attributeList("ref"),13)))
   Set tmp=$select($get(@(tree)@("i",id))="":"",1:$piece(@(tree)@("i",id),",",1)_","_$piece(@(tree)@("i",id),",",2)) If tmp="" Goto XMLImportIdErr
   Set inner=tmp
   Set descriptor=$zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2)) Set innerlist=@(tree)@((descriptor\16))
 } ElseIf '$data(attributeList("id")) {
   Quit 0
 }
 Quit $data(idlist(inner))
XMLImportAttrnode()
 If $get(attributeList)=node Quit
 Kill attributeList
 Set attributeList=node
 Set offset=29 While offset<$zwascii(nodelist,17) { Set attribute=$extract(nodelist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
XMLImportAttrchild()
 If $get(attributeList)=child Quit
 Kill attributeList
 Set attributeList=child
 Set offset=29 While offset<$zwascii(childlist,17) { Set attribute=$extract(childlist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
XMLImportAttrinner()
 If $get(attributeList)=inner Quit
 Kill attributeList
 Set attributeList=inner
 Set offset=29 While offset<$zwascii(innerlist,17) { Set attribute=$extract(innerlist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
zXMLIsObjectEmpty(ignoreNull)
 If ..imie'="" Quit 0
 If ..nazwisko'="" Quit 0
 If '..adres.XMLIsObjectEmpty() Quit 0
 If ..PESEL'="" Quit 0
 If ..pacjentNaFakturze.Count()>0 Quit 0
 Quit 1
zXMLNew(document,node,containerOref="")
	Quit (##class(User.Pacjent).%New())
zXMLSchema(top="",format="",namespacePrefix="",input=0,refOnly=0,schema)
 Quit ##class(%XML.Implementation).XMLSchema("User.Pacjent",top,format,namespacePrefix,input,refOnly,.schema)
zprzedstawSie() public {
	SET zapytanie = "SELECT p.imie, p.nazwisko FROM Pacjent p WHERE p.ID = ?"
	SET wyniki = ##Class(%SQL.Statement).%ExecDirect(,zapytanie,..%Id())
	DO wyniki.%Next()
	Return "Faktura zostala wystawiona na " _ wyniki.%Get("imie") _ " " _ wyniki.%Get("nazwisko") }
zPESELGetStored(id) public {
	Quit $Select(id'="":$listget($g(^User.PacjentD(id)),5),1:"") }
zPESELIsValid(%val) public {
	Q $s(($s(%val'=$c(0):$l(%val),1:0)'<11)&&($l(%val)'>11):1,$s(%val'=$c(0):$l(%val),1:0)<11:$$Error^%apiOBJ(7202,%val,11),1:$$Error^%apiOBJ(7201,%val,11)) }
zadresGetStored(id) public {
	Quit $Select(id'="":$listget($g(^User.PacjentD(id)),4),1:"") }
zimieGetStored(id) public {
	Quit $Select(id'="":$listget($g(^User.PacjentD(id)),2),1:"") }
znazwiskoGetStored(id) public {
	Quit $Select(id'="":$listget($g(^User.PacjentD(id)),3),1:"") }
zpacjentNaFakturzeGetObject(force=0) public {
	Quit $select(r%pacjentNaFakturze=""&&($data(i%pacjentNaFakturze)):$select(i%pacjentNaFakturze="":"",1:$listbuild(i%pacjentNaFakturze_"")),(''..pacjentNaFakturze.%GetSwizzleObject(force,.oid)):oid,1:"") }
zpacjentNaFakturzeGetObjectId(force=0) public {
	Quit $listget(..pacjentNaFakturzeGetObject(force)) }
zpacjentNaFakturzeGetSwizzled(noswizzle=0) public {
	If r%pacjentNaFakturze'="" Quit r%pacjentNaFakturze
	If i%pacjentNaFakturze'="" {
		Set oid=$select(i%pacjentNaFakturze="":"",1:$listbuild(i%pacjentNaFakturze_""))
		Set oref=##class("%Library.RelationshipObject").%Open(oid,,.sc) If ('sc)||(oref="") Do:$get(^%SYS("ThrowSwizzleError"),0) $zutil(96,3,19,1) Quit ""
	} Else { Set oref=##class("%Library.RelationshipObject").%New($listbuild("User.Faktura","listaFakturPacjenta",+$this,"many",1,1)) If oref="" Quit "" }
	Set modstate=$system.CLS.GetModifiedBits() Set r%pacjentNaFakturze=oref Do $system.CLS.SetModifiedBits(modstate)
	Set oref.ElementType="User.Faktura"
	Do oref.%SetModified(0)
	Quit oref }
zpacjentNaFakturzeIsEmpty() public {
	Quit $listget(..pacjentNaFakturzeGetObject(1))="" }
zpacjentNaFakturzeNewObject() public {
	Set newobject=##class("%Library.RelationshipObject").%New($listbuild("User.Faktura","listaFakturPacjenta",+$this,"many",1,1)) If newobject="" Quit ""
	Set ..pacjentNaFakturze=newobject
	Quit newobject }
zpacjentNaFakturzeRFetch(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) public {
 Set ReturnCount=0,AtEnd=1,RowSet="" Quit 1 }
zpacjentNaFakturzeRelate(oref) public {
	Quit ..pacjentNaFakturze.Relate(oref) }
zpacjentNaFakturzeSet(newvalue) public {
	If newvalue="" {
		If r%pacjentNaFakturze="",i%pacjentNaFakturze="" Quit 1
	} Else {
		If '$isobject(newvalue) Quit $$Error^%apiOBJ(5807,newvalue)
		If r%pacjentNaFakturze=newvalue Quit 1
		If r%pacjentNaFakturze="",i%pacjentNaFakturze'="",i%pacjentNaFakturze=$listget(newvalue."%%OID") Set modstate=$system.CLS.GetModifiedBits() Set r%pacjentNaFakturze=newvalue Do newvalue.listaFakturPacjentaRelate($this),$system.CLS.SetModifiedBits(modstate) Quit 1
	}
	Set r%pacjentNaFakturze=newvalue,i%pacjentNaFakturze=0,i%pacjentNaFakturze=""
	Quit 1 }
zpacjentNaFakturzeUnRelate(oref) public {
	Quit ..pacjentNaFakturze.UnRelate(oref) }
zExtentExecute(%qHandle) [ c1,SQLCODE ] public { New %msg,%ROWCOUNT,%ROWID,c1,SQLCODE 
	Set sc=1
	s %qHandle=$i(%objcn)
	 ;---&sql(DECLARE QExtent CURSOR FOR
 	 ;---		 SELECT ID FROM SQLUser.Pacjent)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE
	
	 ;---&sql(OPEN QExtent)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE
	do %QExtent0o
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5821,"SQLCODE = "_SQLCODE) } Else { Set sc=1 }
	Quit sc }
zExtentClose(%qHandle) [ c1,SQLCODE ] public { New %msg,%ROWCOUNT,%ROWID,c1,SQLCODE 
	 ;---&sql(CLOSE QExtent)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE
	do %QExtent0c
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) } Else { Set sc=1 }
	Kill %objcsc(%qHandle),%objcsp(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsl(%qHandle),%objcsR(%qHandle),%objcsZ(%qHandle),%objcsd(%qHandle)
	Quit sc }
zExtentFetch(%qHandle,Row,AtEnd=0) [ c1,SQLCODE ] public { New %msg,%ROWCOUNT,%ROWID,c1,SQLCODE 
	Set Row="",AtEnd=0
	 ;---&sql(FETCH QExtent INTO :c1)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, c1, SQLCODE
	do %0Jo
	If 'SQLCODE { Set Row=$lb(c1) Set sc=1 }
	ElseIf SQLCODE=100 { Set AtEnd=1,sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) }
	Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set AtEnd=1,sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	QUIT sc }
zExtentFetchRows(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) [ c1,SQLCODE ] public { New %msg,%ROWCOUNT,%ROWID,c1,SQLCODE 
	Set RowSet="",ReturnCount=0,AtEnd=0
	For {
		 ;---&sql(FETCH QExtent INTO :c1)
 		 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, c1, SQLCODE
		do %0Ko
		If 'SQLCODE { Set RowSet=RowSet_$lb(c1),ReturnCount=ReturnCount+1 Quit:(ReturnCount=FetchCount)||(($l(RowSet)+($l(RowSet)\ReturnCount))>24000) } Else { Set AtEnd=1 Quit }
	}
	If 'SQLCODE { Set sc=1 } ElseIf SQLCODE=100 { Set sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) } Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	Quit sc }
zExtentSendODBC(%qHandle,array,qacn,%qrc,piece,ColumnCount) [ c1,SQLCODE ] public { New %msg,%ROWCOUNT,%ROWID,c1,SQLCODE 
	set %qrc=0,piece=0
	for {
		set rc=..ExtentFetch(.%qHandle,.row,.atend)
		if ('rc) { set %qrc=-400 set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=-400,%sqlcontext.Message=$g(%msg) do ProcessError^%ourProcedure(rc,$get(%sqlcontext),.%qrc,.%msg),Logerr^%SYS.SQLSRV(%qrc,"","SP",.%msg) RETURN  }
		if row="" { set %qrc=100 set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=100 RETURN  }
		if $g(%protocol)>50 { RETURN:$zobjexport(row,60) }
		else {
			if %protocol>46 { for piece=1:1:ColumnCount { goto:$zobjexport($lg(row,piece),50) SPDone } }
			else { for piece=1:1:ColumnCount { goto:$zobjexport($lg(row,piece),7) SPDone } }
		}
	}
	QUIT
SPDone	set:%protocol>46 piece=piece+1
	kill array(qacn)
	for i=piece:1:ColumnCount { set array(qacn,i)=$lg(row,i) }
	QUIT }
 q
%QExtent0o 
 try { s SQLCODE=$s($g(%objcsc(%qHandle)):-101,1:0) q:SQLCODE'=0 
 n %sqltime s %sqltime=$zh
 s %objcsd(%qHandle,1)=0 s:$d(%0CacheRowLimit)#2 %objcsd(%qHandle,2)=%0CacheRowLimit
 s %objcsd(%qHandle,3)=$zu(115,2)
 s %objcsd(%qHandle,4)=0,%objcsd(%qHandle,5)=""
 d:$zu(115,15) $system.ECP.Sync()
 s %objcsc(%qHandle)=1,SQLCODE=0
 s:$d(%sqltime) %objcsd(%qHandle,6)=$g(%objcsd(%qHandle,6))+$zh-%sqltime
 } catch { d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %objcsd(%qHandle),%objcsc(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsp(%qHandle) }
 q
%0Ffirst 
 ; asl MOD# 2
 s %objcsd(%qHandle,7)=""
%0FmBk1 s %objcsd(%qHandle,7)=$o(^User.PacjentD(%objcsd(%qHandle,7)))
 i %objcsd(%qHandle,7)="" g %0FmBdun
 goto:%objcsd(%qHandle,3)'=1 %0FmBuncommitted
 if %objcsd(%qHandle,3)=1 {
 	lock +^User.PacjentD($p(%objcsd(%qHandle,7),"||",1))#"S":$zu(115,4)
 	if $t { set %objcsd(%qHandle,5)=$name(^User.PacjentD($p(%objcsd(%qHandle,7),"||",1)))_"#""SI""",%objcsd(%qHandle,4)=1 }
 	else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.Pacjent for RowID value: "_%objcsd(%qHandle,7) ztrap "LOCK"  }
 }
 ; asl MOD# 3
 i %objcsd(%qHandle,7)'="",$d(^User.PacjentD(%objcsd(%qHandle,7)))
 e  g %0FmCdun
%0FmBuncommitted ;
 s:$g(SQLCODE)'<0 SQLCODE=0 s %ROWCOUNT=$i(%objcsd(%qHandle,1)),%ROWID=%objcsd(%qHandle,7),%objcsc(%qHandle)=10
 //-- FETCH Output
 s:$d(%sqltime) %objcsd(%qHandle,6)=$g(%objcsd(%qHandle,6))+$zh-%sqltime
 quit
%QExtent0f //-- FETCH tag
 i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  } i %objcsc(%qHandle)=100 { s SQLCODE=100 q  } s SQLCODE=0
 i $d(%objcsd(%qHandle,2))#2,$g(%objcsd(%qHandle,1))'<%objcsd(%qHandle,2) { s SQLCODE=100,%ROWCOUNT=%objcsd(%qHandle,1),%objcsc(%qHandle)=100 q }
 n %sqltime s %sqltime=$zh
 g %0Ffirst:%objcsc(%qHandle)=1
%0FmCdun if $g(%objcsd(%qHandle,3))=1 { if $g(%objcsd(%qHandle,4))=1 { l -@%objcsd(%qHandle,5) s %objcsd(%qHandle,4)=0 } elseif $g(%objcsd(%qHandle,4))=2 { do $classmethod($li(%objcsd(%qHandle,5)),"%UnlockId",$li(%objcsd(%qHandle,5),2),1,1)  s %objcsd(%qHandle,4)=0 } }
 g %0FmBk1
%0FmBdun 
%0FmAdun 
 s %ROWCOUNT=%objcsd(%qHandle,1),SQLCODE=100,%objcsc(%qHandle)=100
 s:$d(%sqltime) %objcsd(%qHandle,6)=$g(%objcsd(%qHandle,6))+$zh-%sqltime
 //-- no [more] data
 quit
%QExtent0c i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  }
 n %sqltime s %sqltime=$zh
 s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%objcsd(%qHandle,1)),1:0)
 if $g(%objcsd(%qHandle,3))=1 { if $g(%objcsd(%qHandle,4))=1 { l -@%objcsd(%qHandle,5) } elseif $g(%objcsd(%qHandle,4))=2 { do $classmethod($li(%objcsd(%qHandle,5)),"%UnlockId",$li(%objcsd(%qHandle,5),2),1,1)  } }
 s:$d(%sqltime) %objcsd(%qHandle,6)=$g(%objcsd(%qHandle,6))+$zh-%sqltime
 n context,tmp,count,total,mean s context=$system.Context.SQL()
 if $d(%objcsd(%qHandle,6),%sqltime) {
 if $g(context.Stats)<$zu(99) { d AggregateStats^%SYS.SQLSRV() }
 s tmp=$g(context.Stats($namespace,"Nv4a4m6NMIzcAxASve/VH1YL4mo="))
 s count=$lg(tmp,1),total=$lg(tmp,2),mean=total+%sqltime/(count+1)
 s context.Stats($namespace,"Nv4a4m6NMIzcAxASve/VH1YL4mo=")=$lb(count+1,total+%sqltime,$s(+count=0:0,1:(%sqltime-mean)**2+(count*((total/count-mean)**2+$lg(tmp,3)))/(count+1))) }
 k %objcsd(%qHandle),%objcsc(%qHandle)
 s SQLCODE=0
 quit  // close
%0Ferr d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 s %objcsc(%qHandle)=100
 quit  // error
%0Jo try { do %QExtent0f q:SQLCODE'=0
 s c1=%objcsd(%qHandle,7)
 } catch { do %0Ferr }
 q
%0Ko try { do %QExtent0f q:SQLCODE'=0
 s c1=%objcsd(%qHandle,7)
 } catch { do %0Ferr }
 q
zExtentFunc() public {
	try {
		set tSchemaPath = ##class(%SQL.Statement).%ClassPath($classname())
			set tStatement = ##class(%SQL.Statement).%New(,tSchemaPath)
			do tStatement.prepare(" SELECT ID FROM SQLUser . Pacjent")
		set tResult = tStatement.%Execute()
	}
	catch tException { if '$Isobject($Get(tResult)) { set tResult = ##class(%SQL.StatementResult).%New() } set tResult.%SQLCODE=tException.AsSQLCODE(),tResult.%Message=tException.AsSQLMessage() }
	Quit tResult }
zExtentGetInfo(colinfo,parminfo,idinfo,%qHandle,extoption=0,extinfo) public {
 s parminfo=""
	s:'($d(^oddCOM($classname(),"q","Extent",21),clientinfo)#2)&&'$s($d(^(2),clientinfo)#2&&(clientinfo'=$classname()):$d(^oddCOM(clientinfo,"q","Extent",21),clientinfo)#2||($d(^oddDEF(clientinfo,"q","Extent",21),clientinfo)#2),1:$d(^oddDEF($classname(),"q","Extent",21),clientinfo)#2) clientinfo=""
	Set:extoption extinfo=$s($d(^oddCOM($classname(),"q","Extent",38))#2:^(38),$d(^oddCOM($g(^(2),$classname()),"q","Extent",38))#2:^(38),1:$s($d(^oddDEF($g(^oddCOM($classname(),"q","Extent",2),$classname()),"q","Extent",38))#2:^(38),1:""))
	If clientinfo'="" Set colinfo=$listget(clientinfo,1),parminfo=$listget(clientinfo,2),idinfo=$listget(clientinfo,3) Quit 1
	Set colinfo="",parminfo="",idinfo=$listbuild(0)
	Set sc=$$externaltype^%apiOLE("%Library.Integer",.exttypes,"0")
	Quit:('sc) sc
	s:'($d(^oddCOM($classname(),"q","Extent",23),names)#2)&&'$s($d(^(2),names)#2&&(names'=$classname()):$d(^oddCOM(names,"q","Extent",23),names)#2||($d(^oddDEF(names,"q","Extent",23),names)#2),1:$d(^oddDEF($classname(),"q","Extent",23),names)#2) names=""
	s:'($d(^oddCOM($classname(),"q","Extent",22),captions)#2)&&'$s($d(^(2),captions)#2&&(captions'=$classname()):$d(^oddCOM(captions,"q","Extent",22),captions)#2||($d(^oddDEF(captions,"q","Extent",22),captions)#2),1:$d(^oddDEF($classname(),"q","Extent",22),captions)#2) captions=""
	For i=1:1:1 Set colinfo=colinfo_$listbuild($listbuild($listget(names,i),$piece(exttypes,",",i),$listget(captions,i)))
	Set idinfo=$listbuild(1,$classname())
	s ^oddCOM($classname(),"q","Extent",21)=$listbuild(colinfo,parminfo,idinfo)
	Quit 1 }
zExtentGetODBCInfo(colinfo,parminfo,qHandle) public {
	set version = $Select($Get(%protocol,41)>40:4,1:3)
	Set metadata=$lb(1,1,"ID",4,10,0,2,"ID","Pacjent","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,1),0)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	If version=4 {
		Set colinfo=$li(metadata,2,2+cmdlen)
	} Else {
		Set colinfo=$li(metadata,2,2)
		For i=0:1:colcount-1 Set colinfo=colinfo_$list(metadata,3+(i*10),11+(i*10))
	}
	Quit 1 }
zIDKEYCheck(K1,lockonly=0,concurrency=-1) public {
	s id=K1,exists=..%ExistsId(id) q:'exists $s('lockonly:$$Error^%apiOBJ(5797,$classname(),"IDKEY",id),1:1) s:concurrency=-1 concurrency=$select(..#DEFAULTCONCURRENCY="$zu(115,10)":$zu(115,10),1:$xecute("q "_..#DEFAULTCONCURRENCY)) if concurrency { s status=..%LockId(id,1) q:('status) status } if 'lockonly { s exists=..%ExistsId(id) d:concurrency ..%UnlockId(id,1,0) quit $s('exists:$$Error^%apiOBJ(5797,$classname(),"IDKEY",id),1:1) } else { d:concurrency ..%UnlockId(id,1,0) q 1 }
}
zIDKEYDelete(K1,concurrency=-1) public {
	Quit ..%DeleteId(.K1,concurrency) }
zIDKEYExists(K1,id="")
	s id=K1 q ..%ExistsId(K1)
	Quit
zIDKEYOpen(K1,concurrency=-1,sc) public { Set:'($data(sc)#2) sc=1
	Quit ..%OpenId(.K1,concurrency,.sc) }
zIDKEYSQLCheckUnique(pFromOrig=0,%pID,%pVals...)
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLCheckUnique")
zIDKEYSQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key IDKEY.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=%pVal(1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"SQLUser"_"."_"Pacjent"_":"_"IDKEY") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv=$d(^User.PacjentD(%pVal(1))) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Quit
zIDKEYSQLFindPKeyByConstraint(%con)
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLFindPKeyByConstraint")
zIDKEYSQLFindRowIDByConstraint(%con,pInternal=0)
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLFindRowIDByConstraint")
]]></Routine>


<Class name="User.Pacjent">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor,User.Osoba</Super>
<TimeChanged>65172,74096.587373</TimeChanged>
<TimeCreated>65172,70978.929889</TimeCreated>

<Property name="PESEL">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="11"/>
<Parameter name="MINLEN" value="11"/>
</Property>

<Property name="pacjentNaFakturze">
<Type>User.Faktura</Type>
<Cardinality>many</Cardinality>
<Inverse>listaFakturPacjenta</Inverse>
<Relationship>1</Relationship>
</Property>

<Method name="przedstawSie">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	SET zapytanie = "SELECT p.imie, p.nazwisko FROM Pacjent p WHERE p.ID = ?"
	
	SET wyniki = ##Class(%SQL.Statement).%ExecDirect(,zapytanie,..%Id())
	
	DO wyniki.%Next()
	
	Return "Faktura zostala wystawiona na " _ wyniki.%Get("imie") _ " " _ wyniki.%Get("nazwisko")
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.PacjentD</DataLocation>
<DefaultData>PacjentDefaultData</DefaultData>
<IdLocation>^User.PacjentD</IdLocation>
<IndexLocation>^User.PacjentI</IndexLocation>
<StreamLocation>^User.PacjentS</StreamLocation>
<ExtentSize>3</ExtentSize>
<Data name="PacjentDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>imie</Value>
</Value>
<Value name="3">
<Value>nazwisko</Value>
</Value>
<Value name="4">
<Value>adres</Value>
</Value>
<Value name="5">
<Value>PESEL</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="PESEL">
<Selectivity>33.3333%</Selectivity>
<AverageFieldSize>11</AverageFieldSize>
</Property>
<Property name="adres">
<Selectivity>33.3333%,kodPocztowy:33.3333%,miasto:50.0000%,ulica:50.0000%</Selectivity>
<AverageFieldSize>31.67,kodPocztowy:5,miasto:6.67,ulica:6</AverageFieldSize>
</Property>
<Property name="imie">
<Selectivity>33.3333%</Selectivity>
<AverageFieldSize>7.33</AverageFieldSize>
</Property>
<Property name="nazwisko">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>9.67</AverageFieldSize>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Routine name="User.PozycjaFaktury.1" type="INT" languagemode="0" generated="1" timestamp="65172,73146.622756"><![CDATA[
 ;User.PozycjaFaktury.1
 ;(C)InterSystems, generated for class User.PozycjaFaktury.  Do NOT edit. 06/08/2019 08:19:06PM
 ;;4E796A56;User.PozycjaFaktury
 ;
SQLUPPER(v,l) { quit $zu(28,v,7,$g(l,32767)) }
ALPHAUP(v,r) { quit $zu(28,v,6) }
STRING(v,l) { quit $zu(28,v,9,$g(l,32767)) }
SQLSTRING(v,l) { quit $zu(28,v,8,$g(l,32767)) }
UPPER(v) { quit $zu(28,v,5) }
MVR(v) { quit $zu(28,v,2) }
TRUNCATE(v,l) { quit $e(v,1,$g(l,3641144)) }
%BindExport(dev,Seen,RegisterOref,AllowedDepth,AllowedCapacity) public {
   i $d(Seen(+$this)) q 1
   Set Seen(+$this)=$this
   s sc = 1
 s proporef=..%source
 s proporef=..listaPozycji
 s proporef=..towarNaPozycji
   d:RegisterOref InitObjVar^%SYS.BINDSRV($this)
   i dev'="" s t=$io u dev i $zobjexport($this_"",3)+$zobjexport($this."%%OID",3)+$zobjexport($this,3)!1 u t
 If AllowedDepth>0 Set AllowedDepth = AllowedDepth - 1
 If AllowedCapacity>0 Set AllowedCapacity = AllowedCapacity - 1/3
 s proporef=..%source
 s proporef=..listaPozycji
       i proporef'="" s sc=1 i AllowedDepth'=0,AllowedCapacity'=0 s sc=proporef.%BindExport(dev,.Seen,RegisterOref,AllowedDepth,AllowedCapacity) q:('sc) sc
 s proporef=..towarNaPozycji
       i proporef'="" d
  . s idx="" i proporef'="" f  s elemoref=proporef.GetNext(.idx) q:idx=""  s sc=1 i AllowedDepth'=0,AllowedCapacity'=0 s sc=elemoref.%BindExport(dev,.Seen,RegisterOref,AllowedDepth,AllowedCapacity) q:('sc)
  q:('sc) sc
       i proporef'="",dev'="" s t=$io u dev i $zobjexport(proporef_"",3)+$zobjexport(proporef."%%OID",3)+$zobjexport(proporef,3)!1 u t
       if proporef'="",dev'="" d
       . s t=$io u dev i $zobjexport(5_"",3)!1 u t
       . s t=$io u dev i $zobjexport(proporef.Count()_"",3)!1 u t
     . for i=1:1:proporef.Count()  s t=$io u dev i $zobjexport(proporef.GetAt(i)_"",3)!1 u t
   Quit sc }
%BuildIndices(pIndexList="",pAutoPurge=1,pLockFlag=0,pJournalFlag=1,pStartID="",pEndID="",pIgnoreIndexList="") public {
	if ($listlength(pIndexList)=1)&&($listget(pIndexList,1)="") { return 1 }
	Set class=$classname(),tBuildFlags=1,tBuildFlags(class)=$c(0)
	Set tPtr=0,tStatus=1,pJournalFlag=''pJournalFlag
	While $listnext(pIndexList,tPtr,tIndex) {
		continue:tIndex=""
		If '$d(^oddCOM(class,"i",tIndex)) {
			Set tStatus=$select(+tStatus:$$Error^%apiOBJ(5066,class_"::"_tIndex),1:$$AppendStatus^%occSystem(tStatus,$$Error^%apiOBJ(5066,class_"::"_tIndex)))
		}
	}
	If ('tStatus) RETURN tStatus
	if ((pIndexList="")||($listfind(pIndexList,"listaPozycjiIndex"))),'$listfind(pIgnoreIndexList,"listaPozycjiIndex") { set $Extract(tBuildFlags(class),1)=$c(1) }
	Quit ..%BuildIndexInternal(.pLockFlag,.pAutoPurge,.pStartID,.pEndID,.pIndexList,.tBuildFlags,"^User.PozycjaFakturyD",0,.pJournalFlag,0) }
%BuildIndicesSegment(pStartID,pEndID,pIndexHandle=0,pLockFlag=1,pFirstRange=0,pJob="") public {
	New %tIndexBuffer
	Try {
		set tStatus=1,tLocked=0
		If pLockFlag'=2,$Ascii(pIndexHandle($classname()),1),$SortBegin(^User.PozycjaFakturyI("listaPozycjiIndex")),$increment(^CacheTempIndexBuild(pJob,1)) { Do $system.Event.Create($name(^CacheTempIndexBuild(pJob,1))) }
		Set tPrefetch=$prefetchon(^User.PozycjaFakturyD)
		If 'pFirstRange||('$data(^User.PozycjaFakturyD(pStartID))) { Set tID=$order(^User.PozycjaFakturyD(pStartID)) } Else { Set tID=pStartID }
		While tID'="",(pEndID="")||(tID']]pEndID) {
			If pLockFlag=2 {
				Set tSC = ..%LockId(tID,1)
				If ('tSC) {
					Set tStatus=$select(+tStatus:tSC,1:$$AppendStatus^%occSystem(tStatus,tSC))
					Set tID=$order(^User.PozycjaFakturyD(tID))
					Continue
				}
			}
			If pLockFlag'=2||($data(^User.PozycjaFakturyD(tID))) {
				Set tSC=..%FileIndices(tID,.pIndexHandle)
				If ('tSC) { Set tStatus=$select(+tStatus:tSC,1:$$AppendStatus^%occSystem(tStatus,tSC)) }
			}
			Do:pLockFlag=2 ..%UnlockId(tID,1,1)
			set tID=$order(^User.PozycjaFakturyD(tID))
		}
	}
	Catch tException {
		Set tSC=tException.AsStatus(),tStatus=$select(+tStatus:tSC,1:$$AppendStatus^%occSystem(tStatus,tSC))
	}
	If pLockFlag'=2,$Ascii(pIndexHandle($classname()),1) {
		If $increment(^CacheTempIndexBuild(pJob,1),-1)=0 { Do $system.Event.Delete($name(^CacheTempIndexBuild(pJob,1))) } Else { Try { Do $system.Event.Wait($name(^CacheTempIndexBuild(pJob,1))) } Catch {} }
		If $SortEnd(^User.PozycjaFakturyI("listaPozycjiIndex")) {}
	}
	Set:$Get(tPrefetch) tPrefetch=$prefetchoff(^User.PozycjaFakturyD)
	Quit tStatus }
%CheckConstraints(pID,pConstraintList="",pCheckDisabled=0,pErrorInfo) public {
	if (''..%OnDetermineClass($select(pID="":"",1:$listbuild(pID_"")),.tMSTC)) && (tMSTC '= $classname()) { quit $classmethod(tMSTC,"%CheckConstraints",pID,pConstraintList) } else { quit 1 } }
%CheckConstraintsForExtent(pConstraintList="",pCheckDisabled=0,pErrorLog) [ SQLCODE,tID ] public { New %msg,%ROWCOUNT,%ROWID,SQLCODE,tID 
	kill pErrorLog set tStatusAll = 1, pErrorLog = 0 if '$listvalid(pConstraintList) { set pConstraintList = $listfromstring(pConstraintList) }
	 ;---&sql(declare ext cursor for select %ID into :tID FROM SQLUser.PozycjaFaktury)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE, tID
	
	 ;---&sql(open ext)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE
	do %ext0o
	if SQLCODE '< 0 {
		for {
			 ;---&sql(fetch ext)
 			 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE
			do %0Do
			if SQLCODE { if SQLCODE=100 { quit } elseif SQLCODE<0 { set tStatusAll = $select(+tStatusAll:$$Error^%apiOBJ(5521,SQLCODE,$Get(%msg)),1:$$AppendStatus^%occSystem(tStatusAll,$$Error^%apiOBJ(5521,SQLCODE,$Get(%msg)))) quit } }
			set tStatus = ..%CheckConstraints(tID,pConstraintList,pCheckDisabled,.tErrorInfo)
			if ('tStatus) { set tStatusAll = $select(+tStatusAll:tStatus,1:$$AppendStatus^%occSystem(tStatusAll,tStatus)) set:pErrorLog<1000 pErrorLog = pErrorLog + 1, pErrorLog(pErrorLog) = tErrorInfo _ $Listbuild(tStatus) }
		}
		 ;---&sql(close ext)
 		 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE
		do %ext0c
	}
	quit tStatusAll }
 q
%ext0o 
 try { s SQLCODE=$s($g(%ext0108c):-101,1:0) q:SQLCODE'=0 
 n %sqltime s %sqltime=$zh
 s %ext0108d(1)=0 s:$d(%0CacheRowLimit)#2 %ext0108d(2)=%0CacheRowLimit
 s %ext0108d(3)=$zu(115,2)
 s %ext0108d(4)=0,%ext0108d(5)=""
 d:$zu(115,15) $system.ECP.Sync()
 s %ext0108c=1,SQLCODE=0
 s:$d(%sqltime) %ext0108d(6)=$g(%ext0108d(6))+$zh-%sqltime
 } catch { d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %ext0108c,%ext0108d,%ext0108E,%ext0108n,%ext0108R }
 q
%0Afirst 
 ; asl MOD# 2
 s tID=""
%0AmBk1 s tID=$o(^User.PozycjaFakturyD(tID))
 i tID="" g %0AmBdun
 goto:%ext0108d(3)'=1 %0AmBuncommitted
 if %ext0108d(3)=1 {
 	lock +^User.PozycjaFakturyD($p(tID,"||",1))#"S":$zu(115,4)
 	if $t { set %ext0108d(5)=$name(^User.PozycjaFakturyD($p(tID,"||",1)))_"#""SI""",%ext0108d(4)=1 }
 	else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.PozycjaFaktury for RowID value: "_tID ztrap "LOCK"  }
 }
 ; asl MOD# 3
 i tID'="",$d(^User.PozycjaFakturyD(tID))
 e  g %0AmCdun
%0AmBuncommitted ;
 s:$g(SQLCODE)'<0 SQLCODE=0 s %ROWCOUNT=$i(%ext0108d(1)),%ROWID=tID,%ext0108c=10
 //-- FETCH Output
 s:$d(%sqltime) %ext0108d(6)=$g(%ext0108d(6))+$zh-%sqltime
 quit
%ext0f //-- FETCH tag
 i '$g(%ext0108c) { s SQLCODE=-102 q  } i %ext0108c=100 { s SQLCODE=100 q  } s SQLCODE=0
 i $d(%ext0108d(2))#2,$g(%ext0108d(1))'<%ext0108d(2) { s SQLCODE=100,%ROWCOUNT=%ext0108d(1),%ext0108c=100 q }
 n %sqltime s %sqltime=$zh
 g %0Afirst:%ext0108c=1
%0AmCdun if $g(%ext0108d(3))=1 { if $g(%ext0108d(4))=1 { l -@%ext0108d(5) s %ext0108d(4)=0 } elseif $g(%ext0108d(4))=2 { do $classmethod($li(%ext0108d(5)),"%UnlockId",$li(%ext0108d(5),2),1,1)  s %ext0108d(4)=0 } }
 g %0AmBk1
%0AmBdun 
%0AmAdun 
 s %ROWCOUNT=%ext0108d(1),SQLCODE=100,%ext0108c=100
 s:$d(%sqltime) %ext0108d(6)=$g(%ext0108d(6))+$zh-%sqltime
 //-- no [more] data
 quit
%ext0c i '$g(%ext0108c) { s SQLCODE=-102 q  }
 n %sqltime s %sqltime=$zh
 s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%ext0108d(1)),1:0)
 if $g(%ext0108d(3))=1 { if $g(%ext0108d(4))=1 { l -@%ext0108d(5) } elseif $g(%ext0108d(4))=2 { do $classmethod($li(%ext0108d(5)),"%UnlockId",$li(%ext0108d(5),2),1,1)  } }
 s:$d(%sqltime) %ext0108d(6)=$g(%ext0108d(6))+$zh-%sqltime
 n context,tmp,count,total,mean s context=$system.Context.SQL()
 if $d(%ext0108d(6),%sqltime) {
 if $g(context.Stats)<$zu(99) { d AggregateStats^%SYS.SQLSRV() }
 s tmp=$g(context.Stats($namespace,"GMuFfwD4UdgyknvEuc6EKoL7qiI="))
 s count=$lg(tmp,1),total=$lg(tmp,2),mean=total+%sqltime/(count+1)
 s context.Stats($namespace,"GMuFfwD4UdgyknvEuc6EKoL7qiI=")=$lb(count+1,total+%sqltime,$s(+count=0:0,1:(%sqltime-mean)**2+(count*((total/count-mean)**2+$lg(tmp,3)))/(count+1))) }
 k %ext0108c,%ext0108d,%ext0108E,%ext0108n,%ext0108R
 s SQLCODE=0
 quit  // close
%0Aerr d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 s %ext0108c=100
 quit  // error
%0Do try { do %ext0f q:SQLCODE'=0
 } catch { do %0Aerr }
 q
%ComposeOid(id) public {
	set tCLASSNAME = $listget($g(^User.PozycjaFakturyD(id)),1)
	if tCLASSNAME="" { quit $select(id="":"",1:$listbuild(id_"","User.PozycjaFaktury")) }
	set tClass=$piece(tCLASSNAME,$extract(tCLASSNAME),*-1)
	set:tClass'["." tClass="User."_tClass
	quit $select(id="":"",1:$listbuild(id_"",tClass)) }
%Construct(initvalue) public {
	Set i%%Concurrency=$zu(115,10),i%%seriesCount=1,i%towarNaPozycji=$listbuild("User.Towar","pozycjaTowaru",+$this,"many",1,1)
	Kill i%%data,i%%seriesNames
	Set m%towarNaPozycji=0,M%towarNaPozycji=0
	Quit 1 }
%ConstructCloneInit(object,deep=0,cloned,location) public {
	Set i%"%%OID"=""
	If deep>0 {
		If $isobject(..%source)=1 Set r%%source=r%%source.%ConstructClone(1,.cloned),i%%source=""
		If $isobject(..towarNaPozycji)=1 {
			If ..towarNaPozycji.NotLoaded Do ..towarNaPozycji.Load()
			Set tmprel=r%towarNaPozycji,tmpref=tmprel.InverseReference,tmprel.InverseReference=$this
			Set r%towarNaPozycji=r%towarNaPozycji.%ConstructClone(1,.cloned),i%towarNaPozycji=""
			Set tmprel.InverseReference=tmpref
		}
	} Else {
		If ..towarNaPozycji'="" {
			If deep=-1 {
				Set r%towarNaPozycji="",i%towarNaPozycji=$listbuild("User.Towar","pozycjaTowaru",+$this,"many",1,1)
			} Else {
				If ..towarNaPozycji.NotLoaded Do ..towarNaPozycji.Load()
				Set tmprel=r%towarNaPozycji,tmpref=tmprel.InverseReference,tmprel.InverseReference=$this
				Set r%towarNaPozycji=r%towarNaPozycji.%ConstructClone(0,.cloned),i%towarNaPozycji=""
				Set tmprel.InverseReference=tmpref
			}
		}
	}
	Quit 1 }
%CopyDataFromModel(pData,pTypes,pSeries="") public {
 // Generated by %ZEN.DataModel.ObjectDataModel
 Set tSC = 1
 For sno = $S(pSeries="":1,1:pSeries):1:..%seriesCount {
 Set pData(sno,"liczbaSztuk") = ..liczbaSztukLogicalToDisplay(..liczbaSztuk)
 Set pData(sno,"cenaZaSztuke") = ..cenaZaSztukeLogicalToDisplay(..cenaZaSztuke)
 Set pData(sno,"listaPozycji") = ..listaPozycjiGetObjectId()
 Quit:pSeries'=""
 }
 If ('tSC) Quit tSC
 Quit tSC }
%CopyDataToModel(pData,pSeries="") public {
 // Generated by %ZEN.DataModel.ObjectDataModel
 Set tSC = 1
 For sno = $S(pSeries="":1,1:pSeries):1:..%seriesCount {
 Set ..liczbaSztuk = ..liczbaSztukDisplayToLogical($G(pData(sno,"liczbaSztuk")))
 Set ..cenaZaSztuke = ..cenaZaSztukeDisplayToLogical($G(pData(sno,"cenaZaSztuke")))
 Do ..listaPozycjiSetObjectId($G(pData(sno,"listaPozycji")))
 Quit:pSeries'=""
 }
 If ('tSC) Quit tSC
 Quit tSC }
%CreateModelInstance(pID,pConcurrency=-1,pSC) public { Set:'($data(pSC)#2) pSC=1
	Quit $S(pID="":..%New(),1:..%OpenId(pID,pConcurrency,.pSC)) }
%Delete(oid="",concurrency=-1) public {
	Quit:oid="" $$Error^%apiOBJ(5813,$classname()) Set id=$listget(oid) Quit:id="" $$Error^%apiOBJ(5812,$classname()) set traninit=0
	set $ZTRAP="%DeleteERR"
	If concurrency = -1 Set concurrency=$zu(115,10)
	If (concurrency > 4) || (concurrency < 0) || (concurrency '= (concurrency\1)) Quit $$Error^%apiOBJ(5828)
	Set class=$listget(oid,2)
	If class="" { Set sc=..%OnDetermineClass(oid,.class) Quit:('sc) sc Set oid=$select(oid="":"",1:$listbuild($listget(oid),class)_$select($listget(oid,3)'="":$listbuild($list(oid,3)),1:"")) } Else { Set class=$s(class="":"",class[".":class,$e(class)'="%":"User."_class,1:"%Library."_$e(class,2,*)) }
	If $classname()'=class Quit $classmethod(class,"%Delete",oid,concurrency)
	If +$g(%objtxSTATUS)=0 { Set traninit=1 k %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxOIDUNASSIGNED,%objtxMODIFIED,%objtxVERSION k:'$TLevel %objtxTID,%objtxID i '$zu(115,9) { s %objtxSTATUS=1 } else { TStart  s %objtxSTATUS=2 } }
	Set sc=##class(User.Towar).pozycjaTowaruOnDelete(id,concurrency) Goto:('sc) %DeleteEnd
	Set oref=$zobjoid($listget(oid,2),$listget(oid)) If $isobject(oref)=1 Do oref.%DeleteOID()
	Set sc=..%DeleteData(id,concurrency)
%DeleteEnd If traninit { If (''sc) { i $g(%objtxSTATUS)=1 { k %objtxSTATUS } else { If $Tlevel { TCommit  } k %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxOIDUNASSIGNED,%objtxMODIFIED,%objtxVERSION k:'$TLevel %objtxTID,%objtxID } } Else { i $g(%objtxSTATUS)=2 { s sc=$select(+sc:$$%TRollBack^%occTransaction(),1:$$AppendStatus^%occSystem(sc,$$%TRollBack^%occTransaction())) k %objtxTID,%objtxID } else { k %objtxSTATUS } } }
	Quit sc
%DeleteERR	Set $ZTrap="", sc=$$Error^%apiOBJ(5002,$ZE) goto %DeleteEnd }
%DeleteData(id,concurrency) public {
	Quit:id="" $$Error^%apiOBJ(5812)
	set $Ztrap="DeleteDataERR" set lockok=0,sc=""
	If concurrency {
		Lock +(^User.PozycjaFakturyD(id)#"E"):$zu(115,4)
		Set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0))
		Set:lockok=2&&($tlevel) %0CacheLock($classname(),"E")=1
		If 'lockok {
			Quit $$Error^%apiOBJ(5803,$classname())
		}
	}
	If ($Data(^User.PozycjaFakturyD(id))) {
		Set bsv0N1=^User.PozycjaFakturyD(id)
		If $data(^oddEXTR($classname())) {
			Set fc=""
			For {
				Set fc=$order(^oddEXTR($classname(),"n","%1","f",fc))
				Quit:fc=""
				Set fk=""
				For {
					Set fk=$order(^oddEXTR($classname(),"n","%1","f",fc,fk))
					Quit:fk=""
					If $get(^oddEXTR($classname(),"n","%1","f",fc,fk,61))'="" {
						Set sc=$classmethod(fc,fk_"Delete",id)
						If ('sc) { Goto DeleteDataEXIT }
					}
				}
			}
			Set fc=""
			For {
				Set fc=$order(^oddEXTR($classname(),"n","IDKEY","f",fc))
				Quit:fc=""
				Set fk=""
				For {
					Set fk=$order(^oddEXTR($classname(),"n","IDKEY","f",fc,fk))
					Quit:fk=""
					If $get(^oddEXTR($classname(),"n","IDKEY","f",fc,fk,61))'="" {
						Set sc=$classmethod(fc,fk_"Delete",id)
						If ('sc) { Goto DeleteDataEXIT }
					}
				}
			}
		}
		Set bsv0N2=$listget(bsv0N1,4)
		Kill ^User.PozycjaFakturyI("listaPozycjiIndex",$s(bsv0N2'="":bsv0N2,1:-1E14),id)
		Kill ^User.PozycjaFakturyD(id)
		Set sc=1
	}
	Else { Set sc=$$Error^%apiOBJ(5810,$classname(),id) }
DeleteDataEXIT
	If concurrency,lockok {
		Lock -(^User.PozycjaFakturyD(id)#"E")
	}
DeleteDataRET	Set $Ztrap = ""
	QUIT sc
DeleteDataERR	Set $Ztrap = "DeleteDataRET"
	Set sc = $$Error^%apiOBJ(5002,$ZE)
	Goto DeleteDataEXIT }
%Exists(oid="") public {
	Quit ..%ExistsId($listget(oid)) }
%ExistsId(id) public {
	Try { set tExists = $s(id="":0,$d(^User.PozycjaFakturyD(id)):1,1:0) } catch tException { set tExists = 0 if '(tException.%IsA("%Exception.SystemException")) { throw tException } elseif tException.Name'="<SUBSCRIPT>" { ZT $ZE } } quit tExists }
%FileIndices(id,pIndexHandle=0) public {
	Set $ZTrap="CatchError",sc=1
	Set bsv0N2=$Get(^User.PozycjaFakturyD(id))
	Set bsv0N3=$listget(bsv0N2,1)
	If bsv0N3'="" {
		Set bsv0N1=$piece(bsv0N3,$extract(bsv0N3),*-1)
		Set:bsv0N1'["." bsv0N1="User."_bsv0N1
		If bsv0N1'="" {
			Quit $classmethod(bsv0N1,"%FileIndices",id,.pIndexHandle)
		}
	}
	If ('pIndexHandle)||($Ascii($Get(pIndexHandle("User.PozycjaFaktury")),1)=1) {
		Set bsv0N4=$listget(bsv0N2,4)
		Set bsv0N5=$s(bsv0N4'="":bsv0N4,1:-1E14)
		Set ^User.PozycjaFakturyI("listaPozycjiIndex",bsv0N5,id)=$listget(bsv0N2,1)
	}
	QUIT 1
CatchError	s $ZTrap="" i $ZE'="" { s sc = $$Error^%apiOBJ(5002,$ZE) } q sc }
%GetLookupSQL(pProperty,pSQL,pSQLLookup) public {
 // Generated by %ZEN.DataModel.ObjectDataModel
 Set pSQL=""
 Set pSQLLookup=""
 Goto Dispatch
t1 // listaPozycji
 Set pSQL = "SELECT %ID FROM SQLUser.Faktura"
 Set pSQLLookup = "SELECT %ID FROM SQLUser.Faktura WHERE %ID = ?"
 Goto Done
Dispatch
 Goto $Case(pProperty,"listaPozycji":t1,:Done)
Done
 Quit 1 }
%GetPropertyInfo(pInfo,pExtended=0,pModelId="",pContainer="") public {
 // Generated by %ZEN.DataModel.ObjectDataModel
 Set tSC = 1
 Set pInfo("liczbaSztuk") = $I(pInfo)
 Set pInfo("liczbaSztuk","%ptype") = "12"
 Set pInfo("cenaZaSztuke") = $I(pInfo)
 Set pInfo("cenaZaSztuke","%ptype") = "12"
 Set pInfo("listaPozycji") = $I(pInfo)
 Set pInfo("listaPozycji","%ptype") = "2"
 If (pExtended) {
  Set tProp = "liczbaSztuk"
  Set pInfo(tProp,"%type") = "text"
  Set pInfo(tProp,"size") = 4
  Set pInfo(tProp,"required") = 1
  Set tProp = "cenaZaSztuke"
  Set pInfo(tProp,"%type") = "text"
  Set pInfo(tProp,"size") = 7
  Set pInfo(tProp,"required") = 1
  Set tProp = "listaPozycji"
  Set pInfo(tProp,"%type") = "dataCombo"
  Set pInfo(tProp,"cached") = 1
 }
 Quit tSC }
%GetPropertyList(pModelId="",pContainer="") public {
	Quit "liczbaSztuk:12,cenaZaSztuke:12,listaPozycji:2" }
%InsertBatch(objects,concurrency=0,useTransactions=0) public {
	try {
		set numerrs=0,errs="",cnt=0,ptr=0
		while $listnext(objects,ptr,data) {
			set cnt=cnt+1
			set zzc9v1=$listget(data,4)
			set lock=0
			if (useTransactions) tstart
			set id=$i(^User.PozycjaFakturyD)
			if (zzc9v1'="")&&('##class(User.Faktura).%ExistsId(zzc9v1)) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5824,"User.PozycjaFaktury.listaPozycji("_$zu(144,1,zzc9v1)_")")) }
			try {
				set tInnerException = ""
				;
				if concurrency { lock +(^User.PozycjaFakturyD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				set ^User.PozycjaFakturyD(id)=data
				set ^User.PozycjaFakturyI("listaPozycjiIndex",$s(zzc9v1'="":zzc9v1,1:-1E14),id)=$listget(data,1)
				if (useTransactions) { tcommit }
			}
			catch tInnerException {
				set newerr=$lb(cnt,tInnerException.AsStatus())
				if '($length(errs)+$length(newerr)>32767) { set numerrs=numerrs+1, errs=errs_newerr }
				if (useTransactions) && ($Tlevel) trollback
			}
			if lock lock -(^User.PozycjaFakturyD(id)#"E")
		}
	}
	catch tException {
		set newerr=$lb($g(cnt),tException.AsStatus())
		if '($length(errs)+$length(newerr)>32767) { set numerrs=numerrs+1, errs=errs_newerr }
	}
	QUIT ($lb(numerrs))_errs }
%KillExtentData()
	Kill ^User.PozycjaFakturyD
	Quit 1
%LoadData(id) public {
	New %s1
	set $ZTrap="CatchError",locked=0,$ze=""
	If i%%Concurrency=4 {
		Lock +(^User.PozycjaFakturyD(id)#"E"):$zu(115,4)
		if '$t do init s i%%Concurrency=0 return $$Error^%apiOBJ(5803,$classname())
	} ElseIf i%%Concurrency>1 {
		Lock +(^User.PozycjaFakturyD(id)#"SE"):$zu(115,4)
		if '$t do init s i%%Concurrency=0 return $$Error^%apiOBJ(5803,$classname())
		set locked = 1
	}
	If $d(^User.PozycjaFakturyD(id),%s1)#2 {
		If i%%Concurrency=2 { Lock -(^User.PozycjaFakturyD(id)#"SIE") }
		Set i%liczbaSztuk=$lg(%s1,2),i%cenaZaSztuke=$lg(%s1,3),i%listaPozycji=$lg(%s1,4)
		Quit 1
	} Else {
		If i%%Concurrency=2 { Lock -(^User.PozycjaFakturyD(id)#"SIE") }
		do init
		set sc = $$Error^%apiOBJ(5809,$classname(),id) goto CatchError
	}
CatchError	set $ZTrap = "" if $ZE'="" { s sc = $$Error^%apiOBJ(5002,$ZE) }
	If ($get(locked))&&(i%%Concurrency<3) { Lock -(^User.PozycjaFakturyD(id)#"SIE") }
	if '('sc) { set sc=$$Error^%apiOBJ(5809,$classname(),id) }
	return sc
init	Set i%cenaZaSztuke="",i%liczbaSztuk="",i%listaPozycji=""
	quit }
%LoadDataFromMemory(id,objstate,obj) public {
	New %s1
	If $d(objstate(id)) {
		Set %s1=$g(objstate(id))
		Set i%liczbaSztuk=$lg(%s1,2),i%cenaZaSztuke=$lg(%s1,3),i%listaPozycji=$lg(%s1,4)
		Quit 1
	} Else {
		Set i%cenaZaSztuke="",i%liczbaSztuk="",i%listaPozycji=""
		Quit $$Error^%apiOBJ(5809,$classname(),id)
	} }
%LoadInit(oid="",concurrency="",reset=0) public {
	If concurrency'="" Set i%%Concurrency=concurrency
	If reset {
		Kill i%%data,i%%seriesNames,i%%source,i%listaPozycji,i%towarNaPozycji
	}
	Set i%%id="",i%%seriesCount=1,i%%source="",r%%source="",r%listaPozycji="",i%towarNaPozycji=$listbuild("User.Towar","pozycjaTowaru",+$this,"many",1,1),r%towarNaPozycji=""
	If 'reset { Set i%"%%OID"=oid If oid'="" { Set $zobjoid("",$listget(oid))=$this } }
	Quit 1 }
%LockExtent(shared=0) public {
	If shared {
		Lock +(^User.PozycjaFakturyD#"S"):$zu(115,4) Quit:$t 1
		Quit $$Error^%apiOBJ(5799,$classname())
	}
	Lock +(^User.PozycjaFakturyD):$zu(115,4) Quit:$t 1
	Quit $$Error^%apiOBJ(5798,$classname()) }
%LockId(id,shared=0,timeout) public { Set:'($data(timeout)#2) timeout=$zu(115,4)
	If id="" { Quit $$Error^%apiOBJ(5812) }
	Set sc=1
	If 'shared {
		Lock +(^User.PozycjaFakturyD(id)#"E"):timeout Quit:$t 1
		Quit $$Error^%apiOBJ(5803,id_":"_$classname())
	}
	Lock +(^User.PozycjaFakturyD(id)#"SE"):timeout Quit:$t 1
	Quit $$Error^%apiOBJ(5804,id_":"_$classname()) }
%NormalizeObject() public {
	If '$system.CLS.GetModified() Quit 1
	If m%%id Set:i%%id'="" i%%id=(..%idNormalize(i%%id))
	If m%%seriesCount Set:i%%seriesCount'="" i%%seriesCount=(..%seriesCountNormalize(i%%seriesCount))
	If m%cenaZaSztuke Set:i%cenaZaSztuke'="" i%cenaZaSztuke=(..cenaZaSztukeNormalize(i%cenaZaSztuke))
	If m%liczbaSztuk Set:i%liczbaSztuk'="" i%liczbaSztuk=(..liczbaSztukNormalize(i%liczbaSztuk))
	Quit 1 }
%OnDeleteSource(pID) public {
	Quit ..%DeleteId(pID) }
%OnDetermineClass(oid,class) public {
	Set id=$listget($get(oid))
	Quit:id="" $$Error^%apiOBJ(5812)
	Set idclass=$lg($get(^User.PozycjaFakturyD(id)),1)
	If idclass="" { Set class="User.PozycjaFaktury" Quit 1 }
	Set class=$piece(idclass,$extract(idclass),*-1)
	Set:class'["." class="User."_class
	QUIT 1 }
%OnSaveSource(pSource) public {
 Set tSC = ..%Save() Set:(''tSC) ..%id = ..%Id() Quit tSC }
%PhysicalAddress(id,paddr)
	if $Get(id)="" Quit $$Error^%apiOBJ(5813,$classname())
	if (id="") { quit $$Error^%apiOBJ(5832,$classname(),id) }
	s paddr(1)=$lb($Name(^User.PozycjaFakturyD(id)),$classname(),"IDKEY","listnode",id)
	s paddr=1
	Quit 1
%PurgeIndices(idxlist="",lockExtent=0,pIgnoreIndexList="") public {
	Set locked=0,sc=1
	Try {
		if ($listlength(idxlist)=1)&&($listget(idxlist,1)="") { return 1 }
		Set tPtr=0
		While $listnext(idxlist,tPtr,tIndex) {
			continue:tIndex=""
			If '($d(^oddCOM($classname(),"i",tIndex))) {
				Set sc=$select(+sc:$$Error^%apiOBJ(5066,$classname()_"::"_tIndex),1:$$AppendStatus^%occSystem(sc,$$Error^%apiOBJ(5066,$classname()_"::"_tIndex)))
			}
		}
		If ('sc) { Return sc }
		If lockExtent {
			Set sc=..%LockExtent(0)
			If ('sc) { Return sc }
			Set locked=1
		}
		If $system.CLS.IsMthd("%OnBeforePurgeIndices") {
			Set sc=..%OnBeforePurgeIndices(.idxlist)
			If (('sc))||(($listlength(idxlist)=1)&&($listget(idxlist,1)="")) {
				If locked {
					Do ..%SQLReleaseTableLock(0)
				}
				Return sc
			}
		}
		if ((idxlist="")||($listfind(idxlist,"listaPozycjiIndex"))),'$listfind(pIgnoreIndexList,"listaPozycjiIndex") {
			kill ^User.PozycjaFakturyI("listaPozycjiIndex")
		}
		Set sc=1
		If $system.CLS.IsMthd("%OnAfterPurgeIndices") { Set sc=..%OnAfterPurgeIndices(.idxlist) }
	} Catch tException {
		Set sc=tException.AsStatus(),$ZE=""
	}
	If locked { Do ..%UnlockExtent(0) }
	Quit sc }
%SQLAcquireLock(%rowid,s=0,unlockref=0)
	new %d,gotlock
	set %d(1)=%rowid set s=$e("E",'unlockref)_$e("S",s)
	lock +^User.PozycjaFakturyD(%d(1))#s:$zu(115,4) set gotlock=$t
	if gotlock,'unlockref { set:$case($SYSTEM.Lock.ReturnCode(),2:1,4:1,:0)&&($tlevel) %0CacheLock("User.PozycjaFaktury","E")=1 }
	set:gotlock&&unlockref unlockref=unlockref+1,unlockref(unlockref)=$lb($name(^User.PozycjaFakturyD(%d(1))),"User.PozycjaFaktury",s_"D")
	QUIT gotlock
%SQLAcquireTableLock(s=0,SQLCODE,to="")
	set s=$e("S",s) set:to="" to=$zu(115,4) lock +^User.PozycjaFakturyD#s:to QUIT:$t 1 set SQLCODE=-110 if s="S" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler35",,"SQLUser"_"."_"PozycjaFaktury") } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler36",,"SQLUser"_"."_"PozycjaFaktury") } QUIT 0
	Quit
%SQLBuildIndices(pIndices="",pLockFlag=0,pStartID="",pEndID="",pIgnoreIndexList="")
	QUIT ..%BuildIndices(pIndices,,pLockFlag,,pStartID,pEndID,pIgnoreIndexList)
%SQLBuildPurgeIndexForRow(pIndices="",pActions="BP",pLockRow=1,%d,%e,pIgnoreIndexList="")
	// Purge and build index nodes for a single row using given values, return Status Code
	new sn,tSC,tLock set tSC=1,pActions=$zcvt(pActions,"U")
	try {
		if $g(%d(1))="" { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'SQLUser.PozycjaFaktury'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'SQLUser.PozycjaFaktury'"))) RETURN tSC }
		if pLockRow { if '..%SQLAcquireLock(%d(1)) { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'SQLUser.PozycjaFaktury' with %ID = '"_%d(1)_"'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'SQLUser.PozycjaFaktury' with %ID = '"_%d(1)_"'"))) RETURN tSC  } else { set tLock=1 }}
		if ((pIndices="")||($lf(pIndices,"listaPozycjiIndex"))),'$listfind(pIgnoreIndexList,"listaPozycjiIndex") {
			if pActions["P" {
				set sn(1)=%e(4) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) k ^User.PozycjaFakturyI("listaPozycjiIndex",sn(1),sn(2))
			}
			if pActions["B" {
				set sn(1)=%d(4) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) set ^User.PozycjaFakturyI("listaPozycjiIndex",sn(1),sn(2))=%d(5)
			}
		}
		if pLockRow { do ..%SQLReleaseLock(%d(1),0,0) set tLock=0 }
	}
	catch {
		if $g(tLock) { do ..%SQLReleaseLock(%d(1),0,0) }
		set tSC=$select(+tSC:$$Error^%apiOBJ(5594,$ze),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5594,$ze)))
	}
	QUIT tSC
%SQLCopyIcolIntoName()
	if %oper="DELETE" {
		set:$d(%d(1)) %f("ID")=%d(1)
		QUIT
	}
	set:$d(%d(1)) %f("ID")=%d(1) set:$a(%e,2)&&$d(%d(2)) %f("cenaZaSztuke")=%d(2) set:$a(%e,3)&&$d(%d(3)) %f("liczbaSztuk")=%d(3) set:$a(%e,4)&&$d(%d(4)) %f("listaPozycji")=%d(4) set:$a(%e,5)&&$d(%d(5)) %f("x__classname")=%d(5)
	QUIT
%SQLDefineiDjVars(%d,subs,master)
	QUIT
%SQLDelete(%rowid,%check,%tstart=1,%mv=0,%polymorphic=0)
	new bva,ce,%d,dc,%e,%ele,%itm,%key,%l,%nc,omcall,%oper,%pos,%s,sn,sqlcode,subs set %oper="DELETE",sqlcode=0,%ROWID=%rowid,%d(1)=%rowid,%e(1)=%rowid,%l=$c(0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,2) {
		new %ls lock +^User.PozycjaFakturyD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("User.PozycjaFaktury","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"SQLUser"_"."_"PozycjaFaktury",$g(%d(1))) QUIT  }
	}
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORDelete"
	do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) if sqlcode { set SQLCODE=-106 do ..%SQLEExit() QUIT  }
	if %e(5)'="" { set sn=$p(%e(5),$e(%e(5)),$l(%e(5),$e(%e(5)))-1) if "PozycjaFaktury"'=sn { new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLDelete",%rowid,%check,%tstart,%mv,1) QUIT  }}
	if '$a(%check),'$zu(115,7) do  if sqlcode set SQLCODE=sqlcode do ..%SQLEExit() QUIT  
	. new %fk,%k,%p,%st,%t,%z set %k="",%p("%1")="%d(1),",%p("IDKEY")="%d(1),"
	. for  quit:sqlcode<0  set %k=$o(^oddEXTR("User.PozycjaFaktury","n",%k)) quit:%k=""  set %t="" for  set %t=$o(^oddEXTR("User.PozycjaFaktury","n",%k,"f",%t)) quit:%t=""  set %st=(%t="User.PozycjaFaktury") set %fk="" for  set %fk=$order(^oddEXTR("User.PozycjaFaktury","n",%k,"f",%t,%fk)) quit:%fk=""  x "set %z=$classmethod(%t,%fk_""SQLFKeyRefAction"",%st,%k,$a(%check,2),"_%p(%k)_")" if %z set sqlcode=-124 quit  
	. quit:sqlcode  quit:$a(%check,2)=1
	. if $g(%e(4))'="",'$g(%0CacheLock("User.Faktura","E")),'##class(User.Faktura).%SQLExists(1,,%e(4)) set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler3",,"SQLUser"_"."_"PozycjaFaktury","listaPozycji","LISTAPOZYCJI") quit
	set ce="" for  { set ce=$order(^oddSQL("SQLUser","PozycjaFaktury","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children
	if '$a(%check,3) {
		set sn(1)=%e(4) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) k ^User.PozycjaFakturyI("listaPozycjiIndex",sn(1),sn(2))
	}
	k ^User.PozycjaFakturyD(%d(1))
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORDelete	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"PozycjaFaktury",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"PozycjaFaktury") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT
	Quit
%SQLDeleteTempStreams()
	// Delete all temporary streams
	QUIT
%SQLEExit()
	do ..%SQLUnlock() 
	do ..%SQLUnlockRef()
	if %tstart,$zu(115,1)=1,$TLEVEL { set %tstart=0 TROLLBACK 1 } kill:$g(omcall) %0CacheSQLRA QUIT  
	Quit
%SQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key %1.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=%pVal(1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"SQLUser"_"."_"PozycjaFaktury"_":"_"%1") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv=$d(^User.PozycjaFakturyD(%pVal(1))) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Quit
%SQLGetLock(pRowId,pShared=0,pUnlockRef)
	QUIT ..%SQLAcquireLock(pRowId,pShared,.pUnlockRef)
%SQLGetOld(%rowid,%d,%e,sqlcode)
	new s set %d(1)=%rowid if '$d(^User.PozycjaFakturyD(%d(1)),s) { set sqlcode=100 quit  }
	Set %e(5)=$lg(s),%e(4)=$lg(s,4)
	QUIT
%SQLGetOldAll()
	new s set %d(1)=%rowid if '$d(^User.PozycjaFakturyD(%d(1)),s) { set sqlcode=100 quit  }
	Set %e(5)=$lg(s),%e(3)=$lg(s,2),%e(2)=$lg(s,3),%e(4)=$lg(s,4)
	QUIT
%SQLGetOldIndex(%rowid,%d,pF=0,sqlcode)
	try {
		new tClass,tF,tOid,tSC
		set tOid=..%ComposeOid(%rowid)
		if ''..%OnDetermineClass(tOid,.tClass),tClass'=$classname() {
			set tF=1 do $classmethod(tClass,"%SQLGetOldIndex",%rowid,,.tF,.sqlcode)
			set:$d(tF("listaPozycji")) %d(4)=tF("listaPozycji") set:$d(tF("x__classname")) %d(5)=tF("x__classname") 
			RETURN
		}
	}
	catch { }
	new s set %d(1)=%rowid if '$d(^User.PozycjaFakturyD(%d(1)),s) { set sqlcode=100 quit  }
	Set %e(5)=$lg(s),%e(4)=$lg(s,4)
	if pF { set:$d(%d(4)) pF("listaPozycji")=%d(4) set:$d(%d(5)) pF("x__classname")=%d(5)  }
	set sqlcode=0
	QUIT
%SQLInsert(%d,%check,%inssel,%vco,%tstart=1,%mv=0)
	new bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,sqlcode,sn,subs,unlockref,icol set %oper="INSERT",sqlcode=0,%l=$c(0,0,0),unlockref=1
	if $a(%check,7) { new %diu merge %diu=%d }
	if $d(%d(1)),'$zu(115,11) { if %d(1)'="" { set SQLCODE=-111,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler6",,"ID","SQLUser"_"."_"PozycjaFaktury") QUIT ""  } kill %d(1) } 
	if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode QUIT "" }
	do ..%SQLNormalizeFields()
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  } set $zt="ERRORInsert"
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
			do:$g(%d(2))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,3)) do:$g(%d(3))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,4)) 
			quit:sqlcode<0		// A required field was missing
			quit:$zu(115,7)  set %msg=""
			if $g(%d(4))'="",'##class(User.Faktura).%SQLExists($s($a(%check,2)=1:-1,1:0),.unlockref,%d(4)) { set sqlcode=-121,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler41",,"SQLUser"_"."_"PozycjaFaktury","listaPozycji","LISTAPOZYCJI")_"  "_$g(%msg) quit  }		// Foreign Key Constraint listaPozycji
		} while 0
		if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT "" }		// A constraint failed
	}
	if '$d(%d(1)) { set %d(1)=$i(^User.PozycjaFakturyD) } elseif %d(1)>$g(^User.PozycjaFakturyD) { if $i(^User.PozycjaFakturyD,$zabs(%d(1)-$g(^User.PozycjaFakturyD))) {}} elseif $d(^User.PozycjaFakturyD(%d(1))) { set SQLCODE=-119,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler33",,"ID",%d(1),"SQLUser"_"."_"PozycjaFaktury"_"."_"ID") do ..%SQLEExit() QUIT "" }
	set:'($d(%d(5))#2) %d(5)="" set:'($d(%d(4))#2) %d(4)=""
	if '$a(%check,2) {
		new %ls lock +^User.PozycjaFakturyD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("User.PozycjaFaktury","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"SQLUser"_"."_"PozycjaFaktury",$g(%d(1))) do ..%SQLEExit() QUIT ""  }
	}
	set ^User.PozycjaFakturyD(%d(1))=$lb($g(%d(5)),%d(3),%d(2),$g(%d(4)))
	if '$a(%check,3) {
		set sn(1)=%d(4) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) set ^User.PozycjaFakturyI("listaPozycjiIndex",sn(1),sn(2))=%d(5)
	}
	lock:$a(%l) -^User.PozycjaFakturyD(%d(1))#"E"
	TCOMMIT:%tstart&&($zu(115,1)=1)
	do ..%SQLUnlockRef()
	set SQLCODE=0
	QUIT %d(1) 			// %SQLInsert
ERRORInsert	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"PozycjaFaktury",$ze)
	if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"PozycjaFaktury") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  }
	do ..%SQLEExit()
	QUIT ""
%SQLInvalid(pIcol,pVal) public {
	set:$l($g(pVal))>40 pVal=$e(pVal,1,40)_"..." do:'$d(%n) ..%SQLnBuild() set %msg=$s($g(%msg)'="":%msg_$c(13,10),1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler37",,"SQLUser"_"."_"PozycjaFaktury"_"."_$lg(%n,pIcol),$s($g(pVal)'="":$s(pVal="":"<NULL>",pVal=$c(0):"<EMPTY STRING>",1:"'"_pVal_"'"),1:"")),sqlcode=$s(%oper="INSERT":-104,1:-105)
	QUIT sqlcode }
%SQLMissing(fname)
	set sqlcode=-108,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler47",,fname,"SQLUser"_"."_"PozycjaFaktury") quit
%SQLNormalizeFields()
	new %f for %f=2,3,4 { set:$g(%d(%f))'="" %d(%f)=$select(%d(%f)=$c(0)&&$zu(115,13):"",1:%d(%f)\1) }
	QUIT
%SQLPurgeIndices(pIndices="",pLockExtent=0,pIgnoreIndexList="")
	QUIT ..%PurgeIndices(pIndices,pLockExtent,pIgnoreIndexList)
%SQLQuickBulkInsert(%nolock=0)
	// Insert multiple new rows with values %qd(icol)
	new c,call,nc,nr,%qd,r,x set:%nolock=2 %nolock=0
	set nr=$zobjexport(12) for r=1:1:nr { set nc=$zobjexport(12) kill %qd for c=1:1:nc { set:$zobjexport(17) %qd(c+1)=$zobjexport(12) } do ..%SQLQuickInsert(.%qd,%nolock) set x=$zobjexport($s(%qrc:-1,1:%ROWID),18) } QUIT
%SQLQuickBulkLoad(%rowidlist,%nolock=0,pkey=0)
	// QuickLoad multiple rows
	new i,rc set:%nolock=2 %nolock=0 set rc=0
	for i=2:1:$lg(%rowidlist)+1 { do ..%SQLQuickLoad($lg(%rowidlist,i),%nolock) if SQLCODE=0 { set rc=rc+1 } else { QUIT  } } set %ROWCOUNT=rc QUIT
	Quit
%SQLQuickBulkSave(%nolock=0)
	// Insert and/or Update multiple [new] rows with values %qd(icol)
	set x=$zobjexport(-1,18),%qrc=400,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler44",,"SQLUser"_"."_"PozycjaFaktury") QUIT
%SQLQuickBulkUpdate(%nolock=0)
	// Update multiple new rows with values %qd(icol)
	new c,call,nc,nr,%qd,r,x set:%nolock=2 %nolock=0 set nr=$zobjexport(12) for r=1:1:nr { set %rowid=$zobjexport(12),nc=$zobjexport(12) kill %qd for c=1:1:nc { set:$zobjexport(17) %qd(c+1)=$zobjexport(12) } do ..%SQLQuickUpdate(%rowid,.%qd,%nolock) set x=$zobjexport($s(%qrc:-1,1:%ROWID),18) quit:%qrc  } QUIT  
%SQLQuickDelete(%rowid,%nolock=0,pkey=0)
	// Delete row where SQLRowID=%rowid
	set:%nolock=2 %nolock=0
	do ..%SQLDelete(%rowid,$c(0,%nolock=1,0,0,0,0))
	if SQLCODE<0 { set %qrc=-SQLCODE,%ROWCOUNT=0 } else { set %ROWCOUNT=1,%qrc=SQLCODE } QUIT
	Quit
%SQLQuickInsert(d,%nolock=0,pkey=0,parentpkey=0)
	// Insert new row with values d(icol)
	set:%nolock=2 %nolock=0
	do ..%SQLQuickOdbcToLogical(.d)
	set %ROWID=..%SQLInsert(.d,$c(0,%nolock=1,0,0,0,0)),%ROWCOUNT='SQLCODE,%qrc=SQLCODE kill d QUIT
%SQLQuickLoad(%rowid,%nolock=0,pkey=0,qq=0)
	// Get fields from row where SQLRowID=%rowid
	new d,i,il,subs set:%nolock=2 %nolock=1
	if %nolock=0 { if '..%SQLAcquireLock(%rowid) { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler45",,"SQLUser"_"."_"PozycjaFaktury",%rowid),%ROWCOUNT=0 QUIT  } set:$zu(115,2) il=$zu(115,2,0) }
	new s,ul set ul=0,d(1)=%rowid if $zu(115,2)=1 { lock +^User.PozycjaFakturyD(d(1))#"S":$zu(115,4) if $t { set ul=1 } else { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler46",,"SQLUser"_"."_"PozycjaFaktury",%rowid),%ROWCOUNT=0 quit  } }
	if '$d(^User.PozycjaFakturyD(d(1)),s) { set SQLCODE=100,%qrc=100 if %nolock=0 { do:$g(il) $zu(115,2,il) }} else { set SQLCODE=0
	if qq { set d(5)=$lg(s) if d(5)'="" { new sn set sn=$p(d(5),$e(d(5)),$l(d(5),$e(d(5)))-1) if "PozycjaFaktury"'=sn { if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,1) do:$g(il) $zu(115,2,il) } kill d set:sn'["." sn="User."_sn do $classmethod(sn,"%SQLQuickLoad",%rowid,%nolock,0,1) QUIT  }}}
	set d(2)=$lg(s,3) set d(3)=$lg(s,2) set d(4)=$lg(s,4) set d(5)=$lg(s)  }
	do ..%SQLQuickLogicalToOdbc(.d)
	if SQLCODE set %ROWCOUNT=0 set:SQLCODE<0 SQLCODE=-SQLCODE lock:ul -^User.PozycjaFakturyD(d(1))#"SI" set %qrc=SQLCODE QUIT
	set:qq d=$zobjexport("User.PozycjaFaktury",18),d=$zobjexport(5,18) set i=-1 for  { set i=$o(d(i)) quit:i=""  set d=$zobjexport(d(i),18) } set %qrc=0,%ROWCOUNT=1 lock:ul -^User.PozycjaFakturyD(d(1))#"SI" if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,0) do:$g(il) $zu(115,2,il) } QUIT
	Quit
%SQLQuickLogicalToOdbc(%d)
	QUIT
%SQLQuickOdbcToLogical(%d)
	QUIT
%SQLQuickUpdate(%rowid,d,%nolock=0,pkey=0)
	// Update row with SQLRowID=%rowid with values d(icol)
	set:%nolock=2 %nolock=0
	do ..%SQLQuickOdbcToLogical(.d)
	do ..%SQLUpdate(%rowid,$c(0,%nolock=1,0,0,0,0),.d) set %ROWCOUNT='SQLCODE set:SQLCODE=100 SQLCODE=0 set %qrc=SQLCODE kill d QUIT
%SQLReleaseLock(%rowid,s=0,i=0,e="")
	new %d
	set:e="" e=1 set %d(1)=%rowid set s=$e("E",e)_$e("S",s)_$e("D",i)
	lock -^User.PozycjaFakturyD(%d(1))#s
	QUIT
%SQLReleaseTableLock(s=0,i=0)
	set s=$e("S",s)_$e("D",i) lock -^User.PozycjaFakturyD#s QUIT 1
	Quit
%SQLUnlock()
	lock:$a(%l) -^User.PozycjaFakturyD(%d(1))#"E"
	QUIT
%SQLUnlockError(cname)
	set sqlcode=-110 if %oper="DELETE" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler48",,"SQLUser"_"."_"PozycjaFaktury",cname) } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler49",,"SQLUser"_"."_"PozycjaFaktury",cname) } quit
	Quit
%SQLUnlockRef()
	for %itm=2:1:$g(unlockref) {
		if $lg(unlockref(%itm))'="%UnlockId" { lock -@$lg(unlockref(%itm))#$lg(unlockref(%itm),3) }
		else { do $classmethod($lg(unlockref(%itm),2),$lg(unlockref(%itm)),$lg(unlockref(%itm),3),1,1) }
	}
	QUIT
%SQLUpdate(%rowid,%check,%d,%vco,%tstart=1,%mv=0,%polymorphic=0,%soid)
	new %e,bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,icol,omcall,s,sn,sqlcode,subs,t,unlockref set %oper="UPDATE",sqlcode=0,%ROWID=%rowid,$e(%e,1)=$c(0),%l=$c(0,0,0),unlockref=1
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode QUIT  }
	do ..%SQLNormalizeFields()
	if $d(%d(1)),%d(1)'=%rowid { set SQLCODE=-107,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler16",,"ID","SQLUser"_"."_"PozycjaFaktury") QUIT  }
	for icol=2:1:5 { set $e(%e,icol)=$c($d(%d(icol))) }
	set %d(1)=%rowid,%e(1)=%rowid
	if '$a(%check,2) {
		new %ls lock +^User.PozycjaFakturyD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("User.PozycjaFaktury","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"SQLUser"_"."_"PozycjaFaktury",$g(%d(1))) QUIT  }
	}
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORUpdate"
	if $g(%vco)="" { do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) i sqlcode { s SQLCODE=-109 do ..%SQLEExit() QUIT  } for icol=5,4 { set:'$d(%d(icol)) %d(icol)=%e(icol) set:%d(icol)=%e(icol) $e(%e,icol)=$c(0) }} else { do ..%SQLGetOldAll() if sqlcode { set SQLCODE=-109 do ..%SQLEExit() QUIT  } for icol=2,3,4,5 { set:'$d(%d(icol)) %d(icol)=%e(icol) set:%d(icol)=%e(icol) $e(%e,icol)=$c(0) }}
	if %e(5)'="" set sn=$p(%e(5),$e(%e(5)),$l(%e(5),$e(%e(5)))-1) if "PozycjaFaktury"'=sn new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLUpdate",%rowid,%check,.%d,$g(%vco),%tstart,%mv,1) QUIT
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
			if $a(%e,2),$g(%d(2))="" { do ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,3)) }
			if $a(%e,3),$g(%d(3))="" { do ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,4)) }
			quit:sqlcode
			quit:$zu(115,7)  set %msg=""
			if $a(%e,4),$g(%updcas)'="%1",$g(%d(4))'="",'##class(User.Faktura).%SQLExists($s($a(%check,2)=1:-1,1:0),.unlockref,%d(4)) { set sqlcode=-122,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler41",,"SQLUser"_"."_"PozycjaFaktury","listaPozycji","LISTAPOZYCJI")_"  "_$g(%msg) quit  }
			quit:$a(%check,2)=1  quit:$g(%updcas)'=""
			if ($a(%e,4)),%e(4)'="",'$g(%0CacheLock("User.Faktura","E")),'##class(User.Faktura).%SQLExists(1,,%e(4)) { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler21",,"SQLUser"_"."_"PozycjaFaktury","listaPozycji","LISTAPOZYCJI") quit  }
		} while 0
		if sqlcode { set SQLCODE=sqlcode do ..%SQLEExit() QUIT  }
	}
	if $s($a(%e,2):1,$a(%e,3):1,$a(%e,4):1,1:$a(%e,5)) {
		set ^User.PozycjaFakturyD(%d(1))=$listupdate($g(^User.PozycjaFakturyD(%d(1))),1,$a(%e,5):%d(5),$a(%e,3):%d(3),$a(%e,2):%d(2),$a(%e,4):%d(4))
	}
	if '$a(%check,3) { 
		if $a(%e,4)||$a(%e,5) {	// listaPozycjiIndex index map
			if $a(%e,4) { set sn(1)=%e(4) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) k ^User.PozycjaFakturyI("listaPozycjiIndex",sn(1),sn(2)) }
			set sn(1)=%d(4) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) set ^User.PozycjaFakturyI("listaPozycjiIndex",sn(1),sn(2))=%d(5)
		}
	}
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	do ..%SQLUnlockRef()
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORUpdate	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"PozycjaFaktury",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"PozycjaFaktury") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT  
	Quit
%SQLValidateFields(sqlcode)
	if $g(%d(3))'="",'($select(%d(3)=$c(0)&&$zu(115,13):1,$isvalidnum(%d(3),0,1,10):1,'$isvalidnum(%d(3)):$$Error^%apiOBJ(7207,%d(3)),%d(3)<1:$$Error^%apiOBJ(7204,%d(3),1),1:$$Error^%apiOBJ(7203,%d(3),10))) { set sqlcode=..%SQLInvalid(3+1,%d(3)) } 
	if $g(%d(2))'="",'($select(%d(2)=$c(0)&&$zu(115,13):1,$isvalidnum(%d(2),0,1,10000):1,'$isvalidnum(%d(2)):$$Error^%apiOBJ(7207,%d(2)),%d(2)<1:$$Error^%apiOBJ(7204,%d(2),1),1:$$Error^%apiOBJ(7203,%d(2),10000))) { set sqlcode=..%SQLInvalid(2+1,%d(2)) } 
	QUIT 'sqlcode
%SQLnBuild() public {
	set %n=$lb(,"ID","cenaZaSztuke","liczbaSztuk","listaPozycji","x__classname")
	QUIT }
%Save(related=1) public {
	Set $ZTrap="%SaveERR"
	New %objTX Set sc=1,traninit=0 If '$data(%objTX2) New %objTX2 Set %objTX2=1
	If +$g(%objtxSTATUS)=0 { Set traninit=1 k %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxOIDUNASSIGNED,%objtxMODIFIED,%objtxVERSION k:'$TLevel %objtxTID,%objtxID i '$zu(115,9) { s %objtxSTATUS=1 } else { TStart  s %objtxSTATUS=2 } }
	If $get(%objTX2(+$this)) Set sc=..%BuildObjectGraph(1) Quit:('sc) sc Set intRef=+$this,objValue=$get(%objTX(1,intRef,1)),sc=..%SerializeObject(.objValue,1) Set:(''sc) %objTX(1,intRef,1)=objValue Quit sc
	Set sc=..%BuildObjectGraph(related+2) If ('sc) ZTrap "SG"
	If '$data(%objTX(2)) s sc=1 GoTo %SaveCOMMIT
	Set %objTX(3)=0,intRef="" For  Set intRef=$order(%objTX(2,intRef)) Quit:intRef=""  If '$data(%objTX(1,intRef,2)) Set %objTX(3,$increment(%objTX(3)))=%objTX(1,intRef) Kill %objTX(2,intRef)
	For ptr=1:1 Quit:ptr>%objTX(3)  Set objRef=%objTX(3,ptr),objValue=$get(%objTX(1,+objRef,1)),sc=objRef.%SerializeObject(.objValue) Do  Set %objTX(1,+objRef,1)=objValue Kill %objTX(1,+objRef,3) Do $system.CLS.SetModified(objRef,0)
	. If ('sc) ZTrap "SG"
	. i $g(%objtxSTATUS)=2 { Set %objtxMODIFIED(+objRef)=$system.CLS.GetModifiedBits(objRef) }
	. Set intSucc="" For  Set intSucc=$order(%objTX(1,+objRef,3,intSucc)) Quit:intSucc=""  Kill %objTX(1,+objRef,3,intSucc),%objTX(1,intSucc,2,+objRef) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$increment(%objTX(3)))=%objTX(1,intSucc) Kill %objTX(2,intSucc)
	Kill %objTX(3) Set %objTX(3)=0 For  Set pserial=0 Do  Quit:'pserial
	. Set intRef="" For  Set intRef=$order(%objTX(2,intRef)) Quit:intRef=""  Set intPred="" For  Set intPred=$order(%objTX(1,intRef,2,intPred)) Quit:intPred=""  If $get(%objTX(1,intPred,6))=1 Set objValue=$get(%objTX(1,intPred,1)),sc=(%objTX(1,intPred)).%SerializeObject(.objValue,1) s:('sc) %objTX(2,intPred,1)=sc If (''sc) Set pserial=1,%objTX(1,intPred,1)=objValue Do
	. . Set intSucc="" For  Set intSucc=$order(%objTX(1,intPred,3,intSucc)) Quit:intSucc=""  Kill %objTX(1,intPred,3,intSucc),%objTX(1,intSucc,2,intPred) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$i(%objTX(3)))=%objTX(1,intSucc) Kill %objTX(2,intSucc)
	. . For ptr=1:1 Quit:ptr>%objTX(3)  Set objSerialize=%objTX(3,ptr),objValue=$get(%objTX(1,+objSerialize,1)),sc=objSerialize.%SerializeObject(.objValue) Do  Set %objTX(1,+objSerialize,1)=objValue Kill %objTX(1,+objSerialize,3) Do $system.CLS.SetModified(objSerialize,0)
	. . . If ('sc) ZTrap "SG"
	. . . i $g(%objtxSTATUS)=2 { Set %objtxMODIFIED(+objSerialize)=$system.CLS.GetModifiedBits(objSerialize) }
	. . . Set intSucc="" For  Set intSucc=$order(%objTX(1,+objSerialize,3,intSucc)) Quit:intSucc=""  Kill %objTX(1,+objSerialize,3,intSucc),%objTX(1,intSucc,2,+objSerialize) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$i(%objTX(3)))=%objTX(1,intSucc) Kill %objTX(2,intSucc)
	. . Kill %objTX(3) Set %objTX(3)=0
	If $data(%objTX(2))>2 {
		Set sc=$$Error^%apiOBJ(5827,$classname())
		set intRef="" for  set intRef=$order(%objTX(2,intRef)) quit:intRef=""  if ('$Get(%objTX(2,intRef,1),1)) set sc=$$EmbedStatus^%apiOBJ(sc,%objTX(2,intRef,1))
	 	ZTrap "SG"
	}
	Set cmd="" For  Set cmd=$order(%objTX(9,cmd)) Quit:cmd=""  Xecute cmd
%SaveCOMMIT	If traninit { i $g(%objtxSTATUS)=1 { k %objtxSTATUS } else { If $Tlevel { TCommit  } k %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxOIDUNASSIGNED,%objtxMODIFIED,%objtxVERSION k:'$TLevel %objtxTID,%objtxID } }
	Do $system.CLS.SetModified(0) Quit sc
%SaveERR	Set $ZTrap="" If $extract($zerror,1,5)'="<ZSG>" Set sc=$$Error^%apiOBJ(5002,$ZE)
	If $get(traninit) { i $g(%objtxSTATUS)=2 { s sc=$select(+sc:$$%TRollBack^%occTransaction(),1:$$AppendStatus^%occSystem(sc,$$%TRollBack^%occTransaction())) k %objtxTID,%objtxID } else { k %objtxSTATUS } }
	Quit sc }
%SaveData(id) public {
	try {
		set id=$listget(i%"%%OID") if id'="" { set insert=0,idassigned=1 } else { set insert=1,idassigned=0 }
		set lock=0,lockok=0,tSharedLock=0
		if 'idassigned { set id=$i(^User.PozycjaFakturyD) Set $zobjoid("User.PozycjaFaktury",id)=$this,.."%%OID"=$lb(id_"","User.PozycjaFaktury") set:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this)="" }
		if (i%listaPozycji'="")&&('##class(User.Faktura).%ExistsId(i%listaPozycji)) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5824,"User.PozycjaFaktury.listaPozycji("_$zu(144,1,i%listaPozycji)_")")) }
		set zzc10v1=$s(i%listaPozycji'="":i%listaPozycji,1:-1E14)
		try {
			set tInnerException = ""
			;
			if 'insert {
				if (i%%Concurrency<4)&&(i%%Concurrency) { lock +(^User.PozycjaFakturyD(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lockok=2&&($tlevel) %0CacheLock($classname(),"E")=1 if lockok { set lock=1 } else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if ('$Data(^User.PozycjaFakturyD(id))) {
					set insert=1
					if lock { lock -(^User.PozycjaFakturyD(id)#"E") set (lock,lockok) = 0 }
				}
			}
			if insert {
				if ('lockok&&..%Concurrency&&$tlevel)||(i%%Concurrency=4) {  lock +(^User.PozycjaFakturyD(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:(lockok=2&&(i%%Concurrency'=4)) %0CacheLock($classname(),"E")=1 set:lockok lock=1 if 'lockok { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if i%%Concurrency=3 { lock +(^User.PozycjaFakturyD(id)#"ES") set tSharedLock=1 }
				set ^User.PozycjaFakturyD(id)=$lb("",i%liczbaSztuk,i%cenaZaSztuke,i%listaPozycji)
				set ^User.PozycjaFakturyI("listaPozycjiIndex",zzc10v1,id)=""
			}
			else {
				set zzc31v1=$listget(^User.PozycjaFakturyD(id),4)
				if (i%listaPozycji'=zzc31v1) {
					kill ^User.PozycjaFakturyI("listaPozycjiIndex",$s(zzc31v1'="":zzc31v1,1:-1E14),id)
					set ^User.PozycjaFakturyI("listaPozycjiIndex",zzc10v1,id)=""
				}
				set ^User.PozycjaFakturyD(id)=$lb("",i%liczbaSztuk,i%cenaZaSztuke,i%listaPozycji)
			}
			set tStatus = 1
		}
		catch tInnerException {
			if ('idassigned) { Set $zobjoid("",$listget(i%"%%OID"))="" Set $this."%%OID" = "" kill:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this) }
			if (tSharedLock) {  lock -(^User.PozycjaFakturyD(id)#"ES") } elseif (lockok=1)&&(insert)&&(i%%Concurrency=4) {  lock -(^User.PozycjaFakturyD(id)) }
		}
		if lock lock -(^User.PozycjaFakturyD(id)#"E")
		if $Isobject(tInnerException) { throw tInnerException }
	}
	catch tException {
		set tStatus = tException.AsStatus()
	}
	quit tStatus }
%SaveDirect(id="",idList="",data,concurrency=-1) public {
	try {
		set zzc5v1=$listget(data,4)
		set zzc5v2=$listget(data,1)
		if concurrency=-1 { set concurrency=$zu(115,10) }
		if id'="" { set insert=0,idassigned=1 } else { set insert=1,idassigned=0 }
		set lock=0,tSharedLock=0
		if 'idassigned { set id=$i(^User.PozycjaFakturyD) }
		if (zzc5v1'="")&&('##class(User.Faktura).%ExistsId(zzc5v1)) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5824,"User.PozycjaFaktury.listaPozycji("_$zu(144,1,zzc5v1)_")")) }
		set zzc10v1=$s(zzc5v1'="":zzc5v1,1:-1E14)
		try {
			set tInnerException = ""
			;
			if 'insert {
				if concurrency { lock +(^User.PozycjaFakturyD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if ('$Data(^User.PozycjaFakturyD(id))) {
					set insert=1
					if lock { lock -(^User.PozycjaFakturyD(id)#"E") set (lock,lockok) = 0 }
				}
			}
			if insert {
				if concurrency { lock +(^User.PozycjaFakturyD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				set ^User.PozycjaFakturyD(id)=data
				set ^User.PozycjaFakturyI("listaPozycjiIndex",zzc10v1,id)=zzc5v2
			}
			else {
				set zzc31v1=$li(idList,1)
				set zzc31v2=$listget(^User.PozycjaFakturyD(zzc31v1),4)
				if (zzc5v1'=zzc31v2) {
					kill ^User.PozycjaFakturyI("listaPozycjiIndex",$s(zzc31v2'="":zzc31v2,1:-1E14),zzc31v1)
					set ^User.PozycjaFakturyI("listaPozycjiIndex",zzc10v1,id)=zzc5v2
				}
				set ^User.PozycjaFakturyD(id)=data
			}
			set tStatus = 1
		}
		catch tInnerException {
		}
		if lock lock -(^User.PozycjaFakturyD(id)#"E")
		if $Isobject(tInnerException) { throw tInnerException }
	}
	catch tException {
		set tStatus = tException.AsStatus()
	}
	quit tStatus }
%SaveIndices(pStartId="",pEndId="",lockExtent=0) public {
	If lockExtent {
		Set sc=..%LockExtent(0)
		Quit:('sc) sc
	}
	s id=$order(^User.PozycjaFakturyD(pStartId),-1),tEndId=$S(pEndId'="":pEndId,1:pStartId)
BSLoop	s id=$O(^User.PozycjaFakturyD(id)) g:(id="")||(id]]tEndId) BSLoopDun
	Set bsv0N1=$Get(^User.PozycjaFakturyD(id))
	Set bsv0N2=$listget(bsv0N1,4)
	Set bsv0N3=$s(bsv0N2'="":bsv0N2,1:-1E14)
	Set ^User.PozycjaFakturyI("listaPozycjiIndex",bsv0N3,id)=$listget(bsv0N1,1)
	g BSLoop
BSLoopDun
	If lockExtent { Do ..%UnlockExtent(0) }
	Quit 1
CatchError	Set $ZTrap=""
	If $ZE'="" {
		Set sc = $$Error^%apiOBJ(5002,$ZE)
	}
	If lockExtent { Do ..%UnlockExtent(0) }
	Quit sc }
%SerializeObject(serial,partial=0) public {
	try {
		If $get(%objTX2(+$this)) { Set partial = 1 } ElseIf ('partial) { Set %objTX2(+$this) = 1 }
		Set sc=..%ValidateObject(,0) Throw:('sc) ##class(%Exception.StatusException).ThrowIfInterrupt(sc)
		Set sc=..%NormalizeObject() Throw:('sc) ##class(%Exception.StatusException).ThrowIfInterrupt(sc)
		If r%listaPozycji'="" { Set:'$data(%objTX(1,+r%listaPozycji,1)) %objTX(1,+r%listaPozycji)=r%listaPozycji,%objTX(1,+r%listaPozycji,1)=..listaPozycjiGetObject(1),%objTX(1,+r%listaPozycji,6)=1 Set M%listaPozycji=1,i%listaPozycji=$listget(%objTX(1,+r%listaPozycji,1)) }
		If r%towarNaPozycji'="" { Set:'$data(%objTX(1,+r%towarNaPozycji,1)) %objTX(1,+r%towarNaPozycji)=r%towarNaPozycji,%objTX(1,+r%towarNaPozycji,1)=..towarNaPozycjiGetObject(1),%objTX(1,+r%towarNaPozycji,6)=2 Set M%towarNaPozycji=1,i%towarNaPozycji=$listget(%objTX(1,+r%towarNaPozycji,1)) }
		s:$g(%objtxSTATUS)=2 %objtxLIST(+$this)=$this
		Set id=$listget(serial),sc=..%SaveData(.id) If ('sc) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt(sc) }
		Set serial=(..%Oid())
		if 'partial {
			Set %objTX2(+$this) = 0
		}
		set sc=1
	}
	catch tException {
		If 'partial { Set %objTX2(+$this) = 0 }
		set sc = tException.AsStatus()
	}
	Quit sc }
%AddToSaveSet(depth=3,refresh=0) public {
	If $data(%objTX(1,+$this)) && ('refresh) Quit 1
	Set sc=1,intOref=+$this
	If refresh Set intPoref="" For  Set intPoref=$order(%objTX(1,intOref,2,intPoref)) Quit:intPoref=""  Kill %objTX(1,intPoref,3,intOref),%objTX(1,intOref,2,intPoref)
	Set serial=..%Oid(),%objTX(1,intOref)=$this,%objTX(1,intOref,1)=serial,%objTX(1,intOref,6)=1 If (serial '= "") && (depth<2) { Quit 1 } Else { Set %objTX(7,intOref)=1 }
	Set Poref=r%%source If Poref'="",'$data(%objTX(1,+Poref)) Set %objTX(6,$i(%objTX(6)))=Poref
	Set Poref=r%listaPozycji If Poref'="" Set:'$data(%objTX(1,+Poref)) %objTX(6,$i(%objTX(6)))=Poref Set %objTX(8,$i(%objTX(8)))=$lb(+Poref,intOref,2)
	Set Poref=r%towarNaPozycji If Poref'="",'$data(%objTX(1,+Poref)) Set %objTX(6,$i(%objTX(6)))=Poref
exit	Quit sc }
%SortBegin(idxlist="",excludeunique=0)
	if $select(idxlist="":1,$listfind(idxlist,"listaPozycjiIndex"):1,1:0) If $SortBegin(^User.PozycjaFakturyI("listaPozycjiIndex"))
	Quit 1
%SortEnd(idxlist="",commit=1,excludeunique=0) public {
	if $select(idxlist="":1,$listfind(idxlist,"listaPozycjiIndex"):1,1:0) If $SortEnd(^User.PozycjaFakturyI("listaPozycjiIndex"),commit)
	Quit 1 }
%UnlockExtent(shared=0,immediate=0) public {
	If 'shared {
		If 'immediate {
			Lock -^User.PozycjaFakturyD
			 Quit 1
		}
		Lock -^User.PozycjaFakturyD#"I"
		Quit 1
	}
	If 'immediate {
		Lock -^User.PozycjaFakturyD#"S"
		Quit 1
	}
	Lock -^User.PozycjaFakturyD#"SI"
	Quit 1 }
%UnlockId(id,shared=0,immediate=0) public {
	If 'shared {
		If 'immediate {
			Lock -(^User.PozycjaFakturyD(id)#"E")
			Quit 1
		}
		Lock -(^User.PozycjaFakturyD(id)#"IE")
		Quit 1
	}
	If 'immediate {
		Lock -(^User.PozycjaFakturyD(id)#"SE")
		Quit 1
	}
	Lock -(^User.PozycjaFakturyD(id)#"SIE")
	Quit 1 }
%ValidateIndices(idxList="",autoCorrect=0,lockOption=1,multiProcess=1)
	if '$listvalid(idxList) { QUIT $$Error^%apiOBJ(5591,"##class(User.PozycjaFaktury).%ValidateIndices()","idxList",""""" or a $list of index names") }
	if $case(autoCorrect,1:0,0:0,:1) { QUIT $$Error^%apiOBJ(5591,"##class(User.PozycjaFaktury).%ValidateIndices()","autoCorrect","'0' or '1'") }
	if $case(lockOption,2:0,1:0,0:0,:1) { QUIT $$Error^%apiOBJ(5591,"##class(User.PozycjaFaktury).%ValidateIndices()","lockOption","'0', '1' or '2'") }
	if $case(multiProcess,1:0,0:0,:1) { QUIT $$Error^%apiOBJ(5591,"##class(User.PozycjaFaktury).%ValidateIndices()","multiProcess","'0' or '1'") }
	QUIT $$ValidateIndices^%SYS.SECURITY("User.PozycjaFaktury",idxList,autoCorrect,lockOption,multiProcess)
%ValidateObject(force=0,checkserial=1) public {
	set sc=1
	If '$system.CLS.GetModified() Quit sc
	If m%%id Set iv=..%id If iv'="" Set rc=(..%idIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"%id",iv)
	If m%%seriesCount Set iv=..%seriesCount If iv'="" Set rc=(..%seriesCountIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"%seriesCount",iv)
	Set iv=..cenaZaSztuke If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::cenaZaSztuke("_$this_",ID="_..%Id()_")"),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%cenaZaSztuke Set rc=(..cenaZaSztukeIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"cenaZaSztuke",iv)
	Set iv=..liczbaSztuk If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::liczbaSztuk("_$this_",ID="_..%Id()_")"),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%liczbaSztuk Set rc=(..liczbaSztukIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"liczbaSztuk",iv)
	Quit sc }
zPopulate(count=10,verbose=0,DeferIndices=1,objects=0,tune=1,deterministic=0)
	New errcnt,i,id,keepobjects,obj,rss1,save,saved
	Set saved=0,keepobjects=0,errcnt=0
	Do $ZU(165,0,$S(deterministic:481516,1:$RANDOM(99999999)))
	If objects Set keepobjects=1,objects=0
	If DeferIndices Do ..%SortBegin("",1)
	s ^CacheTempNodes("gbl",$j,$name(^CacheTempPop($j)))=$lb($h,$username) Kill ^CacheTempPop($j)
	d ##class(%Library.PopulateUtils).BuildReferenceSample("User.Faktura",.rss1)
	For i=1:1:count Do  if errcnt>1000 write:verbose !,"over 1,000 errors encountered with no successful save - exiting" quit
	. Set obj=##class(User.PozycjaFaktury).%New()
	. Set obj.%id=""
	. Set obj.%seriesNames=""
	. Set obj.cenaZaSztuke=##class(%Library.PopulateUtils).Integer(1,10000)
	. Set obj.liczbaSztuk=##class(%Library.PopulateUtils).Integer(1,10)
	. Set id=##class(%Library.PopulateUtils).ArrayElement(.rss1) If id'="",##class(User.Faktura).%ExistsId(id) Do obj.listaPozycjiSetObjectId(id)
	. If 'keepobjects Do
	. . Set save=obj.%Save()
	. . If (''save) Set saved=saved+1,errcnt=0 If verbose Write !,"Object saved...",saved
	. . If ('save) set errcnt=errcnt+1 if verbose Do DisplayError^%apiOBJ(save)
	. If keepobjects Set objects($Increment(objects))=obj
	. Set obj=""
	k ^CacheTempNodes("gbl",$j,$name(^CacheTempPop($j))) Kill ^CacheTempPop($j)
	If DeferIndices Do ..%SortEnd(,,1)
	If tune Do TuneTable^%apiSQL("SQLUser.PozycjaFaktury",1,verbose,.%msg,1)
	Quit saved
zXMLDTD(top,format,input,dtdlist)
 Quit ##class(%XML.Implementation).XMLDTD("User.PozycjaFaktury",.top,.format,.input,.dtdlist)
zXMLExportInternal()
 New tag,summary,attrsVal,savelocal,aval,k,tmpPrefix,prefixDepth,hasNoContent,hasElement,topAttrs,beginprefix,endprefix,savexsiAttrs,initialxsiAttrs,initlist,initialCR,inlineFlag,popAtEnd,saveTopPrefix,saveTypesPrefix,saveAttrsPrefix,saveUsePrefix,initlist
 Set $ztrap="XMLExportInternalTrap",popAtEnd=0
 Set summary=summaryArg,initialxsiAttrs=xsiAttrs
 If group Quit $$Error^%apiOBJ(6386,"User.PozycjaFaktury")
 If indentFlag Set initialCR=($extract(currentIndent,1,2)=$c(13,10))
 Set id=createId
 Set temp=""
 If id'="" {
   If $piece($get(idlist(+$this)),",",2)'="" Quit 1
   Set idlist(+$this)=id_",1"
 }
 If encoded Set initlist=$lb($get(oreflist),inlineFlagArg),oreflist=1,inlineFlag=inlineFlagArg
 If 'nocycle,('encoded||inlineFlag) {
   If $data(oreflist($this)) Quit $$Error^%apiOBJ(6296,"User.PozycjaFaktury")
   Set oreflist($this)=""
 }
 Set tag=$get(topArg)
 Set tmpi=(($get(typeAttr)'="")&&(typeAttr'="User.PozycjaFaktury"))
 If $IsObject(namespaces) {
     Set popAtEnd=1,saveTopPrefix=topPrefix,saveTypesPrefix=typesPrefix,saveAttrsPrefix=attrsPrefix,saveUsePrefix=usePrefix
     Set sc=namespaces.PushNodeForExport("",$get(local,0),(encoded||tmpi),"",,.topPrefix,.topAttrs,.typesPrefix,.attrsPrefix,.usePrefix)
     If 'sc Quit sc
   Set beginprefix=$select(namespaces.ElementQualified&&usePrefix:typesPrefix,1:"")
   If topAttrs'="" Set temp=temp_" "_topAttrs
   If tag="" Set tag="PozycjaFaktury"
   Set xsitype=namespaces.OutputTypeAttribute
 } Else {
   Set saveTopPrefix=topPrefix,saveTypesPrefix=typesPrefix,saveAttrsPrefix=attrsPrefix,saveUsePrefix=usePrefix
   Set typesPrefix=namespaces If (typesPrefix'=""),($extract(typesPrefix,*)'=":") Set typesPrefix=typesPrefix_":"
   If 'encoded Set namespaces=""
   Set (topPrefix,attrsPrefix,topAttrs,beginprefix)=""
   If tag="" Set tag=typesPrefix_"PozycjaFaktury"
   Set xsitype=0
 }
 Set local=+$get(local),savelocal=local
 Set endprefix="</"_beginprefix,beginprefix="<"_beginprefix
 If tmpi Set temp=temp_" "_xsiPrefix_"type="""_typesPrefix_"PozycjaFaktury"""_xsiAttrs,xsiAttrs=""
   If id'="" Set temp=" "_$select($get(soap12):soapPrefix_"id",1:"id")_"=""id"_id_""""_temp
 If encoded Set temp=temp_xsiAttrs,xsiAttrs=""
 If indentFlag Set %xmlmsg=currentIndent if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg } Set currentIndent=$select(initialCR:"",1:$c(13,10))_currentIndent_indentChars
 If tag[":" Set topPrefix=$piece(tag,":"),tag=$piece(tag,":",2)  If topPrefix'="" Set topPrefix=topPrefix_":"
 Set %xmlmsg="<"_topPrefix_tag_temp if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set attrsVal=attrsArg,attrsArg="" Set %xmlmsg=attrsVal if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set %xmlmsg=">" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..liczbaSztuk
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"liczbaSztuk"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"long""",1:"")_">"_val_endprefix_"liczbaSztuk>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..cenaZaSztuke
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"cenaZaSztuke"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"long""",1:"")_">"_val_endprefix_"cenaZaSztuke>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set aval=..towarNaPozycji
 Set k="" Set:deepFlag val=aval.GetNext(.k) If k'="" {
   If encoded {
     If indentFlag Set %xmlmsg=currentIndent Set currentIndent=currentIndent_indentChars if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
     Set temp="",temp1=$parameter("User.Towar","NAMESPACE")
     Set temp1=$select((temp1'="")&&$IsObject(namespaces):namespaces.GetNamespacePrefix(temp1,.temp),1:typesPrefix)
     If soap12 { Set %xmlmsg=beginprefix_"towarNaPozycji"_$select(xsitype:"",1:" "_soapPrefix_"itemType="""_temp1_$select($parameter("User.Towar","XMLSUMMARY")'="":"s_Towar",1:"Towar")_"""")_" "_soapPrefix_"arraySize="""_aval.Count()_""""_""_temp_">" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
     } Else { Set %xmlmsg=beginprefix_"towarNaPozycji "_$select(xsitype:xsiPrefix_"type="""_soapPrefix_"Array""",1:soapPrefix_"arrayType="""_temp1_$select($parameter("User.Towar","XMLSUMMARY")'="":"s_Towar",1:"Towar")_"["_aval.Count()_"]""")_""_temp_">" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg } }
   }
   Else {
     If indentFlag Set %xmlmsg=currentIndent Set currentIndent=currentIndent_indentChars if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
     Set %xmlmsg=beginprefix_"towarNaPozycji>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
   }
   While k'="" {
     If $IsObject(val) {
       Set id=""
       If encoded,'inlineFlag {
         Set temp=$select($parameter("User.Towar","XMLSUMMARY")'="":-1,1:1)
         Set id=+$get(idlist(temp*val))
         If 'soap12 , (id=0) Set id=$increment(idlist),oreflist(temp*id)=val,idlist(temp*val)=id
       }
       If +id'=0 {
         Set %xmlmsg=currentIndent_beginprefix_"Towar "_$select(soap12:soapPrefix_"ref=""",1:"href=""#")_"id"_id_""" />" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
       } Else { if id=0 Set id=$increment(idlist)
         Set topArg="Towar",summaryArg=1,group=0,createId=$get(id),typeAttr=$select(encoded||xsitype:"*",1:"User.Towar"),local=1,savexsiAttrs=xsiAttrs
         Set sc=val.XMLExportInternal() Goto:'sc XMLExportExit Set xsiAttrs=savexsiAttrs
         If 'encoded Do aval.%UnSwizzleAt(k)
       }
     } Else {
       Set %xmlmsg=currentIndent_beginprefix_"Towar "_xsiPrefix_"nil=""true"""_xsiAttrs_"/>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
     }
     Set val=aval.GetNext(.k)
   }
   If indentFlag Set currentIndent=$extract(currentIndent,1,*-$length(indentChars)) Set %xmlmsg=currentIndent if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
   Set %xmlmsg=endprefix_"towarNaPozycji>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 If indentFlag { Set currentIndent=$extract(currentIndent,1,*-$length(indentChars)) Set %xmlmsg=currentIndent if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }}
 Set %xmlmsg="</"_topPrefix_tag_">"
 if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg } If indentFlag,'initialCR if $data(%xmlBlock) { Set %xmlmsg="" Do xeWriteLine^%occXMLInternal } else { write ! } Set $extract(currentIndent,1,2)=""
 If '$IsObject(namespaces) || (popAtEnd=1) Set topPrefix=saveTopPrefix,typesPrefix=saveTypesPrefix,attrsPrefix=saveAttrsPrefix,usePrefix=saveUsePrefix
 If popAtEnd Do namespaces.PopNode()
 If encoded Set oreflist=$list(initlist),inlineFlag=$list(initlist,2)
 If 'encoded||inlineFlag {
   If 'nocycle Kill oreflist($this)
 } ElseIf $get(oreflist)'=1 {
   Set oreflist=1
   Set id=$order(oreflist(""))
   While id'="" {
     Set val=oreflist(id)
     Kill oreflist(id)
     Set group=0,createId=$zabs(id),typeAttr="*",local=savelocal,xsiAttrs=initialxsiAttrs
     If $classname(val)="User.PozycjaFaktury" {
       Set attrsArg=attrsVal
       Set topArg=tag,summaryArg=0
       Set sc=val.XMLExportInternal()
     } Else {
       Set topArg="",summaryArg=(id<0)
       Set sc=val.XMLExportInternal()
     }
     If 'sc Quit
     Set id=$order(oreflist(""))
   }
   Kill oreflist
 }
 Quit sc
XMLExportInternalTrap Set $ztrap=""
 If $data(val) , $IsObject(val) , ($piece($ze,">",1)="<METHOD DOES NOT EXIST") {
   Set sc=$$Error^%apiOBJ(6249,$classname(val))
 } Else {
   Set sc=$$Error^%apiOBJ(5002,$ze)
 }
XMLExportExit 
 If '$IsObject(namespaces) || (popAtEnd=1) Set topPrefix=saveTopPrefix,typesPrefix=saveTypesPrefix,attrsPrefix=saveAttrsPrefix,usePrefix=saveUsePrefix
 If popAtEnd Do namespaces.PopNode()
 Quit sc
zXMLGetSchemaImports(imports,classes)
 Quit ##class(%XML.Implementation).XMLGetSchemaImports("User.PozycjaFaktury",.imports,.classes)
zXMLImportAttributes()
 ;
 Quit 1
XMLImportAttrErr Quit $$Error^%apiOBJ(6260,ref,$get(@(tree)@("d",$zlascii(attributeList(ref),13))),@(tree)@("d",$zlascii(nodelist,9))_$$XMLImportAttrLocation(nodelist))
XMLImportFixedAttrErr Quit $$Error^%apiOBJ(6320,ref,$get(@(tree)@("d",$zlascii(attributeList(ref),13))),@(tree)@("d",$zlascii(nodelist,9))_$$XMLImportAttrLocation(nodelist))
XMLImportAttrLocation(nodelist) new msg,loc
 Set loc=$lb($zlascii(nodelist,21),$zlascii(nodelist,25))
 If loc="" Quit ""
 Set msg=$get(^%qCacheMsg("%ObjectErrors",$s(""'="":$zcvt("","L"),1:$s($mvv(58)="":"en",1:$mvv(58))),"XMLImportLocation")," (%1,%2)")
 Quit $$FormatText^%occMessages(msg,$listget(loc,1),$listget(loc,2))
zXMLImportInternal()
 New child,childlist,node,nodelist,inner,innerlist,data,encodedArray,key,nsIndex,savechild,savechildlist,saveinner,saveinnnerlist,exists
 Set $ztrap="XMLImportInternalTrap"
 Set encoded=$case($piece(fmt,",",1),"":0,"literal":0,"encoded":1,"encoded12":1,:"")
 If encoded="" Quit $$Error^%apiOBJ(6231,fmt)
 Set nsIndex=$select($get(namespace)="":"",1:$get(@(tree)@("N",namespace)))
 Set node=nodeArg,nodelist=nodeArgChildlist
 If tag'=@(tree)@("d",$zlascii(nodelist,9)) Set inner=node Goto XMLImportMalformed
 If bareProjection Quit $$Error^%apiOBJ(6386,"User.PozycjaFaktury")
 If encoded {
   Do XMLImportAttrnode() If $data(attributeList("id")) Set idlist(node)=$this
 }
 If $zboolean(+($zlascii(nodelist,13)#16),+1,1) Quit 1
 Set sc=$$XMLImportElements()
 If $get(checkRequired),(''sc) { Set nodelist=""
   If '$data(exists("cenaZaSztuke")) Set nodelist=nodelist_"cenaZaSztuke, "
   If '$data(exists("liczbaSztuk")) Set nodelist=nodelist_"liczbaSztuk, "
   If nodelist'="" Set sc=$$Error^%apiOBJ(6318,$extract(nodelist,1,*-2))
 }
XMLImportExit Quit sc
XMLImportElements() ;
XMLLOOP1 Set descriptor=$zlascii(nodelist,$zwascii(nodelist,17)) Set child=($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)_","_$zwascii(nodelist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else { Set child="" }} For { Quit:child=""  Quit:(descriptor#16)'=2  Set descriptor=$piece(child,",",2)+4 Set child=$piece(child,",",1)_","_descriptor Set descriptor=$zlascii(nodelist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else {Set child="" }} } Goto XMLLOOP2
XMLLOOP For  { Set descriptor=$piece(child,",",2)+4 Set child=$piece(child,",",1)_","_descriptor Set descriptor=$zlascii(nodelist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else {Set child="" }} Quit:child=""  Quit:(descriptor#16)'=2  }
XMLLOOP2 If child="" Quit sc
 If (descriptor#16)'=0 Set inner=child Goto XMLImportMalformedNoTag
 Set childlist=@(tree)@((descriptor\16))
 Set tag=@(tree)@("d",$zlascii(childlist,9))
 If tag="liczbaSztuk" {
   If ($get(namespace)'=""),'$case($zwascii(childlist,19),0:1,nsIndex:1,:0) Goto XMLImportNSchild
   Set exists("liczbaSztuk")=1
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             Set data=$zstrip(data,"<>W",$c(13,10)) If data'="" Set data=$s($tr(data,"Ee(),.")'=data:"",1:$number(data,"I",1,10)) Goto:data="" XMLImportErrchild Goto:('$select(data=$c(0)&&$zu(115,13):1,$isvalidnum(data,0,1,10):1,'$isvalidnum(data):$$Error^%apiOBJ(7207,data),data<1:$$Error^%apiOBJ(7204,data,1),1:$$Error^%apiOBJ(7203,data,10))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..liczbaSztuk=data
   Goto XMLLOOP }
 If tag="cenaZaSztuke" {
   If ($get(namespace)'=""),'$case($zwascii(childlist,19),0:1,nsIndex:1,:0) Goto XMLImportNSchild
   Set exists("cenaZaSztuke")=1
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             Set data=$zstrip(data,"<>W",$c(13,10)) If data'="" Set data=$s($tr(data,"Ee(),.")'=data:"",1:$number(data,"I",1,10000)) Goto:data="" XMLImportErrchild Goto:('$select(data=$c(0)&&$zu(115,13):1,$isvalidnum(data,0,1,10000):1,'$isvalidnum(data):$$Error^%apiOBJ(7207,data),data<1:$$Error^%apiOBJ(7204,data,1),1:$$Error^%apiOBJ(7203,data,10000))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..cenaZaSztuke=data
   Goto XMLLOOP }
 If tag="towarNaPozycji" {
   If ($get(namespace)'=""),'$case($zwascii(childlist,19),0:1,nsIndex:1,:0) Goto XMLImportNSchild
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else {
     If 'sc Goto XMLImportExit
     Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set inner=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set inner=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,inner,.descriptor) } Else { Set inner="" }} For { Quit:inner=""  Quit:(descriptor#16)'=2  Set descriptor=$piece(inner,",",2)+4 Set inner=$piece(inner,",",1)_","_descriptor Set descriptor=$zlascii(childlist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set inner=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,inner,.descriptor) } Else {Set inner="" }} }
     While inner'="" {
       If (descriptor#16)'=2 {
         Set innerlist=@(tree)@((descriptor\16))
         If 'encoded,(@(tree)@("d",$zlascii(innerlist,9))'="Towar") Goto XMLImportBadTag
         If ($get(namespace)'=""),'$case($zwascii(innerlist,19),0:1,nsIndex:1,:0) Goto XMLImportNS
         If encoded Set saveinner=inner,saveinnerlist=innerlist
         If encoded,$$XMLImportId() {
           Set data=idlist(inner)
         } Else {
           If 'sc Goto XMLImportExit
           Do XMLImportAttrinner()
           Set class=$select(($zwascii($get(attributeList("type")),9)=1):$get(@(tree)@("d",$zlascii(attributeList("type"),13))),1:"")
           If (class="") || (class="Towar") {
             Set class="User.Towar"
           } Else {
             If $length(class,":")=2 Set class=$piece(class,":",2)
             Set class=$get(^oddCOM("User.Towar",85,"s",class))_$get(^oddXML("User.Towar","s",class)) If class="" Set class=0
             Set tmp=$get(@(tree)@("n",$zwascii(attributeList("type"),11)))
             If (class=0)||(($listlength(class)>1)&&(tmp="")) Set class=$get(@(tree)@("d",$zlascii(attributeList("type"),13))) Goto XMLImportBadType
             If $listlength(class)>1 {
               For tmpi=1:1:$listlength(class) {
                 If tmp=$parameter($list(class,tmpi),"NAMESPACE") Set class=$list(class,tmpi),tmpi=0 Quit
               }
               If tmpi Set class=$get(@(tree)@("d",$zlascii(attributeList("type"),13))) Goto XMLImportBadType
             } Else { Set class=$list(class) }
           }
           Set data=$classmethod(class,"XMLNew",handler,inner,$this)
           If $isobject(data) Set tag=@(tree)@("d",$zlascii(innerlist,9)),nodeArg=inner,nodeArgChildlist=innerlist,bareProjection=0,summaryArg=1,keynameattr="",sc=data.XMLImportInternal() Goto:('sc) XMLImportExit
           If encoded Do XMLImportAttrinner() If $data(attributeList("id")) Set idlist(inner)=data
         }
         If encoded Set inner=saveinner,innerlist=saveinnerlist
         If data'="" Do ..towarNaPozycji.Insert(data)
       }
       For  { Set descriptor=$piece(inner,",",2)+4 Set inner=$piece(inner,",",1)_","_descriptor Set descriptor=$zlascii(childlist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set inner=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,inner,.descriptor) } Else {Set inner="" }} Quit:inner=""  Quit:(descriptor#16)'=2  }
     }
     Quit:('sc)
   }
   If encoded Set child=savechild,childlist=savechildlist
   Goto XMLLOOP }
 Goto XMLImportBadTagchild
XMLImportBadTagchild Set inner=child
XMLImportBadTag Quit $$Error^%apiOBJ(6237,tag_$$XMLImportLocation(inner))
XMLImportBadTypenode Set inner=node Goto XMLImportBadType
XMLImportBadTypechild Set inner=child
XMLImportBadType Quit $$Error^%apiOBJ(6277,class,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)))_$$XMLImportLocation(inner))
XMLImportErrnode Set inner=node Goto XMLImportErr
XMLImportErrchild Set inner=child
XMLImportErr
 Set data=##class(%XML.ImportHandler).GetNextChild(tree,inner,"")
 If (data'="") {
   If ($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))#16)'=0 {
     Quit $$Error^%apiOBJ(6232,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner),$extract(@(tree)@("d",($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))\16)),1,200))
   } Else {
     Quit $$Error^%apiOBJ(6253,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner),@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))\16)),9)))
   }
 } Else {
   Quit $$Error^%apiOBJ(6252,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner))
 }
XMLImportIdErr Set sc=$$Error^%apiOBJ(6236,id,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner)) Quit sc
XMLImportMalformed Set sc=$$Error^%apiOBJ(6233,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)))_$$XMLImportLocation(inner)) Quit sc
XMLImportMalformedNoTag Set node=$select($piece(inner,",",1)<=0:0,1:$zlascii(@(tree)@($piece(inner,",",1)),1)_","_$zlascii(@(tree)@($piece(inner,",",1)),5)),sc=$$Error^%apiOBJ(6254,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16))),$select(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)))_$$XMLImportLocation(node)) Quit sc
XMLImportNSchild Set inner=child
XMLImportNS Set sc=$$Error^%apiOBJ(6235,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner)) Quit sc
XMLImportLocation(node) new msg,loc
 Set loc=$lb($zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),21),$zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),25))
 If loc="" Quit ""
 Set msg=$get(^%qCacheMsg("%ObjectErrors",$s(""'="":$zcvt("","L"),1:$s($mvv(58)="":"en",1:$mvv(58))),"XMLImportLocation")," (%1,%2)")
 Quit $$FormatText^%occMessages(msg,$listget(loc,1),$listget(loc,2))
XMLImportInternalTrap Set $ztrap=""
 Set loc=$select($ZE["<CLASS DOES NOT EXIST>":" for element "_tag_$$XMLImportLocation(child),1:"")
 Quit $$Error^%apiOBJ(5002,$ZE_loc)
XMLImportIdChild() Set inner=child,innerlist=childlist,tmp=$$XMLImportId(),child=inner,childlist=innerlist Quit tmp
XMLImportId() ;
 Do XMLImportAttrinner()
 If $data(attributeList("href")) {
   Set id=$get(@(tree)@("d",$zlascii(attributeList("href"),13)))
   If $extract(id)="#" {
     Set tmp=$select($get(@(tree)@("i",$extract(id,2,*)))="":"",1:$piece(@(tree)@("i",$extract(id,2,*)),",",1)_","_$piece(@(tree)@("i",$extract(id,2,*)),",",2)) If tmp="" Goto XMLImportIdErr
     Set inner=tmp
     Set descriptor=$zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2)) Set innerlist=@(tree)@((descriptor\16))
   }
 } ElseIf $data(attributeList("ref")),($get(@(tree)@("n",$zwascii(attributeList("ref"),9)))="http://www.w3.org/2003/05/soap-encoding") {
   Set id=$get(@(tree)@("d",$zlascii(attributeList("ref"),13)))
   Set tmp=$select($get(@(tree)@("i",id))="":"",1:$piece(@(tree)@("i",id),",",1)_","_$piece(@(tree)@("i",id),",",2)) If tmp="" Goto XMLImportIdErr
   Set inner=tmp
   Set descriptor=$zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2)) Set innerlist=@(tree)@((descriptor\16))
 } ElseIf '$data(attributeList("id")) {
   Quit 0
 }
 Quit $data(idlist(inner))
XMLImportAttrnode()
 If $get(attributeList)=node Quit
 Kill attributeList
 Set attributeList=node
 Set offset=29 While offset<$zwascii(nodelist,17) { Set attribute=$extract(nodelist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
XMLImportAttrchild()
 If $get(attributeList)=child Quit
 Kill attributeList
 Set attributeList=child
 Set offset=29 While offset<$zwascii(childlist,17) { Set attribute=$extract(childlist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
XMLImportAttrinner()
 If $get(attributeList)=inner Quit
 Kill attributeList
 Set attributeList=inner
 Set offset=29 While offset<$zwascii(innerlist,17) { Set attribute=$extract(innerlist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
zXMLIsObjectEmpty(ignoreNull)
 If ..liczbaSztuk'="" Quit 0
 If ..cenaZaSztuke'="" Quit 0
 If ..towarNaPozycji.Count()>0 Quit 0
 Quit 1
zXMLNew(document,node,containerOref="")
	Quit (##class(User.PozycjaFaktury).%New())
zXMLSchema(top="",format="",namespacePrefix="",input=0,refOnly=0,schema)
 Quit ##class(%XML.Implementation).XMLSchema("User.PozycjaFaktury",top,format,namespacePrefix,input,refOnly,.schema)
zcenaZaSztukeDisplayToLogical(%val) public {
	Q $select(%val="":"",%val=$c(0)&&$zu(115,13):"",1:$s($in(%val,"","")'="":+$in(%val,"",%val),1:%val)) }
zcenaZaSztukeGetStored(id) public {
	Quit $Select(id'="":$listget($g(^User.PozycjaFakturyD(id)),3),1:"") }
zcenaZaSztukeIsValid(%val) public {
	Quit $select(%val=$c(0)&&$zu(115,13):1,$isvalidnum(%val,0,1,10000):1,'$isvalidnum(%val):$$Error^%apiOBJ(7207,%val),%val<1:$$Error^%apiOBJ(7204,%val,1),1:$$Error^%apiOBJ(7203,%val,10000)) }
zcenaZaSztukeNormalize(%val) public {
	Quit $select(%val=$c(0)&&$zu(115,13):"",1:%val\1) }
zcenaZaSztukeXSDToLogical(%val) public {
	Q $s($tr(%val,"Ee(),.")'=%val:"",1:$number(%val,"I",1,10000)) }
zliczbaSztukDisplayToLogical(%val) public {
	Q $select(%val="":"",%val=$c(0)&&$zu(115,13):"",1:$s($in(%val,"","")'="":+$in(%val,"",%val),1:%val)) }
zliczbaSztukGetStored(id) public {
	Quit $Select(id'="":$listget($g(^User.PozycjaFakturyD(id)),2),1:"") }
zliczbaSztukIsValid(%val) public {
	Quit $select(%val=$c(0)&&$zu(115,13):1,$isvalidnum(%val,0,1,10):1,'$isvalidnum(%val):$$Error^%apiOBJ(7207,%val),%val<1:$$Error^%apiOBJ(7204,%val,1),1:$$Error^%apiOBJ(7203,%val,10)) }
zliczbaSztukNormalize(%val) public {
	Quit $select(%val=$c(0)&&$zu(115,13):"",1:%val\1) }
zliczbaSztukXSDToLogical(%val) public {
	Q $s($tr(%val,"Ee(),.")'=%val:"",1:$number(%val,"I",1,10)) }
zlistaPozycjiGetObject(force=0) public {
	Quit $select(r%listaPozycji=""||(i%listaPozycji'=""):$select(i%listaPozycji="":"",1:$listbuild(i%listaPozycji_"")),(''..listaPozycji.%GetSwizzleObject(force,.oid)):oid,1:"") }
zlistaPozycjiGetObjectId(force=0) public {
	Quit $listget(..listaPozycjiGetObject(force)) }
zlistaPozycjiGetStored(id) public {
	Quit $Select(id'="":$listget($g(^User.PozycjaFakturyD(id)),4),1:"") }
zlistaPozycjiGetSwizzled(noswizzle=0) public {
	If r%listaPozycji'="" Quit r%listaPozycji
	If i%listaPozycji="" Quit ""
	Set oid=$select(i%listaPozycji="":"",1:$listbuild(i%listaPozycji_""))
	Set oref=##class("User.Faktura").%Open(oid,,.sc) If ('sc)||(oref="") Do:$get(^%SYS("ThrowSwizzleError"),0) $zutil(96,3,19,1) Quit ""
	Set modstate=$system.CLS.GetModifiedBits() Set r%listaPozycji=oref Do $system.CLS.SetModifiedBits(modstate)
	Do oref.FakturaPozycjiFakturyRelate($this)
	Quit oref }
zlistaPozycjiNewObject() public {
	Set newobject=##class("User.Faktura").%New() If newobject="" Quit ""
	Set ..listaPozycji=newobject
	Do ..listaPozycji.FakturaPozycjiFakturyRelate($this)
	Quit newobject }
zlistaPozycjiOnDelete(id="",concurrency=-1) [ id,SQLCODE ] public { New %msg,%ROWCOUNT,%ROWID,SQLCODE 
	 ;---&sql(select %ID into :id from SQLUser.PozycjaFaktury where listaPozycji = :id)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, id, SQLCODE
	do %0Fo
	Quit $Select(SQLCODE:1,1:$$Error^%apiOBJ(5823,$classname()_"."_"listaPozycji")) }
 q
%0Fo n sqldata8d,sqldata9d,sqldata10d,sqldata18d,sqldata19d,sqldata4d,sqldata3d,sqldata6d,sqldata7d
 s $zt="%0Ferr"
 n %sqltime s %sqltime=$zh
 s sqldata8d=$zu(115,2)
 s sqldata9d=0,sqldata10d=""
 d:$zu(115,15) $system.ECP.Sync()
 s sqldata4d=$g(id),sqldata4d=$s(sqldata4d="":"",$isvalidnum(sqldata4d):+sqldata4d,1:sqldata4d)
 s SQLCODE=100
 ; asl MOD# 2
 s sqldata3d=sqldata4d s:sqldata3d="" sqldata3d=-1E14
 i '($s(sqldata3d'=-1E14:sqldata3d,1:"")'="") g %0FmBdun
 s id=""
%0FmBk1 s:sqldata3d="" sqldata3d=-1E14
 s id=$o(^User.PozycjaFakturyI("listaPozycjiIndex",sqldata3d,id))
 i id="" g %0FmBdun
 s:sqldata3d=-1E14 sqldata3d=""
 goto:sqldata8d'=1 %0FmBuncommitted
 if sqldata8d=1 {
 	lock +^User.PozycjaFakturyD($p(id,"||",1))#"S":$zu(115,4)
 	if $t { set sqldata10d=$name(^User.PozycjaFakturyD($p(id,"||",1)))_"#""SI""",sqldata9d=1 }
 	else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.PozycjaFaktury for RowID value: "_id ztrap "LOCK"  }
 }
 ; asl MOD# 3
 s sqldata6d=$zlist(sqldata3d)
 i id'="" s sqldata18d="" i $d(^User.PozycjaFakturyD(id),sqldata18d)
 e  g %0FmCdun
 Set sqldata3d=$lg(sqldata18d,4)
 s sqldata7d=$zlist(sqldata3d)
 g:sqldata6d'=sqldata7d %0FmCdun
%0FmBuncommitted ;
 s SQLCODE=0 g %0Fc
%0FmCdun if $g(sqldata8d)=1 { if $g(sqldata9d)=1 { l -@sqldata10d s sqldata9d=0 } elseif $g(sqldata9d)=2 { do $classmethod($li(sqldata10d),"%UnlockId",$li(sqldata10d,2),1,1)  s sqldata9d=0 } }
 g %0FmBk1
%0FmBdun  s:$g(sqldata3d)=-1E14 sqldata3d=""
%0FmAdun 
%0Fc s %ROWCOUNT='SQLCODE
 if $g(sqldata8d)=1 { if $g(sqldata9d)=1 { l -@sqldata10d } elseif $g(sqldata9d)=2 { do $classmethod($li(sqldata10d),"%UnlockId",$li(sqldata10d,2),1,1)  } }
 s:$d(%sqltime) sqldata19d=$g(sqldata19d)+$zh-%sqltime
 n context,tmp,count,total,mean s context=$system.Context.SQL()
 if $d(sqldata19d,%sqltime) {
 if $g(context.Stats)<$zu(99) { d AggregateStats^%SYS.SQLSRV() }
 s tmp=$g(context.Stats($namespace,"tOqMOMiUZk1RqlLGLzNdoEL9SSA="))
 s count=$lg(tmp,1),total=$lg(tmp,2),mean=total+%sqltime/(count+1)
 s context.Stats($namespace,"tOqMOMiUZk1RqlLGLzNdoEL9SSA=")=$lb(count+1,total+%sqltime,$s(+count=0:0,1:(%sqltime-mean)**2+(count*((total/count-mean)**2+$lg(tmp,3)))/(count+1))) }
 q
%0Ferr s $zt=""
 d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 g %0Fc
zlistaPozycjiRExec(%qHandle,inverse) [ c1,inverse,SQLCODE ] public { New %msg,%ROWCOUNT,%ROWID,c1,SQLCODE 
	Set %qHandle=$increment(%objcn)
	 ;---&sql(DECLARE Q2 CURSOR FOR
 	 ;---		SELECT ID FROM SQLUser.PozycjaFaktury where listaPozycji=:inverse)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, inverse, SQLCODE
	
	 ;---&sql(OPEN Q2)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE
	do %Q20o
	If SQLCODE Quit $$Error^%apiOBJ(5821,"SQLCODE = "_SQLCODE)
	Quit 1 }
zlistaPozycjiRClose(%qHandle) [ c1,inverse,SQLCODE ] public { New %msg,%ROWCOUNT,%ROWID,c1,inverse,SQLCODE 
	New SQLCODE
	 ;---&sql(CLOSE Q2)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE
	do %Q20c
	Kill %objcsc(%qHandle),%objcsp(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsl(%qHandle),%objcsR(%qHandle),%objcsZ(%qHandle),%objcsd(%qHandle)
	Quit 1 }
zlistaPozycjiRFetch(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) [ c1,inverse,SQLCODE ] public { New %msg,%ROWCOUNT,%ROWID,c1,inverse,SQLCODE 
	Set RowSet="",ReturnCount=0,AtEnd=0
	For {
		 ;---&sql(FETCH Q2 INTO :c1)
 		 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, c1, SQLCODE
		do %0Lo
		If 'SQLCODE { Set RowSet=RowSet_$lb(c1),ReturnCount=ReturnCount+1 Quit:ReturnCount=FetchCount||(($length(RowSet)+($length(RowSet)\ReturnCount))>24000) } Else { Set AtEnd=1 Quit }
	}
	Quit 1 }
 q
%Q20o 
 try { s SQLCODE=$s($g(%objcsc(%qHandle)):-101,1:0) q:SQLCODE'=0 
 n %sqltime s %sqltime=$zh
 s %objcsd(%qHandle,1)=0 s:$d(%0CacheRowLimit)#2 %objcsd(%qHandle,2)=%0CacheRowLimit
 s %objcsd(%qHandle,3)=$zu(115,2)
 s %objcsd(%qHandle,4)=0,%objcsd(%qHandle,5)=""
 d:$zu(115,15) $system.ECP.Sync()
 s %objcsd(%qHandle,6)=$g(inverse),%objcsd(%qHandle,6)=$s(%objcsd(%qHandle,6)="":"",$isvalidnum(%objcsd(%qHandle,6)):+%objcsd(%qHandle,6),1:%objcsd(%qHandle,6))
 s %objcsc(%qHandle)=1,SQLCODE=0
 s:$d(%sqltime) %objcsd(%qHandle,7)=$g(%objcsd(%qHandle,7))+$zh-%sqltime
 } catch { d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %objcsd(%qHandle),%objcsc(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsp(%qHandle) }
 q
%0Hfirst 
 ; asl MOD# 2
 s %objcsd(%qHandle,8)=%objcsd(%qHandle,6) s:%objcsd(%qHandle,8)="" %objcsd(%qHandle,8)=-1E14
 i '($s(%objcsd(%qHandle,8)'=-1E14:%objcsd(%qHandle,8),1:"")'="") g %0HmBdun
 s %objcsd(%qHandle,9)=""
%0HmBk1 s:%objcsd(%qHandle,8)="" %objcsd(%qHandle,8)=-1E14
 s %objcsd(%qHandle,9)=$o(^User.PozycjaFakturyI("listaPozycjiIndex",%objcsd(%qHandle,8),%objcsd(%qHandle,9)))
 i %objcsd(%qHandle,9)="" g %0HmBdun
 s:%objcsd(%qHandle,8)=-1E14 %objcsd(%qHandle,8)=""
 goto:%objcsd(%qHandle,3)'=1 %0HmBuncommitted
 if %objcsd(%qHandle,3)=1 {
 	lock +^User.PozycjaFakturyD($p(%objcsd(%qHandle,9),"||",1))#"S":$zu(115,4)
 	if $t { set %objcsd(%qHandle,5)=$name(^User.PozycjaFakturyD($p(%objcsd(%qHandle,9),"||",1)))_"#""SI""",%objcsd(%qHandle,4)=1 }
 	else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.PozycjaFaktury for RowID value: "_%objcsd(%qHandle,9) ztrap "LOCK"  }
 }
 ; asl MOD# 3
 s %objcsd(%qHandle,10)=$zlist(%objcsd(%qHandle,8))
 i %objcsd(%qHandle,9)'="" s %objcsd(%qHandle,11)="" i $d(^User.PozycjaFakturyD(%objcsd(%qHandle,9)),%objcsd(%qHandle,11))
 e  g %0HmCdun
 Set %objcsd(%qHandle,8)=$lg(%objcsd(%qHandle,11),4)
 s %objcsd(%qHandle,12)=$zlist(%objcsd(%qHandle,8))
 g:%objcsd(%qHandle,10)'=%objcsd(%qHandle,12) %0HmCdun
%0HmBuncommitted ;
 s:$g(SQLCODE)'<0 SQLCODE=0 s %ROWCOUNT=$i(%objcsd(%qHandle,1)),%ROWID=%objcsd(%qHandle,9),%objcsc(%qHandle)=10
 //-- FETCH Output
 s:$d(%sqltime) %objcsd(%qHandle,7)=$g(%objcsd(%qHandle,7))+$zh-%sqltime
 quit
%Q20f //-- FETCH tag
 i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  } i %objcsc(%qHandle)=100 { s SQLCODE=100 q  } s SQLCODE=0
 i $d(%objcsd(%qHandle,2))#2,$g(%objcsd(%qHandle,1))'<%objcsd(%qHandle,2) { s SQLCODE=100,%ROWCOUNT=%objcsd(%qHandle,1),%objcsc(%qHandle)=100 q }
 n %sqltime s %sqltime=$zh
 g %0Hfirst:%objcsc(%qHandle)=1
%0HmCdun if $g(%objcsd(%qHandle,3))=1 { if $g(%objcsd(%qHandle,4))=1 { l -@%objcsd(%qHandle,5) s %objcsd(%qHandle,4)=0 } elseif $g(%objcsd(%qHandle,4))=2 { do $classmethod($li(%objcsd(%qHandle,5)),"%UnlockId",$li(%objcsd(%qHandle,5),2),1,1)  s %objcsd(%qHandle,4)=0 } }
 g %0HmBk1
%0HmBdun  s:$g(%objcsd(%qHandle,8))=-1E14 %objcsd(%qHandle,8)=""
%0HmAdun 
 s %ROWCOUNT=%objcsd(%qHandle,1),SQLCODE=100,%objcsc(%qHandle)=100
 s:$d(%sqltime) %objcsd(%qHandle,7)=$g(%objcsd(%qHandle,7))+$zh-%sqltime
 //-- no [more] data
 quit
%Q20c i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  }
 n %sqltime s %sqltime=$zh
 s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%objcsd(%qHandle,1)),1:0)
 if $g(%objcsd(%qHandle,3))=1 { if $g(%objcsd(%qHandle,4))=1 { l -@%objcsd(%qHandle,5) } elseif $g(%objcsd(%qHandle,4))=2 { do $classmethod($li(%objcsd(%qHandle,5)),"%UnlockId",$li(%objcsd(%qHandle,5),2),1,1)  } }
 s:$d(%sqltime) %objcsd(%qHandle,7)=$g(%objcsd(%qHandle,7))+$zh-%sqltime
 n context,tmp,count,total,mean s context=$system.Context.SQL()
 if $d(%objcsd(%qHandle,7),%sqltime) {
 if $g(context.Stats)<$zu(99) { d AggregateStats^%SYS.SQLSRV() }
 s tmp=$g(context.Stats($namespace,"tr94g/99rbpdjqZUlHsCCFWUgS8="))
 s count=$lg(tmp,1),total=$lg(tmp,2),mean=total+%sqltime/(count+1)
 s context.Stats($namespace,"tr94g/99rbpdjqZUlHsCCFWUgS8=")=$lb(count+1,total+%sqltime,$s(+count=0:0,1:(%sqltime-mean)**2+(count*((total/count-mean)**2+$lg(tmp,3)))/(count+1))) }
 k %objcsd(%qHandle),%objcsc(%qHandle)
 s SQLCODE=0
 quit  // close
%0Herr d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 s %objcsc(%qHandle)=100
 quit  // error
%0Lo try { do %Q20f q:SQLCODE'=0
 s c1=%objcsd(%qHandle,9)
 } catch { do %0Herr }
 q
zlistaPozycjiRelate(oref) public {
	If r%listaPozycji=oref Quit 1
	If i%listaPozycji'="",$listget(oref."%%OID")=i%listaPozycji Set modstate=$system.CLS.GetModifiedBits() Set r%listaPozycji=oref Do $system.CLS.SetModifiedBits(modstate) Quit 1
	If r%listaPozycji'="" Do ..listaPozycjiUnRelate(r%listaPozycji)
	Set tmp=i%listaPozycji Kill i%listaPozycji,r%listaPozycji Set r%listaPozycji=oref,i%listaPozycji=tmp
	Quit 1 }
zlistaPozycjiSet(newvalue) public {
	If newvalue="" {
		If r%listaPozycji="",i%listaPozycji="" Quit 1
	} Else {
		If '$isobject(newvalue) Quit $$Error^%apiOBJ(5807,newvalue)
		If r%listaPozycji=newvalue Quit 1
		If r%listaPozycji="",i%listaPozycji'="",i%listaPozycji=$listget(newvalue."%%OID") Set modstate=$system.CLS.GetModifiedBits() Set r%listaPozycji=newvalue Do newvalue.FakturaPozycjiFakturyRelate($this),$system.CLS.SetModifiedBits(modstate) Quit 1
	}
	If r%listaPozycji'="" Do r%listaPozycji.FakturaPozycjiFakturyUnRelate($this)
	Set r%listaPozycji=newvalue,i%listaPozycji=0,i%listaPozycji=""
	If newvalue'="" Do newvalue.FakturaPozycjiFakturyRelate($this)
	Quit 1 }
zlistaPozycjiSetObject(newvalue) public {
	If r%listaPozycji="" Set i%listaPozycji=$listget(newvalue) Quit 1
	If newvalue'="",i%listaPozycji=$listget(newvalue) Quit 1
	Set sc=..listaPozycji.%GetSwizzleObject(0,.oid) Quit:('sc) sc
	If newvalue'="",$listget(oid)=$listget(newvalue) Quit 1
	Do ..listaPozycji.FakturaPozycjiFakturyUnRelate($this) Set r%listaPozycji="",i%listaPozycji=0,i%listaPozycji=$listget(newvalue) Quit 1 }
zlistaPozycjiSetObjectId(newid) public {
	Quit ..listaPozycjiSetObject($select(newid="":"",1:$listbuild(newid_""))) }
zlistaPozycjiUnRelate(oref) public {
	If r%listaPozycji=oref Set r%listaPozycji="",i%listaPozycji=0,i%listaPozycji="" Quit 1
	If r%listaPozycji'="" Quit $$Error^%apiOBJ(5499)
	Set i%listaPozycji=0,i%listaPozycji=""
	Quit 1 }
zlistaPozycjiUnSwizzle(force=0) public {
 Quit:r%listaPozycji="" 1
	Set sc=..listaPozycji.%GetSwizzleObject(force,.newvalue) Quit:('sc) sc
	Set modstate=$system.CLS.GetModifiedBits() Set r%listaPozycji="" Do $system.CLS.SetModifiedBits(modstate)
 Set i%listaPozycji=$listget(newvalue)
 Quit 1 }
ztowarNaPozycjiGetObject(force=0) public {
	Quit $select(r%towarNaPozycji=""&&($data(i%towarNaPozycji)):$select(i%towarNaPozycji="":"",1:$listbuild(i%towarNaPozycji_"")),(''..towarNaPozycji.%GetSwizzleObject(force,.oid)):oid,1:"") }
ztowarNaPozycjiGetObjectId(force=0) public {
	Quit $listget(..towarNaPozycjiGetObject(force)) }
ztowarNaPozycjiGetSwizzled(noswizzle=0) public {
	If r%towarNaPozycji'="" Quit r%towarNaPozycji
	If i%towarNaPozycji'="" {
		Set oid=$select(i%towarNaPozycji="":"",1:$listbuild(i%towarNaPozycji_""))
		Set oref=##class("%Library.RelationshipObject").%Open(oid,,.sc) If ('sc)||(oref="") Do:$get(^%SYS("ThrowSwizzleError"),0) $zutil(96,3,19,1) Quit ""
	} Else { Set oref=##class("%Library.RelationshipObject").%New($listbuild("User.Towar","pozycjaTowaru",+$this,"many",1,1)) If oref="" Quit "" }
	Set modstate=$system.CLS.GetModifiedBits() Set r%towarNaPozycji=oref Do $system.CLS.SetModifiedBits(modstate)
	Set oref.ElementType="User.Towar"
	Do oref.%SetModified(0)
	Quit oref }
ztowarNaPozycjiIsEmpty() public {
	Quit $listget(..towarNaPozycjiGetObject(1))="" }
ztowarNaPozycjiNewObject() public {
	Set newobject=##class("%Library.RelationshipObject").%New($listbuild("User.Towar","pozycjaTowaru",+$this,"many",1,1)) If newobject="" Quit ""
	Set ..towarNaPozycji=newobject
	Quit newobject }
ztowarNaPozycjiRFetch(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) public {
 Set ReturnCount=0,AtEnd=1,RowSet="" Quit 1 }
ztowarNaPozycjiRelate(oref) public {
	Quit ..towarNaPozycji.Relate(oref) }
ztowarNaPozycjiSet(newvalue) public {
	If newvalue="" {
		If r%towarNaPozycji="",i%towarNaPozycji="" Quit 1
	} Else {
		If '$isobject(newvalue) Quit $$Error^%apiOBJ(5807,newvalue)
		If r%towarNaPozycji=newvalue Quit 1
		If r%towarNaPozycji="",i%towarNaPozycji'="",i%towarNaPozycji=$listget(newvalue."%%OID") Set modstate=$system.CLS.GetModifiedBits() Set r%towarNaPozycji=newvalue Do newvalue.pozycjaTowaruRelate($this),$system.CLS.SetModifiedBits(modstate) Quit 1
	}
	Set r%towarNaPozycji=newvalue,i%towarNaPozycji=0,i%towarNaPozycji=""
	Quit 1 }
ztowarNaPozycjiUnRelate(oref) public {
	Quit ..towarNaPozycji.UnRelate(oref) }
zExtentExecute(%qHandle) [ c1,SQLCODE ] public { New %msg,%ROWCOUNT,%ROWID,c1,SQLCODE 
	Set sc=1
	s %qHandle=$i(%objcn)
	 ;---&sql(DECLARE QExtent CURSOR FOR
 	 ;---		 SELECT ID FROM SQLUser.PozycjaFaktury)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE
	
	 ;---&sql(OPEN QExtent)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE
	do %QExtent0o
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5821,"SQLCODE = "_SQLCODE) } Else { Set sc=1 }
	Quit sc }
zExtentClose(%qHandle) [ c1,SQLCODE ] public { New %msg,%ROWCOUNT,%ROWID,c1,SQLCODE 
	 ;---&sql(CLOSE QExtent)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE
	do %QExtent0c
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) } Else { Set sc=1 }
	Kill %objcsc(%qHandle),%objcsp(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsl(%qHandle),%objcsR(%qHandle),%objcsZ(%qHandle),%objcsd(%qHandle)
	Quit sc }
zExtentFetch(%qHandle,Row,AtEnd=0) [ c1,SQLCODE ] public { New %msg,%ROWCOUNT,%ROWID,c1,SQLCODE 
	Set Row="",AtEnd=0
	 ;---&sql(FETCH QExtent INTO :c1)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, c1, SQLCODE
	do %0Qo
	If 'SQLCODE { Set Row=$lb(c1) Set sc=1 }
	ElseIf SQLCODE=100 { Set AtEnd=1,sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) }
	Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set AtEnd=1,sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	QUIT sc }
zExtentFetchRows(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) [ c1,SQLCODE ] public { New %msg,%ROWCOUNT,%ROWID,c1,SQLCODE 
	Set RowSet="",ReturnCount=0,AtEnd=0
	For {
		 ;---&sql(FETCH QExtent INTO :c1)
 		 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, c1, SQLCODE
		do %0Ro
		If 'SQLCODE { Set RowSet=RowSet_$lb(c1),ReturnCount=ReturnCount+1 Quit:(ReturnCount=FetchCount)||(($l(RowSet)+($l(RowSet)\ReturnCount))>24000) } Else { Set AtEnd=1 Quit }
	}
	If 'SQLCODE { Set sc=1 } ElseIf SQLCODE=100 { Set sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) } Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	Quit sc }
zExtentSendODBC(%qHandle,array,qacn,%qrc,piece,ColumnCount) [ c1,SQLCODE ] public { New %msg,%ROWCOUNT,%ROWID,c1,SQLCODE 
	set %qrc=0,piece=0
	for {
		set rc=..ExtentFetch(.%qHandle,.row,.atend)
		if ('rc) { set %qrc=-400 set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=-400,%sqlcontext.Message=$g(%msg) do ProcessError^%ourProcedure(rc,$get(%sqlcontext),.%qrc,.%msg),Logerr^%SYS.SQLSRV(%qrc,"","SP",.%msg) RETURN  }
		if row="" { set %qrc=100 set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=100 RETURN  }
		if $g(%protocol)>50 { RETURN:$zobjexport(row,60) }
		else {
			if %protocol>46 { for piece=1:1:ColumnCount { goto:$zobjexport($lg(row,piece),50) SPDone } }
			else { for piece=1:1:ColumnCount { goto:$zobjexport($lg(row,piece),7) SPDone } }
		}
	}
	QUIT
SPDone	set:%protocol>46 piece=piece+1
	kill array(qacn)
	for i=piece:1:ColumnCount { set array(qacn,i)=$lg(row,i) }
	QUIT }
 q
%QExtent0o 
 try { s SQLCODE=$s($g(%objcsc(%qHandle)):-101,1:0) q:SQLCODE'=0 
 n %sqltime s %sqltime=$zh
 s %objcsd(%qHandle,1)=0 s:$d(%0CacheRowLimit)#2 %objcsd(%qHandle,2)=%0CacheRowLimit
 s %objcsd(%qHandle,3)=$zu(115,2)
 s %objcsd(%qHandle,4)=0,%objcsd(%qHandle,5)=""
 d:$zu(115,15) $system.ECP.Sync()
 s %objcsc(%qHandle)=1,SQLCODE=0
 s:$d(%sqltime) %objcsd(%qHandle,6)=$g(%objcsd(%qHandle,6))+$zh-%sqltime
 } catch { d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %objcsd(%qHandle),%objcsc(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsp(%qHandle) }
 q
%0Mfirst 
 ; asl MOD# 2
 s %objcsd(%qHandle,7)=""
%0MmBk1 s %objcsd(%qHandle,7)=$o(^User.PozycjaFakturyD(%objcsd(%qHandle,7)))
 i %objcsd(%qHandle,7)="" g %0MmBdun
 goto:%objcsd(%qHandle,3)'=1 %0MmBuncommitted
 if %objcsd(%qHandle,3)=1 {
 	lock +^User.PozycjaFakturyD($p(%objcsd(%qHandle,7),"||",1))#"S":$zu(115,4)
 	if $t { set %objcsd(%qHandle,5)=$name(^User.PozycjaFakturyD($p(%objcsd(%qHandle,7),"||",1)))_"#""SI""",%objcsd(%qHandle,4)=1 }
 	else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.PozycjaFaktury for RowID value: "_%objcsd(%qHandle,7) ztrap "LOCK"  }
 }
 ; asl MOD# 3
 i %objcsd(%qHandle,7)'="",$d(^User.PozycjaFakturyD(%objcsd(%qHandle,7)))
 e  g %0MmCdun
%0MmBuncommitted ;
 s:$g(SQLCODE)'<0 SQLCODE=0 s %ROWCOUNT=$i(%objcsd(%qHandle,1)),%ROWID=%objcsd(%qHandle,7),%objcsc(%qHandle)=10
 //-- FETCH Output
 s:$d(%sqltime) %objcsd(%qHandle,6)=$g(%objcsd(%qHandle,6))+$zh-%sqltime
 quit
%QExtent0f //-- FETCH tag
 i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  } i %objcsc(%qHandle)=100 { s SQLCODE=100 q  } s SQLCODE=0
 i $d(%objcsd(%qHandle,2))#2,$g(%objcsd(%qHandle,1))'<%objcsd(%qHandle,2) { s SQLCODE=100,%ROWCOUNT=%objcsd(%qHandle,1),%objcsc(%qHandle)=100 q }
 n %sqltime s %sqltime=$zh
 g %0Mfirst:%objcsc(%qHandle)=1
%0MmCdun if $g(%objcsd(%qHandle,3))=1 { if $g(%objcsd(%qHandle,4))=1 { l -@%objcsd(%qHandle,5) s %objcsd(%qHandle,4)=0 } elseif $g(%objcsd(%qHandle,4))=2 { do $classmethod($li(%objcsd(%qHandle,5)),"%UnlockId",$li(%objcsd(%qHandle,5),2),1,1)  s %objcsd(%qHandle,4)=0 } }
 g %0MmBk1
%0MmBdun 
%0MmAdun 
 s %ROWCOUNT=%objcsd(%qHandle,1),SQLCODE=100,%objcsc(%qHandle)=100
 s:$d(%sqltime) %objcsd(%qHandle,6)=$g(%objcsd(%qHandle,6))+$zh-%sqltime
 //-- no [more] data
 quit
%QExtent0c i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  }
 n %sqltime s %sqltime=$zh
 s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%objcsd(%qHandle,1)),1:0)
 if $g(%objcsd(%qHandle,3))=1 { if $g(%objcsd(%qHandle,4))=1 { l -@%objcsd(%qHandle,5) } elseif $g(%objcsd(%qHandle,4))=2 { do $classmethod($li(%objcsd(%qHandle,5)),"%UnlockId",$li(%objcsd(%qHandle,5),2),1,1)  } }
 s:$d(%sqltime) %objcsd(%qHandle,6)=$g(%objcsd(%qHandle,6))+$zh-%sqltime
 n context,tmp,count,total,mean s context=$system.Context.SQL()
 if $d(%objcsd(%qHandle,6),%sqltime) {
 if $g(context.Stats)<$zu(99) { d AggregateStats^%SYS.SQLSRV() }
 s tmp=$g(context.Stats($namespace,"4GcHi2Dd7ZVTlyIW9d9/tpOPKhE="))
 s count=$lg(tmp,1),total=$lg(tmp,2),mean=total+%sqltime/(count+1)
 s context.Stats($namespace,"4GcHi2Dd7ZVTlyIW9d9/tpOPKhE=")=$lb(count+1,total+%sqltime,$s(+count=0:0,1:(%sqltime-mean)**2+(count*((total/count-mean)**2+$lg(tmp,3)))/(count+1))) }
 k %objcsd(%qHandle),%objcsc(%qHandle)
 s SQLCODE=0
 quit  // close
%0Merr d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 s %objcsc(%qHandle)=100
 quit  // error
%0Qo try { do %QExtent0f q:SQLCODE'=0
 s c1=%objcsd(%qHandle,7)
 } catch { do %0Merr }
 q
%0Ro try { do %QExtent0f q:SQLCODE'=0
 s c1=%objcsd(%qHandle,7)
 } catch { do %0Merr }
 q
zExtentFunc() public {
	try {
		set tSchemaPath = ##class(%SQL.Statement).%ClassPath($classname())
			set tStatement = ##class(%SQL.Statement).%New(,tSchemaPath)
			do tStatement.prepare(" SELECT ID FROM SQLUser . PozycjaFaktury")
		set tResult = tStatement.%Execute()
	}
	catch tException { if '$Isobject($Get(tResult)) { set tResult = ##class(%SQL.StatementResult).%New() } set tResult.%SQLCODE=tException.AsSQLCODE(),tResult.%Message=tException.AsSQLMessage() }
	Quit tResult }
zExtentGetInfo(colinfo,parminfo,idinfo,%qHandle,extoption=0,extinfo) public {
 s parminfo=""
	s:'($d(^oddCOM($classname(),"q","Extent",21),clientinfo)#2)&&'$s($d(^(2),clientinfo)#2&&(clientinfo'=$classname()):$d(^oddCOM(clientinfo,"q","Extent",21),clientinfo)#2||($d(^oddDEF(clientinfo,"q","Extent",21),clientinfo)#2),1:$d(^oddDEF($classname(),"q","Extent",21),clientinfo)#2) clientinfo=""
	Set:extoption extinfo=$s($d(^oddCOM($classname(),"q","Extent",38))#2:^(38),$d(^oddCOM($g(^(2),$classname()),"q","Extent",38))#2:^(38),1:$s($d(^oddDEF($g(^oddCOM($classname(),"q","Extent",2),$classname()),"q","Extent",38))#2:^(38),1:""))
	If clientinfo'="" Set colinfo=$listget(clientinfo,1),parminfo=$listget(clientinfo,2),idinfo=$listget(clientinfo,3) Quit 1
	Set colinfo="",parminfo="",idinfo=$listbuild(0)
	Set sc=$$externaltype^%apiOLE("%Library.Integer",.exttypes,"0")
	Quit:('sc) sc
	s:'($d(^oddCOM($classname(),"q","Extent",23),names)#2)&&'$s($d(^(2),names)#2&&(names'=$classname()):$d(^oddCOM(names,"q","Extent",23),names)#2||($d(^oddDEF(names,"q","Extent",23),names)#2),1:$d(^oddDEF($classname(),"q","Extent",23),names)#2) names=""
	s:'($d(^oddCOM($classname(),"q","Extent",22),captions)#2)&&'$s($d(^(2),captions)#2&&(captions'=$classname()):$d(^oddCOM(captions,"q","Extent",22),captions)#2||($d(^oddDEF(captions,"q","Extent",22),captions)#2),1:$d(^oddDEF($classname(),"q","Extent",22),captions)#2) captions=""
	For i=1:1:1 Set colinfo=colinfo_$listbuild($listbuild($listget(names,i),$piece(exttypes,",",i),$listget(captions,i)))
	Set idinfo=$listbuild(1,$classname())
	s ^oddCOM($classname(),"q","Extent",21)=$listbuild(colinfo,parminfo,idinfo)
	Quit 1 }
zExtentGetODBCInfo(colinfo,parminfo,qHandle) public {
	set version = $Select($Get(%protocol,41)>40:4,1:3)
	Set metadata=$lb(1,1,"ID",4,10,0,2,"ID","PozycjaFaktury","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,1),0)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	If version=4 {
		Set colinfo=$li(metadata,2,2+cmdlen)
	} Else {
		Set colinfo=$li(metadata,2,2)
		For i=0:1:colcount-1 Set colinfo=colinfo_$list(metadata,3+(i*10),11+(i*10))
	}
	Quit 1 }
zlistaPozycjiCheck(id="",lockonly=0) public {
	Quit ##class(User.Faktura).%1Check(id,lockonly)
}
zlistaPozycjiDelete(id="",concurrency=-1) public {
	quit ..listaPozycjiOnDelete(.id,.concurrency) }
zlistaPozycjiSQLFKeyExists(%p...)
	new %ROWCOUNT,%ROWID,%msg,SQLCODE
	 ;---&sql(SELECT listaPozycji
 	 ;---	     FROM   SQLUser.PozycjaFaktury
 	 ;---	     WHERE  listaPozycji=:%p(1))
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE
	do %0So
	QUIT SQLCODE=0
 q
%0So n sqldata7d,sqldata8d,sqldata9d,sqldata17d,sqldata18d,sqldata2d,sqldata1d,sqldata4d,sqldata5d,sqldata6d
 s $zt="%0Serr"
 n %sqltime s %sqltime=$zh
 s sqldata7d=$zu(115,2)
 s sqldata8d=0,sqldata9d=""
 d:$zu(115,15) $system.ECP.Sync()
 s sqldata2d=$g(%p(1)),sqldata2d=$s(sqldata2d="":"",$isvalidnum(sqldata2d):+sqldata2d,1:sqldata2d)
 s SQLCODE=100
 ; asl MOD# 2
 s sqldata1d=sqldata2d s:sqldata1d="" sqldata1d=-1E14
 i '($s(sqldata1d'=-1E14:sqldata1d,1:"")'="") g %0SmBdun
 s sqldata4d=""
%0SmBk1 s:sqldata1d="" sqldata1d=-1E14
 s sqldata4d=$o(^User.PozycjaFakturyI("listaPozycjiIndex",sqldata1d,sqldata4d))
 i sqldata4d="" g %0SmBdun
 s:sqldata1d=-1E14 sqldata1d=""
 goto:sqldata7d'=1 %0SmBuncommitted
 if sqldata7d=1 {
 	lock +^User.PozycjaFakturyD($p(sqldata4d,"||",1))#"S":$zu(115,4)
 	if $t { set sqldata9d=$name(^User.PozycjaFakturyD($p(sqldata4d,"||",1)))_"#""SI""",sqldata8d=1 }
 	else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.PozycjaFaktury for RowID value: "_sqldata4d ztrap "LOCK"  }
 }
 ; asl MOD# 3
 s sqldata5d=$zlist(sqldata1d)
 i sqldata4d'="" s sqldata17d="" i $d(^User.PozycjaFakturyD(sqldata4d),sqldata17d)
 e  g %0SmCdun
 Set sqldata1d=$lg(sqldata17d,4)
 s sqldata6d=$zlist(sqldata1d)
 g:sqldata5d'=sqldata6d %0SmCdun
%0SmBuncommitted ;
 s SQLCODE=0 g %0Sc
%0SmCdun if $g(sqldata7d)=1 { if $g(sqldata8d)=1 { l -@sqldata9d s sqldata8d=0 } elseif $g(sqldata8d)=2 { do $classmethod($li(sqldata9d),"%UnlockId",$li(sqldata9d,2),1,1)  s sqldata8d=0 } }
 g %0SmBk1
%0SmBdun  s:$g(sqldata1d)=-1E14 sqldata1d=""
%0SmAdun 
%0Sc s %ROWCOUNT='SQLCODE
 if $g(sqldata7d)=1 { if $g(sqldata8d)=1 { l -@sqldata9d } elseif $g(sqldata8d)=2 { do $classmethod($li(sqldata9d),"%UnlockId",$li(sqldata9d,2),1,1)  } }
 s:$d(%sqltime) sqldata18d=$g(sqldata18d)+$zh-%sqltime
 n context,tmp,count,total,mean s context=$system.Context.SQL()
 if $d(sqldata18d,%sqltime) {
 if $g(context.Stats)<$zu(99) { d AggregateStats^%SYS.SQLSRV() }
 s tmp=$g(context.Stats($namespace,"7a9U87FVwYwIsyJstBivHPMSDro="))
 s count=$lg(tmp,1),total=$lg(tmp,2),mean=total+%sqltime/(count+1)
 s context.Stats($namespace,"7a9U87FVwYwIsyJstBivHPMSDro=")=$lb(count+1,total+%sqltime,$s(+count=0:0,1:(%sqltime-mean)**2+(count*((total/count-mean)**2+$lg(tmp,3)))/(count+1))) }
 q
%0Serr s $zt=""
 d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 g %0Sc
zlistaPozycjiSQLFKeyRefAction(pSameTable=0,k,pNoLock=0,%p...)
		// ON UPDATE/DELETE NOACTION
	quit:%p(1)="" 0 new rx set rx=..listaPozycjiSQLFKeyExists(%p(1)) set:rx %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler27",,"SQLUser"_"."_"PozycjaFaktury",k,"listaPozycji","'listaPozycji'") QUIT rx
zIDKEYCheck(K1,lockonly=0,concurrency=-1) public {
	s id=K1,exists=..%ExistsId(id) q:'exists $s('lockonly:$$Error^%apiOBJ(5797,$classname(),"IDKEY",id),1:1) s:concurrency=-1 concurrency=$select(..#DEFAULTCONCURRENCY="$zu(115,10)":$zu(115,10),1:$xecute("q "_..#DEFAULTCONCURRENCY)) if concurrency { s status=..%LockId(id,1) q:('status) status } if 'lockonly { s exists=..%ExistsId(id) d:concurrency ..%UnlockId(id,1,0) quit $s('exists:$$Error^%apiOBJ(5797,$classname(),"IDKEY",id),1:1) } else { d:concurrency ..%UnlockId(id,1,0) q 1 }
}
zIDKEYDelete(K1,concurrency=-1) public {
	Quit ..%DeleteId(.K1,concurrency) }
zIDKEYExists(K1,id="")
	s id=K1 q ..%ExistsId(K1)
	Quit
zIDKEYOpen(K1,concurrency=-1,sc) public { Set:'($data(sc)#2) sc=1
	Quit ..%OpenId(.K1,concurrency,.sc) }
zIDKEYSQLCheckUnique(pFromOrig=0,%pID,%pVals...)
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLCheckUnique")
zIDKEYSQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key IDKEY.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=%pVal(1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"SQLUser"_"."_"PozycjaFaktury"_":"_"IDKEY") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv=$d(^User.PozycjaFakturyD(%pVal(1))) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Quit
zIDKEYSQLFindPKeyByConstraint(%con)
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLFindPKeyByConstraint")
zIDKEYSQLFindRowIDByConstraint(%con,pInternal=0)
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLFindRowIDByConstraint")
zlistaPozycjiIndexExists(K1,id="")
	new %ROWCOUNT,SQLCODE,temp
	 ;---&sql(SELECT %ID INTO :id FROM SQLUser.PozycjaFaktury WHERE (:K1 is not null and listaPozycji = :K1) OR (:K1 IS NULL AND listaPozycji IS NULL))
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, id, K1, SQLCODE
	do %0Uo
	Quit $select('SQLCODE:1,1:0)
 q
%0Uo n sqldata12d,sqldata13d,sqldata14d,sqldata15d,sqldata16d,sqldata17d,sqldata18d,sqldata19d,sqldata20d,sqldata23d,sqldata24d,sqldata3d,sqldata5d,sqldata6d,sqldata10d,sqldata4d,sqldata8d,sqldata9d,sqldata11d
 s $zt="%0Uerr"
 n %sqltime s %sqltime=$zh
 s sqldata12d=$zu(115,2)
 s sqldata13d=0,sqldata14d=""
 d:$zu(115,15) $system.ECP.Sync()
 s sqldata3d=$g(K1),sqldata5d=$g(K1),sqldata5d=$s(sqldata5d="":"",$isvalidnum(sqldata5d):+sqldata5d,1:sqldata5d),sqldata6d=$g(K1),sqldata10d=""
 s SQLCODE=100
 ; asl MOD# 2
 s sqldata4d=sqldata5d s:sqldata4d="" sqldata4d=-1E14
 s sqldata8d="",sqldata15d=1,sqldata9d="",sqldata16d=1,sqldata11d=""
 g %0UmBk1
%0UmBqt1 s sqldata8d="" q
%0UmBpt1 s sqldata15d=0
 i '(sqldata3d'="") g %0UmBqt1
 s sqldata17d=sqldata5d
 s sqldata18d=$s(sqldata17d'="":sqldata17d,1:-1E14)
 i '(sqldata17d'="") g %0UmBqt1
 g %0UmBft1:sqldata8d=""
%0UmBat1 g %0UmBpt1:sqldata15d
 g %0UmBgt1:$d(^User.PozycjaFakturyI("listaPozycjiIndex",sqldata18d,sqldata8d))
%0UmBft1 g %0UmBpt1:sqldata15d
 s sqldata8d=$o(^User.PozycjaFakturyI("listaPozycjiIndex",sqldata18d,sqldata8d))
 q:sqldata8d=""
%0UmBgt1 q
%0UmBqt2 s sqldata9d="" q
%0UmBpt2 s sqldata16d=0
 i '(sqldata6d="") g %0UmBqt2
 s sqldata19d=sqldata10d
 s sqldata20d=$s(sqldata19d'="":sqldata19d,1:-1E14)
 g %0UmBft2:sqldata9d=""
%0UmBat2 g %0UmBpt2:sqldata16d
 g %0UmBgt2:$d(^User.PozycjaFakturyI("listaPozycjiIndex",sqldata20d,sqldata9d))
%0UmBft2 g %0UmBpt2:sqldata16d
 s sqldata9d=$o(^User.PozycjaFakturyI("listaPozycjiIndex",sqldata20d,sqldata9d))
 q:sqldata9d=""
%0UmBgt2 q
%0UmBat3 i sqldata8d="",sqldata9d="" s sqldata8d=sqldata11d d %0UmBat1 s sqldata9d=sqldata11d d %0UmBat2 g %0UmBgt3
 i sqldata8d'="",sqldata11d]]sqldata8d s sqldata8d=sqldata11d d %0UmBat1
 i sqldata9d'="",sqldata11d]]sqldata9d s sqldata9d=sqldata11d d %0UmBat2
 g %0UmBgt3
%0UmBft3 d %0UmBft1:sqldata8d=sqldata11d,%0UmBft2:sqldata9d=sqldata11d
%0UmBgt3 s sqldata11d=$S(sqldata8d="":sqldata9d,sqldata9d="":sqldata8d,sqldata9d]]sqldata8d:sqldata8d,1:sqldata9d) q
%0UmBk1 d %0UmBft3
 i sqldata11d="" g %0UmBdun
 s id=sqldata11d
 goto:sqldata12d'=1 %0UmBuncommitted
 if sqldata12d=1 {
 	lock +^User.PozycjaFakturyD($p(id,"||",1))#"S":$zu(115,4)
 	if $t { set sqldata14d=$name(^User.PozycjaFakturyD($p(id,"||",1)))_"#""SI""",sqldata13d=1 }
 	else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.PozycjaFaktury for RowID value: "_id ztrap "LOCK"  }
 }
 ; asl MOD# 3
 i id'="" s sqldata23d="" i $d(^User.PozycjaFakturyD(id),sqldata23d)
 e  g %0UmCdun
 Set sqldata4d=$lg(sqldata23d,4)
 g:'(((sqldata4d'="")&&((sqldata3d'="")&&(sqldata4d=sqldata5d)))||((sqldata6d="")&&(sqldata4d=""))) %0UmCdun
%0UmBuncommitted ;
 s SQLCODE=0 g %0Uc
%0UmCdun if $g(sqldata12d)=1 { if $g(sqldata13d)=1 { l -@sqldata14d s sqldata13d=0 } elseif $g(sqldata13d)=2 { do $classmethod($li(sqldata14d),"%UnlockId",$li(sqldata14d,2),1,1)  s sqldata13d=0 } }
 g %0UmBk1
%0UmBdun 
%0UmAdun 
%0Uc s %ROWCOUNT='SQLCODE
 if $g(sqldata12d)=1 { if $g(sqldata13d)=1 { l -@sqldata14d } elseif $g(sqldata13d)=2 { do $classmethod($li(sqldata14d),"%UnlockId",$li(sqldata14d,2),1,1)  } }
 s:$d(%sqltime) sqldata24d=$g(sqldata24d)+$zh-%sqltime
 n context,tmp,count,total,mean s context=$system.Context.SQL()
 if $d(sqldata24d,%sqltime) {
 if $g(context.Stats)<$zu(99) { d AggregateStats^%SYS.SQLSRV() }
 s tmp=$g(context.Stats($namespace,"yehgaJrZ45QxCQnVUuz56HcrbPY="))
 s count=$lg(tmp,1),total=$lg(tmp,2),mean=total+%sqltime/(count+1)
 s context.Stats($namespace,"yehgaJrZ45QxCQnVUuz56HcrbPY=")=$lb(count+1,total+%sqltime,$s(+count=0:0,1:(%sqltime-mean)**2+(count*((total/count-mean)**2+$lg(tmp,3)))/(count+1))) }
 q
%0Uerr s $zt=""
 d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 g %0Uc
]]></Routine>


<Class name="User.PozycjaFaktury">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>65172,74115.011222</TimeChanged>
<TimeCreated>64423,66065.859894</TimeCreated>

<Property name="liczbaSztuk">
<Type>%Integer</Type>
<Required>1</Required>
<Parameter name="MAXVAL" value="10"/>
<Parameter name="MINVAL" value="1"/>
</Property>

<Property name="cenaZaSztuke">
<Type>%Integer</Type>
<Required>1</Required>
<Parameter name="MAXVAL" value="10000"/>
<Parameter name="MINVAL" value="1"/>
</Property>

<Property name="listaPozycji">
<Type>User.Faktura</Type>
<Cardinality>one</Cardinality>
<Inverse>FakturaPozycjiFaktury</Inverse>
<Relationship>1</Relationship>
</Property>

<Index name="listaPozycjiIndex">
<Properties>listaPozycji</Properties>
</Index>

<Property name="towarNaPozycji">
<Type>User.Towar</Type>
<Cardinality>many</Cardinality>
<Inverse>pozycjaTowaru</Inverse>
<Relationship>1</Relationship>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.PozycjaFakturyD</DataLocation>
<DefaultData>PozycjaFakturyDefaultData</DefaultData>
<IdLocation>^User.PozycjaFakturyD</IdLocation>
<IndexLocation>^User.PozycjaFakturyI</IndexLocation>
<StreamLocation>^User.PozycjaFakturyS</StreamLocation>
<ExtentSize>10</ExtentSize>
<Data name="PozycjaFakturyDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>liczbaSztuk</Value>
</Value>
<Value name="3">
<Value>cenaZaSztuke</Value>
</Value>
<Value name="4">
<Value>listaPozycji</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>1.1</AverageFieldSize>
</Property>
<Property name="cenaZaSztuke">
<Selectivity>10.0000%</Selectivity>
<AverageFieldSize>3.9</AverageFieldSize>
</Property>
<Property name="liczbaSztuk">
<Selectivity>16.6667%</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="listaPozycji">
<Selectivity>33.3333%</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
<SQLMap name="listaPozycjiIndex">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Routine name="User.Pracownik.1" type="INT" languagemode="0" generated="1" timestamp="65172,73146.775339"><![CDATA[
 ;User.Pracownik.1
 ;(C)InterSystems, generated for class User.Pracownik.  Do NOT edit. 06/08/2019 08:19:06PM
 ;;754F785A;User.Pracownik
 ;
SQLUPPER(v,l) { quit $zu(28,v,7,$g(l,32767)) }
ALPHAUP(v,r) { quit $zu(28,v,6) }
STRING(v,l) { quit $zu(28,v,9,$g(l,32767)) }
SQLSTRING(v,l) { quit $zu(28,v,8,$g(l,32767)) }
UPPER(v) { quit $zu(28,v,5) }
MVR(v) { quit $zu(28,v,2) }
TRUNCATE(v,l) { quit $e(v,1,$g(l,3641144)) }
%BindExport(dev,Seen,RegisterOref,AllowedDepth,AllowedCapacity) public {
   i $d(Seen(+$this)) q 1
   Set Seen(+$this)=$this
   s sc = 1
 s proporef=..%source
 s proporef=..adres
 s proporef=..fakturyPracownika
   d:RegisterOref InitObjVar^%SYS.BINDSRV($this)
   i dev'="" s t=$io u dev i $zobjexport($this_"",3)+$zobjexport($this."%%OID",3)+$zobjexport($this,3)!1 u t
 If AllowedDepth>0 Set AllowedDepth = AllowedDepth - 1
 If AllowedCapacity>0 Set AllowedCapacity = AllowedCapacity - 1/3
 s proporef=..%source
 s proporef=..adres
       i proporef'="" s sc=1 i AllowedDepth'=0,AllowedCapacity'=0 s sc=proporef.%BindExport(dev,.Seen,RegisterOref,AllowedDepth,AllowedCapacity) q:('sc) sc
 s proporef=..fakturyPracownika
       i proporef'="" s sc=1 i AllowedDepth'=0,AllowedCapacity'=0 s sc=proporef.%BindExport(dev,.Seen,RegisterOref,AllowedDepth,AllowedCapacity) q:('sc) sc
   Quit sc }
%BuildIndices(pIndexList="",pAutoPurge=1,pLockFlag=0,pJournalFlag=1,pStartID="",pEndID="",pIgnoreIndexList="") public {
	If (pIndexList="")||(($listlength(pIndexList)=1)&&($listget(pIndexList,1)="")) { Quit 1 }
	Quit $$Error^%apiOBJ(5066,$classname()_"::"_$ListToString(pIndexList)) }
%BuildIndicesSegment(pStartID,pEndID,pIndexHandle=0,pLockFlag=1,pFirstRange=0,pJob="") public {
	QUIT 1 }
%CheckConstraints(pID,pConstraintList="",pCheckDisabled=0,pErrorInfo) public {
	if (''..%OnDetermineClass($select(pID="":"",1:$listbuild(pID_"")),.tMSTC)) && (tMSTC '= $classname()) { quit $classmethod(tMSTC,"%CheckConstraints",pID,pConstraintList) } else { quit 1 } }
%CheckConstraintsForExtent(pConstraintList="",pCheckDisabled=0,pErrorLog) [ SQLCODE,tID ] public { New %msg,%ROWCOUNT,%ROWID,SQLCODE,tID 
	kill pErrorLog set tStatusAll = 1, pErrorLog = 0 if '$listvalid(pConstraintList) { set pConstraintList = $listfromstring(pConstraintList) }
	 ;---&sql(declare ext cursor for select %ID into :tID FROM SQLUser.Pracownik)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE, tID
	
	 ;---&sql(open ext)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE
	do %ext0o
	if SQLCODE '< 0 {
		for {
			 ;---&sql(fetch ext)
 			 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE
			do %0Do
			if SQLCODE { if SQLCODE=100 { quit } elseif SQLCODE<0 { set tStatusAll = $select(+tStatusAll:$$Error^%apiOBJ(5521,SQLCODE,$Get(%msg)),1:$$AppendStatus^%occSystem(tStatusAll,$$Error^%apiOBJ(5521,SQLCODE,$Get(%msg)))) quit } }
			set tStatus = ..%CheckConstraints(tID,pConstraintList,pCheckDisabled,.tErrorInfo)
			if ('tStatus) { set tStatusAll = $select(+tStatusAll:tStatus,1:$$AppendStatus^%occSystem(tStatusAll,tStatus)) set:pErrorLog<1000 pErrorLog = pErrorLog + 1, pErrorLog(pErrorLog) = tErrorInfo _ $Listbuild(tStatus) }
		}
		 ;---&sql(close ext)
 		 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE
		do %ext0c
	}
	quit tStatusAll }
 q
%ext0o 
 try { s SQLCODE=$s($g(%ext0117c):-101,1:0) q:SQLCODE'=0 
 n %sqltime s %sqltime=$zh
 s %ext0117d(1)=0 s:$d(%0CacheRowLimit)#2 %ext0117d(2)=%0CacheRowLimit
 s %ext0117d(3)=$zu(115,2)
 s %ext0117d(4)=0,%ext0117d(5)=""
 d:$zu(115,15) $system.ECP.Sync()
 s %ext0117c=1,SQLCODE=0
 s:$d(%sqltime) %ext0117d(6)=$g(%ext0117d(6))+$zh-%sqltime
 } catch { d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %ext0117c,%ext0117d,%ext0117E,%ext0117n,%ext0117R }
 q
%0Afirst 
 ; asl MOD# 2
 s tID=""
%0AmBk1 s tID=$o(^User.PracownikD(tID))
 i tID="" g %0AmBdun
 goto:%ext0117d(3)'=1 %0AmBuncommitted
 if %ext0117d(3)=1 {
 	lock +^User.PracownikD($p(tID,"||",1))#"S":$zu(115,4)
 	if $t { set %ext0117d(5)=$name(^User.PracownikD($p(tID,"||",1)))_"#""SI""",%ext0117d(4)=1 }
 	else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.Pracownik for RowID value: "_tID ztrap "LOCK"  }
 }
 ; asl MOD# 3
 i tID'="",$d(^User.PracownikD(tID))
 e  g %0AmCdun
%0AmBuncommitted ;
 s:$g(SQLCODE)'<0 SQLCODE=0 s %ROWCOUNT=$i(%ext0117d(1)),%ROWID=tID,%ext0117c=10
 //-- FETCH Output
 s:$d(%sqltime) %ext0117d(6)=$g(%ext0117d(6))+$zh-%sqltime
 quit
%ext0f //-- FETCH tag
 i '$g(%ext0117c) { s SQLCODE=-102 q  } i %ext0117c=100 { s SQLCODE=100 q  } s SQLCODE=0
 i $d(%ext0117d(2))#2,$g(%ext0117d(1))'<%ext0117d(2) { s SQLCODE=100,%ROWCOUNT=%ext0117d(1),%ext0117c=100 q }
 n %sqltime s %sqltime=$zh
 g %0Afirst:%ext0117c=1
%0AmCdun if $g(%ext0117d(3))=1 { if $g(%ext0117d(4))=1 { l -@%ext0117d(5) s %ext0117d(4)=0 } elseif $g(%ext0117d(4))=2 { do $classmethod($li(%ext0117d(5)),"%UnlockId",$li(%ext0117d(5),2),1,1)  s %ext0117d(4)=0 } }
 g %0AmBk1
%0AmBdun 
%0AmAdun 
 s %ROWCOUNT=%ext0117d(1),SQLCODE=100,%ext0117c=100
 s:$d(%sqltime) %ext0117d(6)=$g(%ext0117d(6))+$zh-%sqltime
 //-- no [more] data
 quit
%ext0c i '$g(%ext0117c) { s SQLCODE=-102 q  }
 n %sqltime s %sqltime=$zh
 s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%ext0117d(1)),1:0)
 if $g(%ext0117d(3))=1 { if $g(%ext0117d(4))=1 { l -@%ext0117d(5) } elseif $g(%ext0117d(4))=2 { do $classmethod($li(%ext0117d(5)),"%UnlockId",$li(%ext0117d(5),2),1,1)  } }
 s:$d(%sqltime) %ext0117d(6)=$g(%ext0117d(6))+$zh-%sqltime
 n context,tmp,count,total,mean s context=$system.Context.SQL()
 if $d(%ext0117d(6),%sqltime) {
 if $g(context.Stats)<$zu(99) { d AggregateStats^%SYS.SQLSRV() }
 s tmp=$g(context.Stats($namespace,"nxO52CKR1OwSxxqrJ4xt+rj0mY8="))
 s count=$lg(tmp,1),total=$lg(tmp,2),mean=total+%sqltime/(count+1)
 s context.Stats($namespace,"nxO52CKR1OwSxxqrJ4xt+rj0mY8=")=$lb(count+1,total+%sqltime,$s(+count=0:0,1:(%sqltime-mean)**2+(count*((total/count-mean)**2+$lg(tmp,3)))/(count+1))) }
 k %ext0117c,%ext0117d,%ext0117E,%ext0117n,%ext0117R
 s SQLCODE=0
 quit  // close
%0Aerr d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 s %ext0117c=100
 quit  // error
%0Do try { do %ext0f q:SQLCODE'=0
 } catch { do %0Aerr }
 q
%ComposeOid(id) public {
	set tCLASSNAME = $listget($g(^User.PracownikD(id)),1)
	if tCLASSNAME="" { quit $select(id="":"",1:$listbuild(id_"","User.Pracownik")) }
	set tClass=$piece(tCLASSNAME,$extract(tCLASSNAME),*-1)
	set:tClass'["." tClass="User."_tClass
	quit $select(id="":"",1:$listbuild(id_"",tClass)) }
%Construct(initvalue) public {
	Set i%%Concurrency=$zu(115,10),i%%seriesCount=1
	Kill i%%data,i%%seriesNames,i%adres
	Quit 1 }
%ConstructCloneInit(object,deep=0,cloned,location) public {
	Set i%"%%OID"=""
	If deep>0 {
		If $isobject(..%source)=1 Set r%%source=r%%source.%ConstructClone(1,.cloned),i%%source=""
		If $data(i%adres),$isobject(..adres)=1 Set r%adres=r%adres.%ConstructClone(1,.cloned),i%adres=""
	}
	Quit 1 }
%CopyDataFromModel(pData,pTypes,pSeries="") public {
 // Generated by %ZEN.DataModel.ObjectDataModel
 Set tSC = 1
 For sno = $S(pSeries="":1,1:pSeries):1:..%seriesCount {
 Set pData(sno,"imie") = ..imieLogicalToDisplay(..imie)
 Set pData(sno,"nazwisko") = ..nazwiskoLogicalToDisplay(..nazwisko)
 Kill tData,tTypes
 Set tSC = ..adres.%CopyDataFromModel(.tData,.tTypes,sno)
 If ('tSC) Quit
 Set k = $O(tData(sno,""))
 While (k'="") {
  Set pData(sno,"adres"_"."_k) = $G(tData(sno,k))
  Set k = $O(tData(sno,k))
 }
 Set pData(sno,"tytul") = ..tytulLogicalToDisplay(..tytul)
 Set pData(sno,"fakturyPracownika") = ..fakturyPracownikaGetObjectId()
 Quit:pSeries'=""
 }
 If ('tSC) Quit tSC
 Quit tSC }
%CopyDataToModel(pData,pSeries="") public {
 // Generated by %ZEN.DataModel.ObjectDataModel
 Set tSC = 1
 For sno = $S(pSeries="":1,1:pSeries):1:..%seriesCount {
 Set ..imie = ..imieDisplayToLogical($G(pData(sno,"imie")))
 Set ..nazwisko = ..nazwiskoDisplayToLogical($G(pData(sno,"nazwisko")))
 Kill tData
 Set k = $O(pData(sno,"adres."))
 While ($E(k,1,6)="adres.") {
  Set tData(sno,$P(k,".",2,999)) = $G(pData(sno,k))
  Set k = $O(pData(sno,k))
 }
 Set tSC = ..adres.%CopyDataToModel(.tData,sno)
 If ('tSC) Quit
 Set ..tytul = ..tytulDisplayToLogical($G(pData(sno,"tytul")))
 Do ..fakturyPracownikaSetObjectId($G(pData(sno,"fakturyPracownika")))
 Quit:pSeries'=""
 }
 If ('tSC) Quit tSC
 Quit tSC }
%CreateModelInstance(pID,pConcurrency=-1,pSC) public { Set:'($data(pSC)#2) pSC=1
	Quit $S(pID="":..%New(),1:..%OpenId(pID,pConcurrency,.pSC)) }
%DeleteData(id,concurrency) public {
	Quit:id="" $$Error^%apiOBJ(5812)
	set $Ztrap="DeleteDataERR" set lockok=0,sc=""
	If concurrency {
		Lock +(^User.PracownikD(id)#"E"):$zu(115,4)
		Set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0))
		Set:lockok=2&&($tlevel) %0CacheLock($classname(),"E")=1
		If 'lockok {
			Quit $$Error^%apiOBJ(5803,$classname())
		}
	}
	If ($Data(^User.PracownikD(id))) {
		If $data(^oddEXTR($classname())) {
			Set fc=""
			For {
				Set fc=$order(^oddEXTR($classname(),"n","%1","f",fc))
				Quit:fc=""
				Set fk=""
				For {
					Set fk=$order(^oddEXTR($classname(),"n","%1","f",fc,fk))
					Quit:fk=""
					If $get(^oddEXTR($classname(),"n","%1","f",fc,fk,61))'="" {
						Set sc=$classmethod(fc,fk_"Delete",id)
						If ('sc) { Goto DeleteDataEXIT }
					}
				}
			}
			Set fc=""
			For {
				Set fc=$order(^oddEXTR($classname(),"n","IDKEY","f",fc))
				Quit:fc=""
				Set fk=""
				For {
					Set fk=$order(^oddEXTR($classname(),"n","IDKEY","f",fc,fk))
					Quit:fk=""
					If $get(^oddEXTR($classname(),"n","IDKEY","f",fc,fk,61))'="" {
						Set sc=$classmethod(fc,fk_"Delete",id)
						If ('sc) { Goto DeleteDataEXIT }
					}
				}
			}
		}
		Kill ^User.PracownikD(id)
		Set sc=1
	}
	Else { Set sc=$$Error^%apiOBJ(5810,$classname(),id) }
DeleteDataEXIT
	If concurrency,lockok {
		Lock -(^User.PracownikD(id)#"E")
	}
DeleteDataRET	Set $Ztrap = ""
	QUIT sc
DeleteDataERR	Set $Ztrap = "DeleteDataRET"
	Set sc = $$Error^%apiOBJ(5002,$ZE)
	Goto DeleteDataEXIT }
%Exists(oid="") public {
	Quit ..%ExistsId($listget(oid)) }
%ExistsId(id) public {
	Try { set tExists = $s(id="":0,$d(^User.PracownikD(id)):1,1:0) } catch tException { set tExists = 0 if '(tException.%IsA("%Exception.SystemException")) { throw tException } elseif tException.Name'="<SUBSCRIPT>" { ZT $ZE } } quit tExists }
%FileIndices(id,pIndexHandle=0) public {
	Quit 1 }
%GetLookupSQL(pProperty,pSQL,pSQLLookup) public {
 // Generated by %ZEN.DataModel.ObjectDataModel
 Set pSQL=""
 Set pSQLLookup=""
 Goto Dispatch
t1 // fakturyPracownika
 Set pSQL = "SELECT %ID FROM SQLUser.Faktura"
 Set pSQLLookup = "SELECT %ID FROM SQLUser.Faktura WHERE %ID = ?"
 Goto Done
Dispatch
 Goto $Case(pProperty,"fakturyPracownika":t1,:Done)
Done
 Quit 1 }
%GetPropertyInfo(pInfo,pExtended=0,pModelId="",pContainer="") public {
 // Generated by %ZEN.DataModel.ObjectDataModel
 Set tSC = 1
 Set pInfo("imie") = $I(pInfo)
 Set pInfo("nazwisko") = $I(pInfo)
 Set tSC = ##class(User.Adres).%GetPropertyInfo(.pInfo,pExtended,pModelId,"adres")
 Quit:('tSC) tSC
 Set pInfo("tytul") = $I(pInfo)
 Set pInfo("fakturyPracownika") = $I(pInfo)
 Set pInfo("fakturyPracownika","%ptype") = "2"
 If (pExtended) {
  Set tProp = "imie"
  Set pInfo(tProp,"%type") = "combobox"
  Set pInfo(tProp,"required") = 1
  Set pInfo(tProp,"valueList") = "Adam, Bogdan, Patrycja, Magda, Krystian, Beata, Aleksandra,Tomasz"
  Set tProp = "nazwisko"
  Set pInfo(tProp,"%type") = "combobox"
  Set pInfo(tProp,"required") = 1
  Set pInfo(tProp,"valueList") = "Nowak, Pawluk, Makowska, Kopydlowka, Kowal, Kwiatkowski"
  Set tProp = "tytul"
  Set pInfo(tProp,"%type") = "radioSet"
  Set pInfo(tProp,"required") = 1
  Set pInfo(tProp,"valueList") = "Magister, Technik"
  Set tProp = "fakturyPracownika"
  Set pInfo(tProp,"%type") = "dataCombo"
  Set pInfo(tProp,"cached") = 1
 }
 Quit tSC }
%GetPropertyList(pModelId="",pContainer="") public {
	Quit "imie,nazwisko,"_##class(User.Adres).%GetPropertyList(pModelId,"adres")_",tytul,fakturyPracownika:2"
}
%InsertBatch(objects,concurrency=0,useTransactions=0) public {
	try {
		set numerrs=0,errs="",cnt=0,ptr=0
		while $listnext(objects,ptr,data) {
			set cnt=cnt+1
			set zzc9v1=$listget(data,3)
			set lock=0
			if (useTransactions) tstart
			set id=$i(^User.PracownikD)
			if (zzc9v1'="")&&('##class(User.Faktura).%ExistsId(zzc9v1)) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5824,"User.Pracownik.fakturyPracownika("_$zu(144,1,zzc9v1)_")")) }
			try {
				set tInnerException = ""
				;
				if concurrency { lock +(^User.PracownikD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				set ^User.PracownikD(id)=data
				if (useTransactions) { tcommit }
			}
			catch tInnerException {
				set newerr=$lb(cnt,tInnerException.AsStatus())
				if '($length(errs)+$length(newerr)>32767) { set numerrs=numerrs+1, errs=errs_newerr }
				if (useTransactions) && ($Tlevel) trollback
			}
			if lock lock -(^User.PracownikD(id)#"E")
		}
	}
	catch tException {
		set newerr=$lb($g(cnt),tException.AsStatus())
		if '($length(errs)+$length(newerr)>32767) { set numerrs=numerrs+1, errs=errs_newerr }
	}
	QUIT ($lb(numerrs))_errs }
%KillExtentData()
	Kill ^User.PracownikD
	Quit 1
%LoadData(id) public {
	New %s1
	set $ZTrap="CatchError",locked=0,$ze=""
	If i%%Concurrency=4 {
		Lock +(^User.PracownikD(id)#"E"):$zu(115,4)
		if '$t do init s i%%Concurrency=0 return $$Error^%apiOBJ(5803,$classname())
	} ElseIf i%%Concurrency>1 {
		Lock +(^User.PracownikD(id)#"SE"):$zu(115,4)
		if '$t do init s i%%Concurrency=0 return $$Error^%apiOBJ(5803,$classname())
		set locked = 1
	}
	If $d(^User.PracownikD(id),%s1)#2 {
		If i%%Concurrency=2 { Lock -(^User.PracownikD(id)#"SIE") }
		Set i%imie=$lg(%s1,2),i%fakturyPracownika=$lg(%s1,3),i%adres=$lg(%s1,4),i%nazwisko=$lg(%s1,5),i%tytul=$lg(%s1,6)
		Quit 1
	} Else {
		If i%%Concurrency=2 { Lock -(^User.PracownikD(id)#"SIE") }
		do init
		set sc = $$Error^%apiOBJ(5809,$classname(),id) goto CatchError
	}
CatchError	set $ZTrap = "" if $ZE'="" { s sc = $$Error^%apiOBJ(5002,$ZE) }
	If ($get(locked))&&(i%%Concurrency<3) { Lock -(^User.PracownikD(id)#"SIE") }
	if '('sc) { set sc=$$Error^%apiOBJ(5809,$classname(),id) }
	return sc
init	Set i%adres="",i%fakturyPracownika="",i%imie="",i%nazwisko="",i%tytul=""
	quit }
%LoadDataFromMemory(id,objstate,obj) public {
	New %s1
	If $d(objstate(id)) {
		Set %s1=$g(objstate(id))
		Set i%imie=$lg(%s1,2),i%fakturyPracownika=$lg(%s1,3),i%adres=$lg(%s1,4),i%nazwisko=$lg(%s1,5),i%tytul=$lg(%s1,6)
		Quit 1
	} Else {
		Set i%adres="",i%fakturyPracownika="",i%imie="",i%nazwisko="",i%tytul=""
		Quit $$Error^%apiOBJ(5809,$classname(),id)
	} }
%LoadInit(oid="",concurrency="",reset=0) public {
	If concurrency'="" Set i%%Concurrency=concurrency
	If reset {
		Kill i%%data,i%%seriesNames,i%%source,i%adres,i%fakturyPracownika
	}
	Set i%%id="",i%%seriesCount=1,i%%source="",r%%source="",r%adres="",r%fakturyPracownika=""
	If 'reset { Set i%"%%OID"=oid If oid'="" { Set $zobjoid("",$listget(oid))=$this } }
	Quit 1 }
%LockExtent(shared=0) public {
	If shared {
		Lock +(^User.PracownikD#"S"):$zu(115,4) Quit:$t 1
		Quit $$Error^%apiOBJ(5799,$classname())
	}
	Lock +(^User.PracownikD):$zu(115,4) Quit:$t 1
	Quit $$Error^%apiOBJ(5798,$classname()) }
%LockId(id,shared=0,timeout) public { Set:'($data(timeout)#2) timeout=$zu(115,4)
	If id="" { Quit $$Error^%apiOBJ(5812) }
	Set sc=1
	If 'shared {
		Lock +(^User.PracownikD(id)#"E"):timeout Quit:$t 1
		Quit $$Error^%apiOBJ(5803,id_":"_$classname())
	}
	Lock +(^User.PracownikD(id)#"SE"):timeout Quit:$t 1
	Quit $$Error^%apiOBJ(5804,id_":"_$classname()) }
%NormalizeObject() public {
	If '$system.CLS.GetModified() Quit 1
	If m%%id Set:i%%id'="" i%%id=(..%idNormalize(i%%id))
	If m%%seriesCount Set:i%%seriesCount'="" i%%seriesCount=(..%seriesCountNormalize(i%%seriesCount))
	If m%imie Set:i%imie'="" i%imie=(..imieNormalize(i%imie))
	If m%nazwisko Set:i%nazwisko'="" i%nazwisko=(..nazwiskoNormalize(i%nazwisko))
	If m%tytul Set:i%tytul'="" i%tytul=(..tytulNormalize(i%tytul))
	Quit 1 }
%ObjectModified() public {
	If $system.CLS.GetModified() Quit 1
	If r%adres'="",..adres.%ObjectModified() Quit 1
	Quit 0 }
%OnDeleteSource(pID) public {
	Quit ..%DeleteId(pID) }
%OnDetermineClass(oid,class) public {
	Set id=$listget($get(oid))
	Quit:id="" $$Error^%apiOBJ(5812)
	Set idclass=$lg($get(^User.PracownikD(id)),1)
	If idclass="" { Set class="User.Pracownik" Quit 1 }
	Set class=$piece(idclass,$extract(idclass),*-1)
	Set:class'["." class="User."_class
	QUIT 1 }
%OnSaveSource(pSource) public {
 Set tSC = ..%Save() Set:(''tSC) ..%id = ..%Id() Quit tSC }
%PhysicalAddress(id,paddr)
	if $Get(id)="" Quit $$Error^%apiOBJ(5813,$classname())
	if (id="") { quit $$Error^%apiOBJ(5832,$classname(),id) }
	s paddr(1)=$lb($Name(^User.PracownikD(id)),$classname(),"IDKEY","listnode",id)
	s paddr=1
	Quit 1
%PurgeIndices(idxlist="",lockExtent=0,pIgnoreIndexList="") public {
	If idxlist="" { Quit 1 }
	Quit $$Error^%apiOBJ(5066,$classname()_"::"_$ListToString(idxlist)) }
%SQLAcquireLock(%rowid,s=0,unlockref=0)
	new %d,gotlock
	set %d(1)=%rowid set s=$e("E",'unlockref)_$e("S",s)
	lock +^User.PracownikD(%d(1))#s:$zu(115,4) set gotlock=$t
	if gotlock,'unlockref { set:$case($SYSTEM.Lock.ReturnCode(),2:1,4:1,:0)&&($tlevel) %0CacheLock("User.Pracownik","E")=1 }
	set:gotlock&&unlockref unlockref=unlockref+1,unlockref(unlockref)=$lb($name(^User.PracownikD(%d(1))),"User.Pracownik",s_"D")
	QUIT gotlock
%SQLAcquireTableLock(s=0,SQLCODE,to="")
	set s=$e("S",s) set:to="" to=$zu(115,4) lock +^User.PracownikD#s:to QUIT:$t 1 set SQLCODE=-110 if s="S" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler35",,"SQLUser"_"."_"Pracownik") } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler36",,"SQLUser"_"."_"Pracownik") } QUIT 0
	Quit
%SQLBuildIndices(pIndices="",pLockFlag=0,pStartID="",pEndID="",pIgnoreIndexList="")
	QUIT ..%BuildIndices(pIndices,,pLockFlag,,pStartID,pEndID,pIgnoreIndexList)
%SQLBuildPurgeIndexForRow(pIndices="",pActions="BP",pLockRow=1,%d,%e,pIgnoreIndexList="")
	// Purge and build index nodes for a single row using given values, return Status Code
	new sn,tSC,tLock set tSC=1,pActions=$zcvt(pActions,"U")
	try {
		if $g(%d(1))="" { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'SQLUser.Pracownik'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'SQLUser.Pracownik'"))) RETURN tSC }
		if pLockRow { if '..%SQLAcquireLock(%d(1)) { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'SQLUser.Pracownik' with %ID = '"_%d(1)_"'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'SQLUser.Pracownik' with %ID = '"_%d(1)_"'"))) RETURN tSC  } else { set tLock=1 }}
		if pLockRow { do ..%SQLReleaseLock(%d(1),0,0) set tLock=0 }
	}
	catch {
		if $g(tLock) { do ..%SQLReleaseLock(%d(1),0,0) }
		set tSC=$select(+tSC:$$Error^%apiOBJ(5594,$ze),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5594,$ze)))
	}
	QUIT tSC
%SQLCopyIcolIntoName()
	if %oper="DELETE" {
		set:$d(%d(1)) %f("ID")=%d(1)
		QUIT
	}
	set:$d(%d(1)) %f("ID")=%d(1) set:$a(%e,2)&&$d(%d(2)) %f("adres")=%d(2) set:$a(%e,3)&&$d(%d(3)) %f("fakturyPracownika")=%d(3) set:$a(%e,4)&&$d(%d(4)) %f("imie")=%d(4) set:$a(%e,5)&&$d(%d(5)) %f("nazwisko")=%d(5) set:$a(%e,6)&&$d(%d(6)) %f("tytul")=%d(6) set:$a(%e,7)&&$d(%d(7)) %f("x__classname")=%d(7) set:$a(%e,8)&&$d(%d(8)) %f("adres_kodPocztowy")=%d(8) set:$a(%e,9)&&$d(%d(9)) %f("adres_kraj")=%d(9) set:$a(%e,10)&&$d(%d(10)) %f("adres_miasto")=%d(10) set:$a(%e,11)&&$d(%d(11)) %f("adres_ulica")=%d(11)
	QUIT
%SQLDefineiDjVars(%d,subs,master)
	QUIT
%SQLDelete(%rowid,%check,%tstart=1,%mv=0,%polymorphic=0)
	new bva,ce,%d,dc,%e,%ele,%itm,%key,%l,%nc,omcall,%oper,%pos,%s,sn,sqlcode,subs set %oper="DELETE",sqlcode=0,%ROWID=%rowid,%d(1)=%rowid,%e(1)=%rowid,%l=$c(0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,2) {
		new %ls lock +^User.PracownikD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("User.Pracownik","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"SQLUser"_"."_"Pracownik",$g(%d(1))) QUIT  }
	}
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORDelete"
	do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) if sqlcode { set SQLCODE=-106 do ..%SQLEExit() QUIT  }
	if %e(7)'="" { set sn=$p(%e(7),$e(%e(7)),$l(%e(7),$e(%e(7)))-1) if "Pracownik"'=sn { new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLDelete",%rowid,%check,%tstart,%mv,1) QUIT  }}
	if '$a(%check),'$zu(115,7) do  if sqlcode set SQLCODE=sqlcode do ..%SQLEExit() QUIT  
	. new %fk,%k,%p,%st,%t,%z set %k="",%p("%1")="%d(1),",%p("IDKEY")="%d(1),"
	. for  quit:sqlcode<0  set %k=$o(^oddEXTR("User.Pracownik","n",%k)) quit:%k=""  set %t="" for  set %t=$o(^oddEXTR("User.Pracownik","n",%k,"f",%t)) quit:%t=""  set %st=(%t="User.Pracownik") set %fk="" for  set %fk=$order(^oddEXTR("User.Pracownik","n",%k,"f",%t,%fk)) quit:%fk=""  x "set %z=$classmethod(%t,%fk_""SQLFKeyRefAction"",%st,%k,$a(%check,2),"_%p(%k)_")" if %z set sqlcode=-124 quit  
	. quit:sqlcode  quit:$a(%check,2)=1
	. if $g(%e(3))'="",'$g(%0CacheLock("User.Faktura","E")),'##class(User.Faktura).%SQLExists(1,,%e(3)) set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler3",,"SQLUser"_"."_"Pracownik","fakturyPracownika","FAKTURYPRACOWNIKA") quit
	set ce="" for  { set ce=$order(^oddSQL("SQLUser","Pracownik","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children
	if '$a(%check,3) {
	}
	k ^User.PracownikD(%d(1))
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORDelete	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"Pracownik",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"Pracownik") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT
	Quit
%SQLDeleteTempStreams()
	// Delete all temporary streams
	QUIT
%SQLEExit()
	do ..%SQLUnlock() 
	do ..%SQLUnlockRef()
	if %tstart,$zu(115,1)=1,$TLEVEL { set %tstart=0 TROLLBACK 1 } kill:$g(omcall) %0CacheSQLRA QUIT  
	Quit
%SQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key %1.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=%pVal(1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"SQLUser"_"."_"Pracownik"_":"_"%1") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv=$d(^User.PracownikD(%pVal(1))) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Quit
%SQLGetLock(pRowId,pShared=0,pUnlockRef)
	QUIT ..%SQLAcquireLock(pRowId,pShared,.pUnlockRef)
%SQLGetOld(%rowid,%d,%e,sqlcode)
	new s set %d(1)=%rowid if '$d(^User.PracownikD(%d(1)),s) { set sqlcode=100 quit  }
	Set %e(7)=$lg(s),%e(3)=$lg(s,3)
	set %e(10)=$lg($lg(s,4)) set %e(9)=$lg($lg(s,4),2) set %e(11)=$lg($lg(s,4),3) set %e(8)=$lg($lg(s,4),4)
	QUIT
%SQLGetOldAll()
	new s set %d(1)=%rowid if '$d(^User.PracownikD(%d(1)),s) { set sqlcode=100 quit  }
	Set %e(7)=$lg(s),%e(4)=$lg(s,2),%e(3)=$lg(s,3),%e(2)=$lg(s,4),%e(5)=$lg(s,5),%e(6)=$lg(s,6)
	set %e(10)=$lg($lg(s,4)) set %e(9)=$lg($lg(s,4),2) set %e(11)=$lg($lg(s,4),3) set %e(8)=$lg($lg(s,4),4)
	QUIT
%SQLInsert(%d,%check,%inssel,%vco,%tstart=1,%mv=0)
	new bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,sqlcode,sn,subs,unlockref,icol set %oper="INSERT",sqlcode=0,%l=$c(0,0,0),unlockref=1
	if $a(%check,7) { new %diu merge %diu=%d }
	if $d(%d(1)),'$zu(115,11) { if %d(1)'="" { set SQLCODE=-111,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler6",,"ID","SQLUser"_"."_"Pracownik") QUIT ""  } kill %d(1) } 
	if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode QUIT "" }
	do ..%SQLNormalizeFields()
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  } set $zt="ERRORInsert"
	do ..%SQLInsertComputes()
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
		do:($g(%d(2))="")&&(($g(%d(8))="")&&($g(%d(9))="")&&($g(%d(10))="")&&($g(%d(11))="")) ..%SQLMissing("adres")
			do:$g(%d(4))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,5)) do:$g(%d(5))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,6)) do:$g(%d(6))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,7)) 
			quit:sqlcode<0		// A required field was missing
			quit:$zu(115,7)  set %msg=""
			if $g(%d(3))'="",'##class(User.Faktura).%SQLExists($s($a(%check,2)=1:-1,1:0),.unlockref,%d(3)) { set sqlcode=-121,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler41",,"SQLUser"_"."_"Pracownik","fakturyPracownika","FAKTURYPRACOWNIKA")_"  "_$g(%msg) quit  }		// Foreign Key Constraint fakturyPracownika
		} while 0
		if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT "" }		// A constraint failed
	}
	if '$d(%d(1)) { set %d(1)=$i(^User.PracownikD) } elseif %d(1)>$g(^User.PracownikD) { if $i(^User.PracownikD,$zabs(%d(1)-$g(^User.PracownikD))) {}} elseif $d(^User.PracownikD(%d(1))) { set SQLCODE=-119,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler33",,"ID",%d(1),"SQLUser"_"."_"Pracownik"_"."_"ID") do ..%SQLEExit() QUIT "" }
	for icol=7,8,9,10,11,3 { set:'($d(%d(icol))#2) %d(icol)="" }
	if '$a(%check,2) {
		new %ls lock +^User.PracownikD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("User.Pracownik","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"SQLUser"_"."_"Pracownik",$g(%d(1))) do ..%SQLEExit() QUIT ""  }
	}
	set ^User.PracownikD(%d(1))=$lb($g(%d(7)),%d(4),$g(%d(3)),$lb($g(%d(10)),$g(%d(9)),$g(%d(11)),$g(%d(8))),%d(5),%d(6))
	lock:$a(%l) -^User.PracownikD(%d(1))#"E"
	TCOMMIT:%tstart&&($zu(115,1)=1)
	do ..%SQLUnlockRef()
	set SQLCODE=0
	QUIT %d(1) 			// %SQLInsert
ERRORInsert	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"Pracownik",$ze)
	if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"Pracownik") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  }
	do ..%SQLEExit()
	QUIT ""
%SQLInsertComputes(view=0)
	if 'view {
	do SQLComputeIns8
	do SQLComputeIns9
	do SQLComputeIns10
	do SQLComputeIns11
	}
	QUIT
SQLComputeIns8		// Compute code for field adres_kodPocztowy
 s:(%oper="INSERT"&&($g(%d(2))'=""))||(%oper="UPDATE") %d(8)=$lg($g(%d(2)),4) q
SQLComputeIns9		// Compute code for field adres_kraj
 s:(%oper="INSERT"&&($g(%d(2))'=""))||(%oper="UPDATE") %d(9)=$lg($g(%d(2)),2) q
SQLComputeIns10		// Compute code for field adres_miasto
 s:(%oper="INSERT"&&($g(%d(2))'=""))||(%oper="UPDATE") %d(10)=$lg($g(%d(2)),1) q
SQLComputeIns11		// Compute code for field adres_ulica
 s:(%oper="INSERT"&&($g(%d(2))'=""))||(%oper="UPDATE") %d(11)=$lg($g(%d(2)),3) q
%SQLInvalid(pIcol,pVal) public {
	set:$l($g(pVal))>40 pVal=$e(pVal,1,40)_"..." do:'$d(%n) ..%SQLnBuild() set %msg=$s($g(%msg)'="":%msg_$c(13,10),1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler37",,"SQLUser"_"."_"Pracownik"_"."_$lg(%n,pIcol),$s($g(pVal)'="":$s(pVal="":"<NULL>",pVal=$c(0):"<EMPTY STRING>",1:"'"_pVal_"'"),1:"")),sqlcode=$s(%oper="INSERT":-104,1:-105)
	QUIT sqlcode }
%SQLMissing(fname)
	set sqlcode=-108,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler47",,fname,"SQLUser"_"."_"Pracownik") quit
%SQLNormalizeFields()
	set:$g(%d(3))'="" %d(3)=$select(%d(3)=$c(0)&&$zu(115,13):"",1:%d(3)\1)
	QUIT
%SQLPurgeIndices(pIndices="",pLockExtent=0,pIgnoreIndexList="")
	QUIT ..%PurgeIndices(pIndices,pLockExtent,pIgnoreIndexList)
%SQLQuickBulkInsert(%nolock=0)
	// Insert multiple new rows with values %qd(icol)
	new c,call,nc,nr,%qd,r,x set:%nolock=2 %nolock=0
	set nr=$zobjexport(12) for r=1:1:nr { set nc=$zobjexport(12) kill %qd for c=1:1:nc { set:$zobjexport(17) %qd(c+1)=$zobjexport(12) } do ..%SQLQuickInsert(.%qd,%nolock) set x=$zobjexport($s(%qrc:-1,1:%ROWID),18) } QUIT
%SQLQuickBulkLoad(%rowidlist,%nolock=0,pkey=0)
	// QuickLoad multiple rows
	new i,rc set:%nolock=2 %nolock=0 set rc=0
	for i=2:1:$lg(%rowidlist)+1 { do ..%SQLQuickLoad($lg(%rowidlist,i),%nolock) if SQLCODE=0 { set rc=rc+1 } else { QUIT  } } set %ROWCOUNT=rc QUIT
	Quit
%SQLQuickBulkSave(%nolock=0)
	// Insert and/or Update multiple [new] rows with values %qd(icol)
	set x=$zobjexport(-1,18),%qrc=400,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler44",,"SQLUser"_"."_"Pracownik") QUIT
%SQLQuickBulkUpdate(%nolock=0)
	// Update multiple new rows with values %qd(icol)
	new c,call,nc,nr,%qd,r,x set:%nolock=2 %nolock=0 set nr=$zobjexport(12) for r=1:1:nr { set %rowid=$zobjexport(12),nc=$zobjexport(12) kill %qd for c=1:1:nc { set:$zobjexport(17) %qd(c+1)=$zobjexport(12) } do ..%SQLQuickUpdate(%rowid,.%qd,%nolock) set x=$zobjexport($s(%qrc:-1,1:%ROWID),18) quit:%qrc  } QUIT  
%SQLQuickDelete(%rowid,%nolock=0,pkey=0)
	// Delete row where SQLRowID=%rowid
	set:%nolock=2 %nolock=0
	do ..%SQLDelete(%rowid,$c(0,%nolock=1,0,0,0,0))
	if SQLCODE<0 { set %qrc=-SQLCODE,%ROWCOUNT=0 } else { set %ROWCOUNT=1,%qrc=SQLCODE } QUIT
	Quit
%SQLQuickInsert(d,%nolock=0,pkey=0,parentpkey=0)
	// Insert new row with values d(icol)
	set:%nolock=2 %nolock=0
	do ..%SQLQuickOdbcToLogical(.d)
	set %ROWID=..%SQLInsert(.d,$c(0,%nolock=1,0,0,0,0)),%ROWCOUNT='SQLCODE,%qrc=SQLCODE kill d QUIT
%SQLQuickLoad(%rowid,%nolock=0,pkey=0,qq=0)
	// Get fields from row where SQLRowID=%rowid
	new d,i,il,subs set:%nolock=2 %nolock=1
	if %nolock=0 { if '..%SQLAcquireLock(%rowid) { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler45",,"SQLUser"_"."_"Pracownik",%rowid),%ROWCOUNT=0 QUIT  } set:$zu(115,2) il=$zu(115,2,0) }
	new s,ul set ul=0,d(1)=%rowid if $zu(115,2)=1 { lock +^User.PracownikD(d(1))#"S":$zu(115,4) if $t { set ul=1 } else { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler46",,"SQLUser"_"."_"Pracownik",%rowid),%ROWCOUNT=0 quit  } }
	if '$d(^User.PracownikD(d(1)),s) { set SQLCODE=100,%qrc=100 if %nolock=0 { do:$g(il) $zu(115,2,il) }} else { set SQLCODE=0
	if qq { set d(7)=$lg(s) if d(7)'="" { new sn set sn=$p(d(7),$e(d(7)),$l(d(7),$e(d(7)))-1) if "Pracownik"'=sn { if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,1) do:$g(il) $zu(115,2,il) } kill d set:sn'["." sn="User."_sn do $classmethod(sn,"%SQLQuickLoad",%rowid,%nolock,0,1) QUIT  }}}
	set d(2)=$lg(s,4) set d(3)=$lg(s,3) set d(4)=$lg(s,2) set d(5)=$lg(s,5) set d(6)=$lg(s,6) set d(7)=$lg(s) set d(8)=$lg($lg(s,4),4) set d(9)=$lg($lg(s,4),2) set d(10)=$lg($lg(s,4)) set d(11)=$lg($lg(s,4),3)  }
	do ..%SQLQuickLogicalToOdbc(.d)
	if SQLCODE set %ROWCOUNT=0 set:SQLCODE<0 SQLCODE=-SQLCODE lock:ul -^User.PracownikD(d(1))#"SI" set %qrc=SQLCODE QUIT
	set:qq d=$zobjexport("User.Pracownik",18),d=$zobjexport(11,18) set i=-1 for  { set i=$o(d(i)) quit:i=""  set d=$zobjexport(d(i),18) } set %qrc=0,%ROWCOUNT=1 lock:ul -^User.PracownikD(d(1))#"SI" if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,0) do:$g(il) $zu(115,2,il) } QUIT
	Quit
%SQLQuickLogicalToOdbc(%d)
	set:$g(%d(2))'="" %d(2)=$$LogicalToOdbcField2(%d(2))
	QUIT
LogicalToOdbcField2(val="") {
	Quit $listget(val,1)_","_$listget(val,2)_","_$listget(val,3)_","_$listget(val,4)
}
	Quit
%SQLQuickOdbcToLogical(%d)
	set:$g(%d(2))'="" %d(2)=$$OdbcToLogicalField2(%d(2))
	QUIT
OdbcToLogicalField2(val="") {
	Quit $lb($piece(val,",",1),$piece(val,",",2),$piece(val,",",3),$piece(val,",",4))
}
	Quit
%SQLQuickUpdate(%rowid,d,%nolock=0,pkey=0)
	// Update row with SQLRowID=%rowid with values d(icol)
	set:%nolock=2 %nolock=0
	do ..%SQLQuickOdbcToLogical(.d)
	do ..%SQLUpdate(%rowid,$c(0,%nolock=1,0,0,0,0),.d) set %ROWCOUNT='SQLCODE set:SQLCODE=100 SQLCODE=0 set %qrc=SQLCODE kill d QUIT
%SQLReleaseLock(%rowid,s=0,i=0,e="")
	new %d
	set:e="" e=1 set %d(1)=%rowid set s=$e("E",e)_$e("S",s)_$e("D",i)
	lock -^User.PracownikD(%d(1))#s
	QUIT
%SQLReleaseTableLock(s=0,i=0)
	set s=$e("S",s)_$e("D",i) lock -^User.PracownikD#s QUIT 1
	Quit
%SQLUnlock()
	lock:$a(%l) -^User.PracownikD(%d(1))#"E"
	QUIT
%SQLUnlockError(cname)
	set sqlcode=-110 if %oper="DELETE" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler48",,"SQLUser"_"."_"Pracownik",cname) } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler49",,"SQLUser"_"."_"Pracownik",cname) } quit
	Quit
%SQLUnlockRef()
	for %itm=2:1:$g(unlockref) {
		if $lg(unlockref(%itm))'="%UnlockId" { lock -@$lg(unlockref(%itm))#$lg(unlockref(%itm),3) }
		else { do $classmethod($lg(unlockref(%itm),2),$lg(unlockref(%itm)),$lg(unlockref(%itm),3),1,1) }
	}
	QUIT
%SQLUpdate(%rowid,%check,%d,%vco,%tstart=1,%mv=0,%polymorphic=0,%soid)
	new %e,bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,icol,omcall,s,sn,sqlcode,subs,t,unlockref set %oper="UPDATE",sqlcode=0,%ROWID=%rowid,$e(%e,1)=$c(0),%l=$c(0,0,0),unlockref=1
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode QUIT  }
	do ..%SQLNormalizeFields()
	if $d(%d(1)),%d(1)'=%rowid { set SQLCODE=-107,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler16",,"ID","SQLUser"_"."_"Pracownik") QUIT  }
	for icol=2:1:11 { set $e(%e,icol)=$c($d(%d(icol))) }
	set %d(1)=%rowid,%e(1)=%rowid
	if '$a(%check,2) {
		new %ls lock +^User.PracownikD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("User.Pracownik","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"SQLUser"_"."_"Pracownik",$g(%d(1))) QUIT  }
	}
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORUpdate"
	if $g(%vco)="" { do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) i sqlcode { s SQLCODE=-109 do ..%SQLEExit() QUIT  } for icol=7,8,9,10,11,3 { set:'$d(%d(icol)) %d(icol)=%e(icol) set:%d(icol)=%e(icol) $e(%e,icol)=$c(0) }} else { do ..%SQLGetOldAll() if sqlcode { set SQLCODE=-109 do ..%SQLEExit() QUIT  } for icol=2,3,4,5,6,7,8,9,10,11 { set:'$d(%d(icol)) %d(icol)=%e(icol) set:%d(icol)=%e(icol) $e(%e,icol)=$c(0) }}
	if %e(7)'="" set sn=$p(%e(7),$e(%e(7)),$l(%e(7),$e(%e(7)))-1) if "Pracownik"'=sn new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLUpdate",%rowid,%check,.%d,$g(%vco),%tstart,%mv,1) QUIT
	do ..%SQLUpdateComputes()
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
			if ($a(%e,2)&&($g(%d(2))=""))||(($g(%d(8))="")&&($g(%d(9))="")&&($g(%d(10))="")&&($g(%d(11))="")) { do ..%SQLMissing("adres") }
			if $a(%e,4),$g(%d(4))="" { do ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,5)) }
			if $a(%e,5),$g(%d(5))="" { do ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,6)) }
			if $a(%e,6),$g(%d(6))="" { do ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,7)) }
			quit:sqlcode
			quit:$zu(115,7)  set %msg=""
			if $a(%e,3),$g(%updcas)'="%1",$g(%d(3))'="",'##class(User.Faktura).%SQLExists($s($a(%check,2)=1:-1,1:0),.unlockref,%d(3)) { set sqlcode=-122,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler41",,"SQLUser"_"."_"Pracownik","fakturyPracownika","FAKTURYPRACOWNIKA")_"  "_$g(%msg) quit  }
			quit:$a(%check,2)=1  quit:$g(%updcas)'=""
			if ($a(%e,3)),%e(3)'="",'$g(%0CacheLock("User.Faktura","E")),'##class(User.Faktura).%SQLExists(1,,%e(3)) { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler21",,"SQLUser"_"."_"Pracownik","fakturyPracownika","FAKTURYPRACOWNIKA") quit  }
		} while 0
		if sqlcode { set SQLCODE=sqlcode do ..%SQLEExit() QUIT  }
	}
	set:$s($a(%e,3):1,$a(%e,4):1,$a(%e,5):1,$a(%e,6):1,$a(%e,7):1,$a(%e,8):1,$a(%e,9):1,$a(%e,10):1,1:$a(%e,11)) s=$g(^User.PracownikD(%d(1))),^User.PracownikD(%d(1))=$lb($s($a(%e,7):%d(7),1:$lg(s)),$s($a(%e,4):%d(4),1:$lg(s,2)),$s($a(%e,3):%d(3),1:$lg(s,3)),$lb($s($a(%e,10):%d(10),1:$lg($lg(s,4))),$s($a(%e,9):%d(9),1:$lg($lg(s,4),2)),$s($a(%e,11):%d(11),1:$lg($lg(s,4),3)),$s($a(%e,8):%d(8),1:$lg($lg(s,4),4))),$s($a(%e,5):%d(5),1:$lg(s,5)),$s($a(%e,6):%d(6),1:$lg(s,6)))
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	do ..%SQLUnlockRef()
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORUpdate	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"Pracownik",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"Pracownik") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT  
	Quit
%SQLUpdateComputes(view=0)
	if $a(%e,2) do SQLComputeUpd8 set:%d(8)'=$g(%e(8)) $e(%e,8)=$c(1)
	if $a(%e,2) do SQLComputeUpd9 set:%d(9)'=$g(%e(9)) $e(%e,9)=$c(1)
	if $a(%e,2) do SQLComputeUpd10 set:%d(10)'=$g(%e(10)) $e(%e,10)=$c(1)
	if $a(%e,2) do SQLComputeUpd11 set:%d(11)'=$g(%e(11)) $e(%e,11)=$c(1)
	QUIT
SQLComputeUpd8		// Compute code for field adres_kodPocztowy
 s:(%oper="INSERT"&&($g(%d(2))'=""))||(%oper="UPDATE") %d(8)=$lg($g(%d(2)),4) q
SQLComputeUpd9		// Compute code for field adres_kraj
 s:(%oper="INSERT"&&($g(%d(2))'=""))||(%oper="UPDATE") %d(9)=$lg($g(%d(2)),2) q
SQLComputeUpd10		// Compute code for field adres_miasto
 s:(%oper="INSERT"&&($g(%d(2))'=""))||(%oper="UPDATE") %d(10)=$lg($g(%d(2)),1) q
SQLComputeUpd11		// Compute code for field adres_ulica
 s:(%oper="INSERT"&&($g(%d(2))'=""))||(%oper="UPDATE") %d(11)=$lg($g(%d(2)),3) q
%SQLValidateFields(sqlcode)
	if $g(%d(10))'="",'($$ValidateField10(%d(10))) { set sqlcode=..%SQLInvalid(10+1,%d(10)) } 
	if $g(%d(4))'="",'($$ValidateField4(%d(4))) { set sqlcode=..%SQLInvalid(4+1,%d(4)) } 
	if $g(%d(5))'="",'($$ValidateField5(%d(5))) { set sqlcode=..%SQLInvalid(5+1,%d(5)) } 
	if $g(%d(6))'="",'($$ValidateField6(%d(6))) { set sqlcode=..%SQLInvalid(6+1,%d(6)) } 
	if $g(%d(11))'="",'($s(%d(11)'[","&&(",Czumy,Peowiakow,Wiejska,Zamojska,"[(","_$select(%d(11)=$c(0):"",1:%d(11))_",")):1,1:$$Error^%apiOBJ(7205,%d(11),",Czumy,Peowiakow,Wiejska,Zamojska"))) { set sqlcode=..%SQLInvalid(11+1,%d(11)) } 
	if $g(%d(9))'="",'($s(%d(9)'[","&&(",Polska,"[(","_$select(%d(9)=$c(0):"",1:%d(9))_",")):1,1:$$Error^%apiOBJ(7205,%d(9),",Polska"))) { set sqlcode=..%SQLInvalid(9+1,%d(9)) } 
	if $g(%d(8))'="",'(($l(%d(8))'>20)) { set sqlcode=..%SQLInvalid(8+1,%d(8)) } 
	QUIT 'sqlcode
ValidateField4(%val) {	Q $s(%val'[","&&(",Adam, Bogdan, Patrycja, Magda, Krystian, Beata, Aleksandra,Tomasz,"[(","_$select(%val=$c(0):"",1:%val)_",")):1,1:$$Error^%apiOBJ(7205,%val,",Adam, Bogdan, Patrycja, Magda, Krystian, Beata, Aleksandra,Tomasz"))
}
ValidateField5(%val) {	Q $s(%val'[","&&(",Nowak, Pawluk, Makowska, Kopydlowka, Kowal, Kwiatkowski,"[(","_$select(%val=$c(0):"",1:%val)_",")):1,1:$$Error^%apiOBJ(7205,%val,",Nowak, Pawluk, Makowska, Kopydlowka, Kowal, Kwiatkowski"))
}
ValidateField6(%val) {	Q $s(%val'[","&&(",Magister, Technik,"[(","_$select(%val=$c(0):"",1:%val)_",")):1,1:$$Error^%apiOBJ(7205,%val,",Magister, Technik"))
}
ValidateField10(%val) {	Q $s(%val'[","&&(",Warszawa,Gdynia, Zamosc,Gdansk,Krakow,"[(","_$select(%val=$c(0):"",1:%val)_",")):1,1:$$Error^%apiOBJ(7205,%val,",Warszawa,Gdynia, Zamosc,Gdansk,Krakow"))
}
	Quit
%SQLnBuild() public {
	set %n=$lb(,"ID","adres","fakturyPracownika","imie","nazwisko","tytul","x__classname","adres_kodPocztowy","adres_kraj","adres_miasto","adres_ulica")
	QUIT }
%Save(related=1) public {
	Set $ZTrap="%SaveERR"
	New %objTX Set sc=1,traninit=0 If '$data(%objTX2) New %objTX2 Set %objTX2=1
	If +$g(%objtxSTATUS)=0 { Set traninit=1 k %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxOIDUNASSIGNED,%objtxMODIFIED,%objtxVERSION k:'$TLevel %objtxTID,%objtxID i '$zu(115,9) { s %objtxSTATUS=1 } else { TStart  s %objtxSTATUS=2 } }
	If $get(%objTX2(+$this)) Set sc=..%BuildObjectGraph(1) Quit:('sc) sc Set intRef=+$this,objValue=$get(%objTX(1,intRef,1)),sc=..%SerializeObject(.objValue,1) Set:(''sc) %objTX(1,intRef,1)=objValue Quit sc
	Set sc=..%BuildObjectGraph(related+2) If ('sc) ZTrap "SG"
	If '$data(%objTX(2)) s sc=1 GoTo %SaveCOMMIT
	Set %objTX(3)=0,intRef="" For  Set intRef=$order(%objTX(2,intRef)) Quit:intRef=""  If '$data(%objTX(1,intRef,2)) Set %objTX(3,$increment(%objTX(3)))=%objTX(1,intRef) Kill %objTX(2,intRef)
	For ptr=1:1 Quit:ptr>%objTX(3)  Set objRef=%objTX(3,ptr),objValue=$get(%objTX(1,+objRef,1)),sc=objRef.%SerializeObject(.objValue) Do  Set %objTX(1,+objRef,1)=objValue Kill %objTX(1,+objRef,3) Do $system.CLS.SetModified(objRef,0)
	. If ('sc) ZTrap "SG"
	. i $g(%objtxSTATUS)=2 { Set %objtxMODIFIED(+objRef)=$system.CLS.GetModifiedBits(objRef) }
	. Set intSucc="" For  Set intSucc=$order(%objTX(1,+objRef,3,intSucc)) Quit:intSucc=""  Kill %objTX(1,+objRef,3,intSucc),%objTX(1,intSucc,2,+objRef) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$increment(%objTX(3)))=%objTX(1,intSucc) Kill %objTX(2,intSucc)
	Kill %objTX(3) Set %objTX(3)=0 For  Set pserial=0 Do  Quit:'pserial
	. Set intRef="" For  Set intRef=$order(%objTX(2,intRef)) Quit:intRef=""  Set intPred="" For  Set intPred=$order(%objTX(1,intRef,2,intPred)) Quit:intPred=""  If $get(%objTX(1,intPred,6))=1 Set objValue=$get(%objTX(1,intPred,1)),sc=(%objTX(1,intPred)).%SerializeObject(.objValue,1) s:('sc) %objTX(2,intPred,1)=sc If (''sc) Set pserial=1,%objTX(1,intPred,1)=objValue Do
	. . Set intSucc="" For  Set intSucc=$order(%objTX(1,intPred,3,intSucc)) Quit:intSucc=""  Kill %objTX(1,intPred,3,intSucc),%objTX(1,intSucc,2,intPred) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$i(%objTX(3)))=%objTX(1,intSucc) Kill %objTX(2,intSucc)
	. . For ptr=1:1 Quit:ptr>%objTX(3)  Set objSerialize=%objTX(3,ptr),objValue=$get(%objTX(1,+objSerialize,1)),sc=objSerialize.%SerializeObject(.objValue) Do  Set %objTX(1,+objSerialize,1)=objValue Kill %objTX(1,+objSerialize,3) Do $system.CLS.SetModified(objSerialize,0)
	. . . If ('sc) ZTrap "SG"
	. . . i $g(%objtxSTATUS)=2 { Set %objtxMODIFIED(+objSerialize)=$system.CLS.GetModifiedBits(objSerialize) }
	. . . Set intSucc="" For  Set intSucc=$order(%objTX(1,+objSerialize,3,intSucc)) Quit:intSucc=""  Kill %objTX(1,+objSerialize,3,intSucc),%objTX(1,intSucc,2,+objSerialize) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$i(%objTX(3)))=%objTX(1,intSucc) Kill %objTX(2,intSucc)
	. . Kill %objTX(3) Set %objTX(3)=0
	If $data(%objTX(2))>2 {
		Set sc=$$Error^%apiOBJ(5827,$classname())
		set intRef="" for  set intRef=$order(%objTX(2,intRef)) quit:intRef=""  if ('$Get(%objTX(2,intRef,1),1)) set sc=$$EmbedStatus^%apiOBJ(sc,%objTX(2,intRef,1))
	 	ZTrap "SG"
	}
	Set cmd="" For  Set cmd=$order(%objTX(9,cmd)) Quit:cmd=""  Xecute cmd
%SaveCOMMIT	If traninit { i $g(%objtxSTATUS)=1 { k %objtxSTATUS } else { If $Tlevel { TCommit  } k %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxOIDUNASSIGNED,%objtxMODIFIED,%objtxVERSION k:'$TLevel %objtxTID,%objtxID } }
	Do $system.CLS.SetModified(0) Quit sc
%SaveERR	Set $ZTrap="" If $extract($zerror,1,5)'="<ZSG>" Set sc=$$Error^%apiOBJ(5002,$ZE)
	If $get(traninit) { i $g(%objtxSTATUS)=2 { s sc=$select(+sc:$$%TRollBack^%occTransaction(),1:$$AppendStatus^%occSystem(sc,$$%TRollBack^%occTransaction())) k %objtxTID,%objtxID } else { k %objtxSTATUS } }
	Quit sc }
%SaveData(id) public {
	try {
		set id=$listget(i%"%%OID") if id'="" { set insert=0,idassigned=1 } else { set insert=1,idassigned=0 }
		set lock=0,lockok=0,tSharedLock=0
		if 'idassigned { set id=$i(^User.PracownikD) Set $zobjoid("User.Pracownik",id)=$this,.."%%OID"=$lb(id_"","User.Pracownik") set:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this)="" }
		if (i%fakturyPracownika'="")&&('##class(User.Faktura).%ExistsId(i%fakturyPracownika)) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5824,"User.Pracownik.fakturyPracownika("_$zu(144,1,i%fakturyPracownika)_")")) }
		try {
			set tInnerException = ""
			;
			if 'insert {
				if (i%%Concurrency<4)&&(i%%Concurrency) { lock +(^User.PracownikD(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lockok=2&&($tlevel) %0CacheLock($classname(),"E")=1 if lockok { set lock=1 } else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if ('$Data(^User.PracownikD(id))) {
					set insert=1
					if lock { lock -(^User.PracownikD(id)#"E") set (lock,lockok) = 0 }
				}
			}
			if insert {
				if ('lockok&&..%Concurrency&&$tlevel)||(i%%Concurrency=4) {  lock +(^User.PracownikD(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:(lockok=2&&(i%%Concurrency'=4)) %0CacheLock($classname(),"E")=1 set:lockok lock=1 if 'lockok { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if i%%Concurrency=3 { lock +(^User.PracownikD(id)#"ES") set tSharedLock=1 }
				set ^User.PracownikD(id)=$lb("",i%imie,i%fakturyPracownika,i%adres,i%nazwisko,i%tytul)
			}
			else {
				set ^User.PracownikD(id)=$lb("",i%imie,i%fakturyPracownika,i%adres,i%nazwisko,i%tytul)
			}
			set tStatus = 1
		}
		catch tInnerException {
			if ('idassigned) { Set $zobjoid("",$listget(i%"%%OID"))="" Set $this."%%OID" = "" kill:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this) }
			if (tSharedLock) {  lock -(^User.PracownikD(id)#"ES") } elseif (lockok=1)&&(insert)&&(i%%Concurrency=4) {  lock -(^User.PracownikD(id)) }
		}
		if lock lock -(^User.PracownikD(id)#"E")
		if $Isobject(tInnerException) { throw tInnerException }
	}
	catch tException {
		set tStatus = tException.AsStatus()
	}
	quit tStatus }
%SaveDirect(id="",idList="",data,concurrency=-1) public {
	try {
		set zzc5v1=$listget(data,3)
		if concurrency=-1 { set concurrency=$zu(115,10) }
		if id'="" { set insert=0,idassigned=1 } else { set insert=1,idassigned=0 }
		set lock=0,tSharedLock=0
		if 'idassigned { set id=$i(^User.PracownikD) }
		if (zzc5v1'="")&&('##class(User.Faktura).%ExistsId(zzc5v1)) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5824,"User.Pracownik.fakturyPracownika("_$zu(144,1,zzc5v1)_")")) }
		try {
			set tInnerException = ""
			;
			if 'insert {
				if concurrency { lock +(^User.PracownikD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if ('$Data(^User.PracownikD(id))) {
					set insert=1
					if lock { lock -(^User.PracownikD(id)#"E") set (lock,lockok) = 0 }
				}
			}
			if insert {
				if concurrency { lock +(^User.PracownikD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				set ^User.PracownikD(id)=data
			}
			else {
				set ^User.PracownikD(id)=data
			}
			set tStatus = 1
		}
		catch tInnerException {
		}
		if lock lock -(^User.PracownikD(id)#"E")
		if $Isobject(tInnerException) { throw tInnerException }
	}
	catch tException {
		set tStatus = tException.AsStatus()
	}
	quit tStatus }
%SaveIndices(pStartId="",pEndId="",lockExtent=0) public {
	Quit 1 }
%SerializeObject(serial,partial=0) public {
	try {
		If $get(%objTX2(+$this)) { Set partial = 1 } ElseIf ('partial) { Set %objTX2(+$this) = 1 }
		Set sc=..%ValidateObject(,0) Throw:('sc) ##class(%Exception.StatusException).ThrowIfInterrupt(sc)
		Set sc=..%NormalizeObject() Throw:('sc) ##class(%Exception.StatusException).ThrowIfInterrupt(sc)
		If r%adres'="" { Set:'$data(%objTX(1,+r%adres,1)) %objTX(1,+r%adres)=r%adres,%objTX(1,+r%adres,1)=..adresGetObject(1),%objTX(1,+r%adres,6)=2 Set M%adres=1,i%adres=$listget(%objTX(1,+r%adres,1)) }
		If r%fakturyPracownika'="" { Set:'$data(%objTX(1,+r%fakturyPracownika,1)) %objTX(1,+r%fakturyPracownika)=r%fakturyPracownika,%objTX(1,+r%fakturyPracownika,1)=..fakturyPracownikaGetObject(1),%objTX(1,+r%fakturyPracownika,6)=1 Set M%fakturyPracownika=1,i%fakturyPracownika=$listget(%objTX(1,+r%fakturyPracownika,1)) }
		s:$g(%objtxSTATUS)=2 %objtxLIST(+$this)=$this
		Set id=$listget(serial),sc=..%SaveData(.id) If ('sc) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt(sc) }
		Set serial=(..%Oid())
		if 'partial {
			Set %objTX2(+$this) = 0
		}
		set sc=1
	}
	catch tException {
		If 'partial { Set %objTX2(+$this) = 0 }
		set sc = tException.AsStatus()
	}
	Quit sc }
%AddToSaveSet(depth=3,refresh=0) public {
	If $data(%objTX(1,+$this)) && ('refresh) Quit 1
	Set sc=1,intOref=+$this
	If refresh Set intPoref="" For  Set intPoref=$order(%objTX(1,intOref,2,intPoref)) Quit:intPoref=""  Kill %objTX(1,intPoref,3,intOref),%objTX(1,intOref,2,intPoref)
	Set serial=..%Oid(),%objTX(1,intOref)=$this,%objTX(1,intOref,1)=serial,%objTX(1,intOref,6)=1 If (serial '= "") && (depth<2) { Quit 1 } Else { Set %objTX(7,intOref)=1 }
	Set Poref=r%%source If Poref'="",'$data(%objTX(1,+Poref)) Set %objTX(6,$i(%objTX(6)))=Poref
	if ('$d(i%adres))&&(..adres)
	Set Poref=r%adres If Poref'="" Set:'$data(%objTX(1,+Poref)) %objTX(6,$i(%objTX(6)))=Poref Set %objTX(8,$i(%objTX(8)))=$lb(+Poref,intOref,3,i%adres)
	Set Poref=r%fakturyPracownika If Poref'="" Set:'$data(%objTX(1,+Poref)) %objTX(6,$i(%objTX(6)))=Poref Set %objTX(8,$i(%objTX(8)))=$lb(+Poref,intOref,2)
exit	Quit sc }
%SortBegin(idxlist="",excludeunique=0)
	Quit 1
%SortEnd(idxlist="",commit=1,excludeunique=0) public {
	Quit 1 }
%UnlockExtent(shared=0,immediate=0) public {
	If 'shared {
		If 'immediate {
			Lock -^User.PracownikD
			 Quit 1
		}
		Lock -^User.PracownikD#"I"
		Quit 1
	}
	If 'immediate {
		Lock -^User.PracownikD#"S"
		Quit 1
	}
	Lock -^User.PracownikD#"SI"
	Quit 1 }
%UnlockId(id,shared=0,immediate=0) public {
	If 'shared {
		If 'immediate {
			Lock -(^User.PracownikD(id)#"E")
			Quit 1
		}
		Lock -(^User.PracownikD(id)#"IE")
		Quit 1
	}
	If 'immediate {
		Lock -(^User.PracownikD(id)#"SE")
		Quit 1
	}
	Lock -(^User.PracownikD(id)#"SIE")
	Quit 1 }
%ValidateIndices(idxList="",autoCorrect=0,lockOption=1,multiProcess=1)
	w !,"There are no indices to validate for class 'User.Pracownik'"
	QUIT 1
%ValidateObject(force=0,checkserial=1) public {
	set sc=1
	If (r%adres'="")||m%adres { Set iv=..adres If checkserial { Set rc=iv.%ValidateObject(force) If ('rc) { Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"adres",..adres) } } if iv.%IsNull() { Set rc=$$Error^%apiOBJ(5659,$classname()_"::adres("_$this_",ID="_..%Id()_")"),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc)) } }
	If '$system.CLS.GetModified() Quit sc
	If m%%id Set iv=..%id If iv'="" Set rc=(..%idIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"%id",iv)
	If m%%seriesCount Set iv=..%seriesCount If iv'="" Set rc=(..%seriesCountIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"%seriesCount",iv)
	Set iv=..imie If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::imie("_$this_",ID="_..%Id()_")"),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%imie Set rc=(..imieIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"imie",iv)
	Set iv=..nazwisko If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::nazwisko("_$this_",ID="_..%Id()_")"),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%nazwisko Set rc=(..nazwiskoIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"nazwisko",iv)
	Set iv=..tytul If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::tytul("_$this_",ID="_..%Id()_")"),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%tytul Set rc=(..tytulIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"tytul",iv)
	Quit sc }
zPopulate(count=10,verbose=0,DeferIndices=1,objects=0,tune=1,deterministic=0)
	New errcnt,i,id,keepobjects,obj,rss1,save,saved
	Set saved=0,keepobjects=0,errcnt=0
	Do $ZU(165,0,$S(deterministic:481516,1:$RANDOM(99999999)))
	If objects Set keepobjects=1,objects=0
	If DeferIndices Do ..%SortBegin("",1)
	s ^CacheTempNodes("gbl",$j,$name(^CacheTempPop($j)))=$lb($h,$username) Kill ^CacheTempPop($j)
	d ##class(%Library.PopulateUtils).BuildReferenceSample("User.Faktura",.rss1)
	For i=1:1:count Do  if errcnt>1000 write:verbose !,"over 1,000 errors encountered with no successful save - exiting" quit
	. Set obj=##class(User.Pracownik).%New()
	. Set obj.%id=""
	. Set obj.%seriesNames=""
	. Do obj.adresSetObject(##class(User.Adres).PopulateSerial())
	. Set id=##class(%Library.PopulateUtils).ArrayElement(.rss1) If id'="",##class(User.Faktura).%ExistsId(id) Do obj.fakturyPracownikaSetObjectId(id)
	. Set obj.imie=##class(%Library.PopulateUtils).ValueList(",Adam, Bogdan, Patrycja, Magda, Krystian, Beata, Aleksandra,Tomasz")
	. Set obj.nazwisko=##class(%Library.PopulateUtils).ValueList(",Nowak, Pawluk, Makowska, Kopydlowka, Kowal, Kwiatkowski")
	. Set obj.tytul=##class(%Library.PopulateUtils).ValueList(",Magister, Technik")
	. If 'keepobjects Do
	. . Set save=obj.%Save()
	. . If (''save) Set saved=saved+1,errcnt=0 If verbose Write !,"Object saved...",saved
	. . If ('save) set errcnt=errcnt+1 if verbose Do DisplayError^%apiOBJ(save)
	. If keepobjects Set objects($Increment(objects))=obj
	. Set obj=""
	k ^CacheTempNodes("gbl",$j,$name(^CacheTempPop($j))) Kill ^CacheTempPop($j)
	If DeferIndices Do ..%SortEnd(,,1)
	If tune Do TuneTable^%apiSQL("SQLUser.Pracownik",1,verbose,.%msg,1)
	Quit saved
zXMLDTD(top,format,input,dtdlist)
 Quit ##class(%XML.Implementation).XMLDTD("User.Pracownik",.top,.format,.input,.dtdlist)
zXMLExportInternal()
 New tag,summary,attrsVal,savelocal,aval,k,tmpPrefix,prefixDepth,hasNoContent,hasElement,topAttrs,beginprefix,endprefix,savexsiAttrs,initialxsiAttrs,initlist,initialCR,inlineFlag,popAtEnd,saveTopPrefix,saveTypesPrefix,saveAttrsPrefix,saveUsePrefix,initlist
 Set $ztrap="XMLExportInternalTrap",popAtEnd=0
 Set summary=summaryArg,initialxsiAttrs=xsiAttrs
 If group Quit $$Error^%apiOBJ(6386,"User.Pracownik")
 If indentFlag Set initialCR=($extract(currentIndent,1,2)=$c(13,10))
 Set id=createId
 Set temp=""
 If id'="" {
   If $piece($get(idlist(+$this)),",",2)'="" Quit 1
   Set idlist(+$this)=id_",1"
 }
 If encoded Set initlist=$lb($get(oreflist),inlineFlagArg),oreflist=1,inlineFlag=inlineFlagArg
 If 'nocycle,('encoded||inlineFlag) {
   If $data(oreflist($this)) Quit $$Error^%apiOBJ(6296,"User.Pracownik")
   Set oreflist($this)=""
 }
 Set tag=$get(topArg)
 Set tmpi=(($get(typeAttr)'="")&&(typeAttr'="User.Pracownik"))
 If $IsObject(namespaces) {
     Set popAtEnd=1,saveTopPrefix=topPrefix,saveTypesPrefix=typesPrefix,saveAttrsPrefix=attrsPrefix,saveUsePrefix=usePrefix
     Set sc=namespaces.PushNodeForExport("",$get(local,0),(encoded||tmpi),"",,.topPrefix,.topAttrs,.typesPrefix,.attrsPrefix,.usePrefix)
     If 'sc Quit sc
   Set beginprefix=$select(namespaces.ElementQualified&&usePrefix:typesPrefix,1:"")
   If topAttrs'="" Set temp=temp_" "_topAttrs
   If tag="" Set tag="Pracownik"
   Set xsitype=namespaces.OutputTypeAttribute
 } Else {
   Set saveTopPrefix=topPrefix,saveTypesPrefix=typesPrefix,saveAttrsPrefix=attrsPrefix,saveUsePrefix=usePrefix
   Set typesPrefix=namespaces If (typesPrefix'=""),($extract(typesPrefix,*)'=":") Set typesPrefix=typesPrefix_":"
   If 'encoded Set namespaces=""
   Set (topPrefix,attrsPrefix,topAttrs,beginprefix)=""
   If tag="" Set tag=typesPrefix_"Pracownik"
   Set xsitype=0
 }
 Set local=+$get(local),savelocal=local
 Set endprefix="</"_beginprefix,beginprefix="<"_beginprefix
 If tmpi Set temp=temp_" "_xsiPrefix_"type="""_typesPrefix_"Pracownik"""_xsiAttrs,xsiAttrs=""
   If id'="" Set temp=" "_$select($get(soap12):soapPrefix_"id",1:"id")_"=""id"_id_""""_temp
 If encoded Set temp=temp_xsiAttrs,xsiAttrs=""
 If indentFlag Set %xmlmsg=currentIndent if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg } Set currentIndent=$select(initialCR:"",1:$c(13,10))_currentIndent_indentChars
 If tag[":" Set topPrefix=$piece(tag,":"),tag=$piece(tag,":",2)  If topPrefix'="" Set topPrefix=topPrefix_":"
 Set %xmlmsg="<"_topPrefix_tag_temp if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set attrsVal=attrsArg,attrsArg="" Set %xmlmsg=attrsVal if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set %xmlmsg=">" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..imie
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"imie"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]]]><![CDATA[>","]]]]]]><![CDATA[><![CDATA[>")_"]]]]><![CDATA[>",1:val))_endprefix_"imie>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..nazwisko
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"nazwisko"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]]]><![CDATA[>","]]]]]]><![CDATA[><![CDATA[>")_"]]]]><![CDATA[>",1:val))_endprefix_"nazwisko>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..adres
 If 'val.XMLIsObjectEmpty(ignoreNull) {
   Set topArg="adres",summaryArg=1,group=0,createId="",typeAttr=$select(encoded||xsitype:"*",1:"User.Adres"),local=1,savexsiAttrs=xsiAttrs
   Set sc=val.XMLExportInternal() Goto:'sc XMLExportExit Set xsiAttrs=savexsiAttrs
 }
 Set val=..tytul
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"tytul"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]]]><![CDATA[>","]]]]]]><![CDATA[><![CDATA[>")_"]]]]><![CDATA[>",1:val))_endprefix_"tytul>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 If indentFlag { Set currentIndent=$extract(currentIndent,1,*-$length(indentChars)) Set %xmlmsg=currentIndent if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }}
 Set %xmlmsg="</"_topPrefix_tag_">"
 if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg } If indentFlag,'initialCR if $data(%xmlBlock) { Set %xmlmsg="" Do xeWriteLine^%occXMLInternal } else { write ! } Set $extract(currentIndent,1,2)=""
 If '$IsObject(namespaces) || (popAtEnd=1) Set topPrefix=saveTopPrefix,typesPrefix=saveTypesPrefix,attrsPrefix=saveAttrsPrefix,usePrefix=saveUsePrefix
 If popAtEnd Do namespaces.PopNode()
 If encoded Set oreflist=$list(initlist),inlineFlag=$list(initlist,2)
 If 'encoded||inlineFlag {
   If 'nocycle Kill oreflist($this)
 } ElseIf $get(oreflist)'=1 {
   Set oreflist=1
   Set id=$order(oreflist(""))
   While id'="" {
     Set val=oreflist(id)
     Kill oreflist(id)
     Set group=0,createId=$zabs(id),typeAttr="*",local=savelocal,xsiAttrs=initialxsiAttrs
     If $classname(val)="User.Pracownik" {
       Set attrsArg=attrsVal
       Set topArg=tag,summaryArg=0
       Set sc=val.XMLExportInternal()
     } Else {
       Set topArg="",summaryArg=(id<0)
       Set sc=val.XMLExportInternal()
     }
     If 'sc Quit
     Set id=$order(oreflist(""))
   }
   Kill oreflist
 }
 Quit sc
XMLExportInternalTrap Set $ztrap=""
 If $data(val) , $IsObject(val) , ($piece($ze,">",1)="<METHOD DOES NOT EXIST") {
   Set sc=$$Error^%apiOBJ(6249,$classname(val))
 } Else {
   Set sc=$$Error^%apiOBJ(5002,$ze)
 }
XMLExportExit 
 If '$IsObject(namespaces) || (popAtEnd=1) Set topPrefix=saveTopPrefix,typesPrefix=saveTypesPrefix,attrsPrefix=saveAttrsPrefix,usePrefix=saveUsePrefix
 If popAtEnd Do namespaces.PopNode()
 Quit sc
zXMLGetSchemaImports(imports,classes)
 Quit ##class(%XML.Implementation).XMLGetSchemaImports("User.Pracownik",.imports,.classes)
zXMLImportAttributes()
 ;
 Quit 1
XMLImportAttrErr Quit $$Error^%apiOBJ(6260,ref,$get(@(tree)@("d",$zlascii(attributeList(ref),13))),@(tree)@("d",$zlascii(nodelist,9))_$$XMLImportAttrLocation(nodelist))
XMLImportFixedAttrErr Quit $$Error^%apiOBJ(6320,ref,$get(@(tree)@("d",$zlascii(attributeList(ref),13))),@(tree)@("d",$zlascii(nodelist,9))_$$XMLImportAttrLocation(nodelist))
XMLImportAttrLocation(nodelist) new msg,loc
 Set loc=$lb($zlascii(nodelist,21),$zlascii(nodelist,25))
 If loc="" Quit ""
 Set msg=$get(^%qCacheMsg("%ObjectErrors",$s(""'="":$zcvt("","L"),1:$s($mvv(58)="":"en",1:$mvv(58))),"XMLImportLocation")," (%1,%2)")
 Quit $$FormatText^%occMessages(msg,$listget(loc,1),$listget(loc,2))
zXMLImportInternal()
 New child,childlist,node,nodelist,inner,innerlist,data,encodedArray,key,nsIndex,savechild,savechildlist,saveinner,saveinnnerlist,exists
 Set $ztrap="XMLImportInternalTrap"
 Set encoded=$case($piece(fmt,",",1),"":0,"literal":0,"encoded":1,"encoded12":1,:"")
 If encoded="" Quit $$Error^%apiOBJ(6231,fmt)
 Set nsIndex=$select($get(namespace)="":"",1:$get(@(tree)@("N",namespace)))
 Set node=nodeArg,nodelist=nodeArgChildlist
 If tag'=@(tree)@("d",$zlascii(nodelist,9)) Set inner=node Goto XMLImportMalformed
 If bareProjection Quit $$Error^%apiOBJ(6386,"User.Pracownik")
 If encoded {
   Do XMLImportAttrnode() If $data(attributeList("id")) Set idlist(node)=$this
 }
 If $zboolean(+($zlascii(nodelist,13)#16),+1,1) Quit 1
 Set sc=$$XMLImportElements()
 If $get(checkRequired),(''sc) { Set nodelist=""
   If '$data(exists("adres")) Set nodelist=nodelist_"adres, "
   If '$data(exists("imie")) Set nodelist=nodelist_"imie, "
   If '$data(exists("nazwisko")) Set nodelist=nodelist_"nazwisko, "
   If '$data(exists("tytul")) Set nodelist=nodelist_"tytul, "
   If nodelist'="" Set sc=$$Error^%apiOBJ(6318,$extract(nodelist,1,*-2))
 }
XMLImportExit Quit sc
XMLImportElements() ;
XMLLOOP1 Set descriptor=$zlascii(nodelist,$zwascii(nodelist,17)) Set child=($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)_","_$zwascii(nodelist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else { Set child="" }} For { Quit:child=""  Quit:(descriptor#16)'=2  Set descriptor=$piece(child,",",2)+4 Set child=$piece(child,",",1)_","_descriptor Set descriptor=$zlascii(nodelist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else {Set child="" }} } Goto XMLLOOP2
XMLLOOP For  { Set descriptor=$piece(child,",",2)+4 Set child=$piece(child,",",1)_","_descriptor Set descriptor=$zlascii(nodelist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else {Set child="" }} Quit:child=""  Quit:(descriptor#16)'=2  }
XMLLOOP2 If child="" Quit sc
 If (descriptor#16)'=0 Set inner=child Goto XMLImportMalformedNoTag
 Set childlist=@(tree)@((descriptor\16))
 Set tag=@(tree)@("d",$zlascii(childlist,9))
 If tag="imie" {
   If ($get(namespace)'=""),'$case($zwascii(childlist,19),0:1,nsIndex:1,:0) Goto XMLImportNSchild
   Set exists("imie")=1
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(data'[","&&(",Adam, Bogdan, Patrycja, Magda, Krystian, Beata, Aleksandra,Tomasz,"[(","_$select(data=$c(0):"",1:data)_",")):1,1:$$Error^%apiOBJ(7205,data,",Adam, Bogdan, Patrycja, Magda, Krystian, Beata, Aleksandra,Tomasz"))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..imie=data
   Goto XMLLOOP }
 If tag="nazwisko" {
   If ($get(namespace)'=""),'$case($zwascii(childlist,19),0:1,nsIndex:1,:0) Goto XMLImportNSchild
   Set exists("nazwisko")=1
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(data'[","&&(",Nowak, Pawluk, Makowska, Kopydlowka, Kowal, Kwiatkowski,"[(","_$select(data=$c(0):"",1:data)_",")):1,1:$$Error^%apiOBJ(7205,data,",Nowak, Pawluk, Makowska, Kopydlowka, Kowal, Kwiatkowski"))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..nazwisko=data
   Goto XMLLOOP }
 If tag="adres" {
   If ($get(namespace)'=""),'$case($zwascii(childlist,19),0:1,nsIndex:1,:0) Goto XMLImportNSchild
   Set exists("adres")=1
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     Do XMLImportAttrchild()
     Set class=$select(($zwascii($get(attributeList("type")),9)=1):$get(@(tree)@("d",$zlascii(attributeList("type"),13))),1:"")
     If (class="") || (class="Adres") {
       Set class="User.Adres"
     } Else {
       If $length(class,":")=2 Set class=$piece(class,":",2)
       Set class=$get(^oddCOM("User.Adres",85,"s",class))_$get(^oddXML("User.Adres","s",class)) If class="" Set class=0
       Set tmp=$get(@(tree)@("n",$zwascii(attributeList("type"),11)))
       If (class=0)||(($listlength(class)>1)&&(tmp="")) Set class=$get(@(tree)@("d",$zlascii(attributeList("type"),13))) Goto XMLImportBadTypechild
       If $listlength(class)>1 {
         For tmpi=1:1:$listlength(class) {
           If tmp=$parameter($list(class,tmpi),"NAMESPACE") Set class=$list(class,tmpi),tmpi=0 Quit
         }
         If tmpi Set class=$get(@(tree)@("d",$zlascii(attributeList("type"),13))) Goto XMLImportBadTypechild
       } Else { Set class=$list(class) }
     }
     Set data=$classmethod(class,"XMLNew",handler,child,$this)
     If $isobject(data) Set tag=@(tree)@("d",$zlascii(childlist,9)),nodeArg=child,nodeArgChildlist=childlist,bareProjection=0,summaryArg=1,keynameattr="",sc=data.XMLImportInternal() Goto:('sc) XMLImportExit
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   If data'="" Set ..adres=data
   Goto XMLLOOP }
 If tag="tytul" {
   If ($get(namespace)'=""),'$case($zwascii(childlist,19),0:1,nsIndex:1,:0) Goto XMLImportNSchild
   Set exists("tytul")=1
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(data'[","&&(",Magister, Technik,"[(","_$select(data=$c(0):"",1:data)_",")):1,1:$$Error^%apiOBJ(7205,data,",Magister, Technik"))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..tytul=data
   Goto XMLLOOP }
 Goto XMLImportBadTagchild
XMLImportBadTagchild Set inner=child
XMLImportBadTag Quit $$Error^%apiOBJ(6237,tag_$$XMLImportLocation(inner))
XMLImportBadTypenode Set inner=node Goto XMLImportBadType
XMLImportBadTypechild Set inner=child
XMLImportBadType Quit $$Error^%apiOBJ(6277,class,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)))_$$XMLImportLocation(inner))
XMLImportErrnode Set inner=node Goto XMLImportErr
XMLImportErrchild Set inner=child
XMLImportErr
 Set data=##class(%XML.ImportHandler).GetNextChild(tree,inner,"")
 If (data'="") {
   If ($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))#16)'=0 {
     Quit $$Error^%apiOBJ(6232,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner),$extract(@(tree)@("d",($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))\16)),1,200))
   } Else {
     Quit $$Error^%apiOBJ(6253,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner),@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))\16)),9)))
   }
 } Else {
   Quit $$Error^%apiOBJ(6252,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner))
 }
XMLImportIdErr Set sc=$$Error^%apiOBJ(6236,id,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner)) Quit sc
XMLImportMalformed Set sc=$$Error^%apiOBJ(6233,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)))_$$XMLImportLocation(inner)) Quit sc
XMLImportMalformedNoTag Set node=$select($piece(inner,",",1)<=0:0,1:$zlascii(@(tree)@($piece(inner,",",1)),1)_","_$zlascii(@(tree)@($piece(inner,",",1)),5)),sc=$$Error^%apiOBJ(6254,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16))),$select(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)))_$$XMLImportLocation(node)) Quit sc
XMLImportNSchild Set inner=child
XMLImportNS Set sc=$$Error^%apiOBJ(6235,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner)) Quit sc
XMLImportLocation(node) new msg,loc
 Set loc=$lb($zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),21),$zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),25))
 If loc="" Quit ""
 Set msg=$get(^%qCacheMsg("%ObjectErrors",$s(""'="":$zcvt("","L"),1:$s($mvv(58)="":"en",1:$mvv(58))),"XMLImportLocation")," (%1,%2)")
 Quit $$FormatText^%occMessages(msg,$listget(loc,1),$listget(loc,2))
XMLImportInternalTrap Set $ztrap=""
 Set loc=$select($ZE["<CLASS DOES NOT EXIST>":" for element "_tag_$$XMLImportLocation(child),1:"")
 Quit $$Error^%apiOBJ(5002,$ZE_loc)
XMLImportIdChild() Set inner=child,innerlist=childlist,tmp=$$XMLImportId(),child=inner,childlist=innerlist Quit tmp
XMLImportId() ;
 Do XMLImportAttrinner()
 If $data(attributeList("href")) {
   Set id=$get(@(tree)@("d",$zlascii(attributeList("href"),13)))
   If $extract(id)="#" {
     Set tmp=$select($get(@(tree)@("i",$extract(id,2,*)))="":"",1:$piece(@(tree)@("i",$extract(id,2,*)),",",1)_","_$piece(@(tree)@("i",$extract(id,2,*)),",",2)) If tmp="" Goto XMLImportIdErr
     Set inner=tmp
     Set descriptor=$zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2)) Set innerlist=@(tree)@((descriptor\16))
   }
 } ElseIf $data(attributeList("ref")),($get(@(tree)@("n",$zwascii(attributeList("ref"),9)))="http://www.w3.org/2003/05/soap-encoding") {
   Set id=$get(@(tree)@("d",$zlascii(attributeList("ref"),13)))
   Set tmp=$select($get(@(tree)@("i",id))="":"",1:$piece(@(tree)@("i",id),",",1)_","_$piece(@(tree)@("i",id),",",2)) If tmp="" Goto XMLImportIdErr
   Set inner=tmp
   Set descriptor=$zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2)) Set innerlist=@(tree)@((descriptor\16))
 } ElseIf '$data(attributeList("id")) {
   Quit 0
 }
 Quit $data(idlist(inner))
XMLImportAttrnode()
 If $get(attributeList)=node Quit
 Kill attributeList
 Set attributeList=node
 Set offset=29 While offset<$zwascii(nodelist,17) { Set attribute=$extract(nodelist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
XMLImportAttrchild()
 If $get(attributeList)=child Quit
 Kill attributeList
 Set attributeList=child
 Set offset=29 While offset<$zwascii(childlist,17) { Set attribute=$extract(childlist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
XMLImportAttrinner()
 If $get(attributeList)=inner Quit
 Kill attributeList
 Set attributeList=inner
 Set offset=29 While offset<$zwascii(innerlist,17) { Set attribute=$extract(innerlist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
zXMLIsObjectEmpty(ignoreNull)
 If ..imie'="" Quit 0
 If ..nazwisko'="" Quit 0
 If '..adres.XMLIsObjectEmpty() Quit 0
 If ..tytul'="" Quit 0
 Quit 1
zXMLNew(document,node,containerOref="")
	Quit (##class(User.Pracownik).%New())
zXMLSchema(top="",format="",namespacePrefix="",input=0,refOnly=0,schema)
 Quit ##class(%XML.Implementation).XMLSchema("User.Pracownik",top,format,namespacePrefix,input,refOnly,.schema)
zprzedstawSie() public {
	SET zapytanie = "SELECT p.imie, p.nazwisko FROM Pracownik p WHERE p.ID = ?"
	SET wyniki = ##Class(%SQL.Statement).%ExecDirect(,zapytanie,..%Id())
	DO wyniki.%Next()
	Return "Faktura zostala wystawiona przez " _ wyniki.%Get("imie") _ " " _ wyniki.%Get("nazwisko") }
zadresGetStored(id) public {
	Quit $Select(id'="":$listget($g(^User.PracownikD(id)),4),1:"") }
zfakturyPracownikaGetObject(force=0) public {
	Quit $select(r%fakturyPracownika=""||(i%fakturyPracownika'=""):$select(i%fakturyPracownika="":"",1:$listbuild(i%fakturyPracownika_"")),(''..fakturyPracownika.%GetSwizzleObject(force,.oid)):oid,1:"") }
zfakturyPracownikaGetObjectId(force=0) public {
	Quit $listget(..fakturyPracownikaGetObject(force)) }
zfakturyPracownikaGetStored(id) public {
	Quit $Select(id'="":$listget($g(^User.PracownikD(id)),3),1:"") }
zfakturyPracownikaGetSwizzled(noswizzle=0) public {
	If r%fakturyPracownika'="" Quit r%fakturyPracownika
	If i%fakturyPracownika="" Quit ""
	Set oid=$select(i%fakturyPracownika="":"",1:$listbuild(i%fakturyPracownika_""))
	Set oref=##class("User.Faktura").%Open(oid,,.sc) If ('sc)||(oref="") Do:$get(^%SYS("ThrowSwizzleError"),0) $zutil(96,3,19,1) Quit ""
	Set modstate=$system.CLS.GetModifiedBits() Set r%fakturyPracownika=oref Do $system.CLS.SetModifiedBits(modstate)
	Do oref.pracownikWystawiajacyRelate($this)
	Quit oref }
zfakturyPracownikaNewObject() public {
	Set newobject=##class("User.Faktura").%New() If newobject="" Quit ""
	Set ..fakturyPracownika=newobject
	Do ..fakturyPracownika.pracownikWystawiajacyRelate($this)
	Quit newobject }
zfakturyPracownikaOnDelete(id="",concurrency=-1) [ id,SQLCODE ] public { New %msg,%ROWCOUNT,%ROWID,SQLCODE 
	 ;---&sql(select %ID into :id from SQLUser.Pracownik where fakturyPracownika = :id)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, id, SQLCODE
	do %0Fo
	Quit $Select(SQLCODE:1,1:$$Error^%apiOBJ(5823,$classname()_"."_"fakturyPracownika")) }
 q
%0Fo n sqldata8d,sqldata9d,sqldata10d,sqldata12d,sqldata16d,sqldata17d,sqldata4d,sqldata3d,sqldata6d,sqldata7d
 s $zt="%0Ferr"
 n %sqltime s %sqltime=$zh
 s sqldata8d=$zu(115,2)
 s sqldata9d=0,sqldata10d=""
 d:$zu(115,15) $system.ECP.Sync()
 s sqldata4d=$g(id),sqldata4d=$s(sqldata4d="":"",$isvalidnum(sqldata4d):+sqldata4d,1:sqldata4d)
 s SQLCODE=100
 ; asl MOD# 2
 s id=""
%0FmBk1 s sqldata12d="" s id=$o(^User.PracownikD(id),1,sqldata12d)
 i id="" g %0FmBdun
 Set sqldata3d=$lg(sqldata12d,3)
 g:'(sqldata3d=sqldata4d) %0FmBk1
 g:'(sqldata3d'="") %0FmBk1
 goto:sqldata8d'=1 %0FmBuncommitted
 if sqldata8d=1 {
 	lock +^User.PracownikD($p(id,"||",1))#"S":$zu(115,4)
 	if $t { set sqldata10d=$name(^User.PracownikD($p(id,"||",1)))_"#""SI""",sqldata9d=1 }
 	else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.Pracownik for RowID value: "_id ztrap "LOCK"  }
 }
 ; asl MOD# 3
 s sqldata6d=$zlist(sqldata3d)
 i id'="" s sqldata16d="" i $d(^User.PracownikD(id),sqldata16d)
 e  g %0FmCdun
 Set sqldata3d=$lg(sqldata16d,3)
 s sqldata7d=$zlist(sqldata3d)
 g:sqldata6d'=sqldata7d %0FmCdun
%0FmBuncommitted ;
 s SQLCODE=0 g %0Fc
%0FmCdun if $g(sqldata8d)=1 { if $g(sqldata9d)=1 { l -@sqldata10d s sqldata9d=0 } elseif $g(sqldata9d)=2 { do $classmethod($li(sqldata10d),"%UnlockId",$li(sqldata10d,2),1,1)  s sqldata9d=0 } }
 g %0FmBk1
%0FmBdun 
%0FmAdun 
%0Fc s %ROWCOUNT='SQLCODE
 if $g(sqldata8d)=1 { if $g(sqldata9d)=1 { l -@sqldata10d } elseif $g(sqldata9d)=2 { do $classmethod($li(sqldata10d),"%UnlockId",$li(sqldata10d,2),1,1)  } }
 s:$d(%sqltime) sqldata17d=$g(sqldata17d)+$zh-%sqltime
 n context,tmp,count,total,mean s context=$system.Context.SQL()
 if $d(sqldata17d,%sqltime) {
 if $g(context.Stats)<$zu(99) { d AggregateStats^%SYS.SQLSRV() }
 s tmp=$g(context.Stats($namespace,"VDFwJUsFCSuHgHredKpcZLLHK7A="))
 s count=$lg(tmp,1),total=$lg(tmp,2),mean=total+%sqltime/(count+1)
 s context.Stats($namespace,"VDFwJUsFCSuHgHredKpcZLLHK7A=")=$lb(count+1,total+%sqltime,$s(+count=0:0,1:(%sqltime-mean)**2+(count*((total/count-mean)**2+$lg(tmp,3)))/(count+1))) }
 q
%0Ferr s $zt=""
 d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 g %0Fc
zfakturyPracownikaRExec(%qHandle,inverse) [ c1,inverse,SQLCODE ] public { New %msg,%ROWCOUNT,%ROWID,c1,SQLCODE 
	Set %qHandle=$increment(%objcn)
	 ;---&sql(DECLARE Q2 CURSOR FOR
 	 ;---		SELECT ID FROM SQLUser.Pracownik where fakturyPracownika=:inverse)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, inverse, SQLCODE
	
	 ;---&sql(OPEN Q2)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE
	do %Q20o
	If SQLCODE Quit $$Error^%apiOBJ(5821,"SQLCODE = "_SQLCODE)
	Quit 1 }
zfakturyPracownikaRClose(%qHandle) [ c1,inverse,SQLCODE ] public { New %msg,%ROWCOUNT,%ROWID,c1,inverse,SQLCODE 
	New SQLCODE
	 ;---&sql(CLOSE Q2)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE
	do %Q20c
	Kill %objcsc(%qHandle),%objcsp(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsl(%qHandle),%objcsR(%qHandle),%objcsZ(%qHandle),%objcsd(%qHandle)
	Quit 1 }
zfakturyPracownikaRFetch(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) [ c1,inverse,SQLCODE ] public { New %msg,%ROWCOUNT,%ROWID,c1,inverse,SQLCODE 
	Set RowSet="",ReturnCount=0,AtEnd=0
	For {
		 ;---&sql(FETCH Q2 INTO :c1)
 		 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, c1, SQLCODE
		do %0Lo
		If 'SQLCODE { Set RowSet=RowSet_$lb(c1),ReturnCount=ReturnCount+1 Quit:ReturnCount=FetchCount||(($length(RowSet)+($length(RowSet)\ReturnCount))>24000) } Else { Set AtEnd=1 Quit }
	}
	Quit 1 }
 q
%Q20o 
 try { s SQLCODE=$s($g(%objcsc(%qHandle)):-101,1:0) q:SQLCODE'=0 
 n %sqltime s %sqltime=$zh
 s %objcsd(%qHandle,1)=0 s:$d(%0CacheRowLimit)#2 %objcsd(%qHandle,2)=%0CacheRowLimit
 s %objcsd(%qHandle,3)=$zu(115,2)
 s %objcsd(%qHandle,4)=0,%objcsd(%qHandle,5)=""
 d:$zu(115,15) $system.ECP.Sync()
 s %objcsd(%qHandle,6)=$g(inverse),%objcsd(%qHandle,6)=$s(%objcsd(%qHandle,6)="":"",$isvalidnum(%objcsd(%qHandle,6)):+%objcsd(%qHandle,6),1:%objcsd(%qHandle,6))
 s %objcsc(%qHandle)=1,SQLCODE=0
 s:$d(%sqltime) %objcsd(%qHandle,7)=$g(%objcsd(%qHandle,7))+$zh-%sqltime
 } catch { d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %objcsd(%qHandle),%objcsc(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsp(%qHandle) }
 q
%0Hfirst 
 ; asl MOD# 2
 s %objcsd(%qHandle,8)=""
%0HmBk1 s %objcsd(%qHandle,9)="" s %objcsd(%qHandle,8)=$o(^User.PracownikD(%objcsd(%qHandle,8)),1,%objcsd(%qHandle,9))
 i %objcsd(%qHandle,8)="" g %0HmBdun
 Set %objcsd(%qHandle,10)=$lg(%objcsd(%qHandle,9),3)
 g:'(%objcsd(%qHandle,10)=%objcsd(%qHandle,6)) %0HmBk1
 g:'(%objcsd(%qHandle,10)'="") %0HmBk1
 goto:%objcsd(%qHandle,3)'=1 %0HmBuncommitted
 if %objcsd(%qHandle,3)=1 {
 	lock +^User.PracownikD($p(%objcsd(%qHandle,8),"||",1))#"S":$zu(115,4)
 	if $t { set %objcsd(%qHandle,5)=$name(^User.PracownikD($p(%objcsd(%qHandle,8),"||",1)))_"#""SI""",%objcsd(%qHandle,4)=1 }
 	else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.Pracownik for RowID value: "_%objcsd(%qHandle,8) ztrap "LOCK"  }
 }
 ; asl MOD# 3
 s %objcsd(%qHandle,11)=$zlist(%objcsd(%qHandle,10))
 i %objcsd(%qHandle,8)'="" s %objcsd(%qHandle,12)="" i $d(^User.PracownikD(%objcsd(%qHandle,8)),%objcsd(%qHandle,12))
 e  g %0HmCdun
 Set %objcsd(%qHandle,10)=$lg(%objcsd(%qHandle,12),3)
 s %objcsd(%qHandle,13)=$zlist(%objcsd(%qHandle,10))
 g:%objcsd(%qHandle,11)'=%objcsd(%qHandle,13) %0HmCdun
%0HmBuncommitted ;
 s:$g(SQLCODE)'<0 SQLCODE=0 s %ROWCOUNT=$i(%objcsd(%qHandle,1)),%ROWID=%objcsd(%qHandle,8),%objcsc(%qHandle)=10
 //-- FETCH Output
 s:$d(%sqltime) %objcsd(%qHandle,7)=$g(%objcsd(%qHandle,7))+$zh-%sqltime
 quit
%Q20f //-- FETCH tag
 i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  } i %objcsc(%qHandle)=100 { s SQLCODE=100 q  } s SQLCODE=0
 i $d(%objcsd(%qHandle,2))#2,$g(%objcsd(%qHandle,1))'<%objcsd(%qHandle,2) { s SQLCODE=100,%ROWCOUNT=%objcsd(%qHandle,1),%objcsc(%qHandle)=100 q }
 n %sqltime s %sqltime=$zh
 g %0Hfirst:%objcsc(%qHandle)=1
%0HmCdun if $g(%objcsd(%qHandle,3))=1 { if $g(%objcsd(%qHandle,4))=1 { l -@%objcsd(%qHandle,5) s %objcsd(%qHandle,4)=0 } elseif $g(%objcsd(%qHandle,4))=2 { do $classmethod($li(%objcsd(%qHandle,5)),"%UnlockId",$li(%objcsd(%qHandle,5),2),1,1)  s %objcsd(%qHandle,4)=0 } }
 g %0HmBk1
%0HmBdun 
%0HmAdun 
 s %ROWCOUNT=%objcsd(%qHandle,1),SQLCODE=100,%objcsc(%qHandle)=100
 s:$d(%sqltime) %objcsd(%qHandle,7)=$g(%objcsd(%qHandle,7))+$zh-%sqltime
 //-- no [more] data
 quit
%Q20c i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  }
 n %sqltime s %sqltime=$zh
 s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%objcsd(%qHandle,1)),1:0)
 if $g(%objcsd(%qHandle,3))=1 { if $g(%objcsd(%qHandle,4))=1 { l -@%objcsd(%qHandle,5) } elseif $g(%objcsd(%qHandle,4))=2 { do $classmethod($li(%objcsd(%qHandle,5)),"%UnlockId",$li(%objcsd(%qHandle,5),2),1,1)  } }
 s:$d(%sqltime) %objcsd(%qHandle,7)=$g(%objcsd(%qHandle,7))+$zh-%sqltime
 n context,tmp,count,total,mean s context=$system.Context.SQL()
 if $d(%objcsd(%qHandle,7),%sqltime) {
 if $g(context.Stats)<$zu(99) { d AggregateStats^%SYS.SQLSRV() }
 s tmp=$g(context.Stats($namespace,"CmfTZY8ivESd6r1jFa1tz+Gsc/Y="))
 s count=$lg(tmp,1),total=$lg(tmp,2),mean=total+%sqltime/(count+1)
 s context.Stats($namespace,"CmfTZY8ivESd6r1jFa1tz+Gsc/Y=")=$lb(count+1,total+%sqltime,$s(+count=0:0,1:(%sqltime-mean)**2+(count*((total/count-mean)**2+$lg(tmp,3)))/(count+1))) }
 k %objcsd(%qHandle),%objcsc(%qHandle)
 s SQLCODE=0
 quit  // close
%0Herr d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 s %objcsc(%qHandle)=100
 quit  // error
%0Lo try { do %Q20f q:SQLCODE'=0
 s c1=%objcsd(%qHandle,8)
 } catch { do %0Herr }
 q
zfakturyPracownikaRelate(oref) public {
	If r%fakturyPracownika=oref Quit 1
	If i%fakturyPracownika'="",$listget(oref."%%OID")=i%fakturyPracownika Set modstate=$system.CLS.GetModifiedBits() Set r%fakturyPracownika=oref Do $system.CLS.SetModifiedBits(modstate) Quit 1
	If r%fakturyPracownika'="" Do ..fakturyPracownikaUnRelate(r%fakturyPracownika)
	Set tmp=i%fakturyPracownika Kill i%fakturyPracownika,r%fakturyPracownika Set r%fakturyPracownika=oref,i%fakturyPracownika=tmp
	Quit 1 }
zfakturyPracownikaSet(newvalue) public {
	If newvalue="" {
		If r%fakturyPracownika="",i%fakturyPracownika="" Quit 1
	} Else {
		If '$isobject(newvalue) Quit $$Error^%apiOBJ(5807,newvalue)
		If r%fakturyPracownika=newvalue Quit 1
		If r%fakturyPracownika="",i%fakturyPracownika'="",i%fakturyPracownika=$listget(newvalue."%%OID") Set modstate=$system.CLS.GetModifiedBits() Set r%fakturyPracownika=newvalue Do newvalue.pracownikWystawiajacyRelate($this),$system.CLS.SetModifiedBits(modstate) Quit 1
	}
	If r%fakturyPracownika'="" Do r%fakturyPracownika.pracownikWystawiajacyUnRelate($this)
	Set r%fakturyPracownika=newvalue,i%fakturyPracownika=0,i%fakturyPracownika=""
	If newvalue'="" Do newvalue.pracownikWystawiajacyRelate($this)
	Quit 1 }
zfakturyPracownikaSetObject(newvalue) public {
	If r%fakturyPracownika="" Set i%fakturyPracownika=$listget(newvalue) Quit 1
	If newvalue'="",i%fakturyPracownika=$listget(newvalue) Quit 1
	Set sc=..fakturyPracownika.%GetSwizzleObject(0,.oid) Quit:('sc) sc
	If newvalue'="",$listget(oid)=$listget(newvalue) Quit 1
	Do ..fakturyPracownika.pracownikWystawiajacyUnRelate($this) Set r%fakturyPracownika="",i%fakturyPracownika=0,i%fakturyPracownika=$listget(newvalue) Quit 1 }
zfakturyPracownikaSetObjectId(newid) public {
	Quit ..fakturyPracownikaSetObject($select(newid="":"",1:$listbuild(newid_""))) }
zfakturyPracownikaUnRelate(oref) public {
	If r%fakturyPracownika=oref Set r%fakturyPracownika="",i%fakturyPracownika=0,i%fakturyPracownika="" Quit 1
	If r%fakturyPracownika'="" Quit $$Error^%apiOBJ(5499)
	Set i%fakturyPracownika=0,i%fakturyPracownika=""
	Quit 1 }
zfakturyPracownikaUnSwizzle(force=0) public {
 Quit:r%fakturyPracownika="" 1
	Set sc=..fakturyPracownika.%GetSwizzleObject(force,.newvalue) Quit:('sc) sc
	Set modstate=$system.CLS.GetModifiedBits() Set r%fakturyPracownika="" Do $system.CLS.SetModifiedBits(modstate)
 Set i%fakturyPracownika=$listget(newvalue)
 Quit 1 }
zimieGetStored(id) public {
	Quit $Select(id'="":$listget($g(^User.PracownikD(id)),2),1:"") }
znazwiskoGetStored(id) public {
	Quit $Select(id'="":$listget($g(^User.PracownikD(id)),5),1:"") }
ztytulGetStored(id) public {
	Quit $Select(id'="":$listget($g(^User.PracownikD(id)),6),1:"") }
ztytulIsValid(%val) public {
	Q $s(%val'[","&&(",Magister, Technik,"[(","_$select(%val=$c(0):"",1:%val)_",")):1,1:$$Error^%apiOBJ(7205,%val,",Magister, Technik")) }
zExtentExecute(%qHandle) [ c1,SQLCODE ] public { New %msg,%ROWCOUNT,%ROWID,c1,SQLCODE 
	Set sc=1
	s %qHandle=$i(%objcn)
	 ;---&sql(DECLARE QExtent CURSOR FOR
 	 ;---		 SELECT ID FROM SQLUser.Pracownik)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE
	
	 ;---&sql(OPEN QExtent)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE
	do %QExtent0o
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5821,"SQLCODE = "_SQLCODE) } Else { Set sc=1 }
	Quit sc }
zExtentClose(%qHandle) [ c1,SQLCODE ] public { New %msg,%ROWCOUNT,%ROWID,c1,SQLCODE 
	 ;---&sql(CLOSE QExtent)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE
	do %QExtent0c
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) } Else { Set sc=1 }
	Kill %objcsc(%qHandle),%objcsp(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsl(%qHandle),%objcsR(%qHandle),%objcsZ(%qHandle),%objcsd(%qHandle)
	Quit sc }
zExtentFetch(%qHandle,Row,AtEnd=0) [ c1,SQLCODE ] public { New %msg,%ROWCOUNT,%ROWID,c1,SQLCODE 
	Set Row="",AtEnd=0
	 ;---&sql(FETCH QExtent INTO :c1)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, c1, SQLCODE
	do %0Qo
	If 'SQLCODE { Set Row=$lb(c1) Set sc=1 }
	ElseIf SQLCODE=100 { Set AtEnd=1,sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) }
	Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set AtEnd=1,sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	QUIT sc }
zExtentFetchRows(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) [ c1,SQLCODE ] public { New %msg,%ROWCOUNT,%ROWID,c1,SQLCODE 
	Set RowSet="",ReturnCount=0,AtEnd=0
	For {
		 ;---&sql(FETCH QExtent INTO :c1)
 		 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, c1, SQLCODE
		do %0Ro
		If 'SQLCODE { Set RowSet=RowSet_$lb(c1),ReturnCount=ReturnCount+1 Quit:(ReturnCount=FetchCount)||(($l(RowSet)+($l(RowSet)\ReturnCount))>24000) } Else { Set AtEnd=1 Quit }
	}
	If 'SQLCODE { Set sc=1 } ElseIf SQLCODE=100 { Set sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) } Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	Quit sc }
zExtentSendODBC(%qHandle,array,qacn,%qrc,piece,ColumnCount) [ c1,SQLCODE ] public { New %msg,%ROWCOUNT,%ROWID,c1,SQLCODE 
	set %qrc=0,piece=0
	for {
		set rc=..ExtentFetch(.%qHandle,.row,.atend)
		if ('rc) { set %qrc=-400 set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=-400,%sqlcontext.Message=$g(%msg) do ProcessError^%ourProcedure(rc,$get(%sqlcontext),.%qrc,.%msg),Logerr^%SYS.SQLSRV(%qrc,"","SP",.%msg) RETURN  }
		if row="" { set %qrc=100 set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=100 RETURN  }
		if $g(%protocol)>50 { RETURN:$zobjexport(row,60) }
		else {
			if %protocol>46 { for piece=1:1:ColumnCount { goto:$zobjexport($lg(row,piece),50) SPDone } }
			else { for piece=1:1:ColumnCount { goto:$zobjexport($lg(row,piece),7) SPDone } }
		}
	}
	QUIT
SPDone	set:%protocol>46 piece=piece+1
	kill array(qacn)
	for i=piece:1:ColumnCount { set array(qacn,i)=$lg(row,i) }
	QUIT }
 q
%QExtent0o 
 try { s SQLCODE=$s($g(%objcsc(%qHandle)):-101,1:0) q:SQLCODE'=0 
 n %sqltime s %sqltime=$zh
 s %objcsd(%qHandle,1)=0 s:$d(%0CacheRowLimit)#2 %objcsd(%qHandle,2)=%0CacheRowLimit
 s %objcsd(%qHandle,3)=$zu(115,2)
 s %objcsd(%qHandle,4)=0,%objcsd(%qHandle,5)=""
 d:$zu(115,15) $system.ECP.Sync()
 s %objcsc(%qHandle)=1,SQLCODE=0
 s:$d(%sqltime) %objcsd(%qHandle,6)=$g(%objcsd(%qHandle,6))+$zh-%sqltime
 } catch { d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %objcsd(%qHandle),%objcsc(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsp(%qHandle) }
 q
%0Mfirst 
 ; asl MOD# 2
 s %objcsd(%qHandle,7)=""
%0MmBk1 s %objcsd(%qHandle,7)=$o(^User.PracownikD(%objcsd(%qHandle,7)))
 i %objcsd(%qHandle,7)="" g %0MmBdun
 goto:%objcsd(%qHandle,3)'=1 %0MmBuncommitted
 if %objcsd(%qHandle,3)=1 {
 	lock +^User.PracownikD($p(%objcsd(%qHandle,7),"||",1))#"S":$zu(115,4)
 	if $t { set %objcsd(%qHandle,5)=$name(^User.PracownikD($p(%objcsd(%qHandle,7),"||",1)))_"#""SI""",%objcsd(%qHandle,4)=1 }
 	else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.Pracownik for RowID value: "_%objcsd(%qHandle,7) ztrap "LOCK"  }
 }
 ; asl MOD# 3
 i %objcsd(%qHandle,7)'="",$d(^User.PracownikD(%objcsd(%qHandle,7)))
 e  g %0MmCdun
%0MmBuncommitted ;
 s:$g(SQLCODE)'<0 SQLCODE=0 s %ROWCOUNT=$i(%objcsd(%qHandle,1)),%ROWID=%objcsd(%qHandle,7),%objcsc(%qHandle)=10
 //-- FETCH Output
 s:$d(%sqltime) %objcsd(%qHandle,6)=$g(%objcsd(%qHandle,6))+$zh-%sqltime
 quit
%QExtent0f //-- FETCH tag
 i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  } i %objcsc(%qHandle)=100 { s SQLCODE=100 q  } s SQLCODE=0
 i $d(%objcsd(%qHandle,2))#2,$g(%objcsd(%qHandle,1))'<%objcsd(%qHandle,2) { s SQLCODE=100,%ROWCOUNT=%objcsd(%qHandle,1),%objcsc(%qHandle)=100 q }
 n %sqltime s %sqltime=$zh
 g %0Mfirst:%objcsc(%qHandle)=1
%0MmCdun if $g(%objcsd(%qHandle,3))=1 { if $g(%objcsd(%qHandle,4))=1 { l -@%objcsd(%qHandle,5) s %objcsd(%qHandle,4)=0 } elseif $g(%objcsd(%qHandle,4))=2 { do $classmethod($li(%objcsd(%qHandle,5)),"%UnlockId",$li(%objcsd(%qHandle,5),2),1,1)  s %objcsd(%qHandle,4)=0 } }
 g %0MmBk1
%0MmBdun 
%0MmAdun 
 s %ROWCOUNT=%objcsd(%qHandle,1),SQLCODE=100,%objcsc(%qHandle)=100
 s:$d(%sqltime) %objcsd(%qHandle,6)=$g(%objcsd(%qHandle,6))+$zh-%sqltime
 //-- no [more] data
 quit
%QExtent0c i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  }
 n %sqltime s %sqltime=$zh
 s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%objcsd(%qHandle,1)),1:0)
 if $g(%objcsd(%qHandle,3))=1 { if $g(%objcsd(%qHandle,4))=1 { l -@%objcsd(%qHandle,5) } elseif $g(%objcsd(%qHandle,4))=2 { do $classmethod($li(%objcsd(%qHandle,5)),"%UnlockId",$li(%objcsd(%qHandle,5),2),1,1)  } }
 s:$d(%sqltime) %objcsd(%qHandle,6)=$g(%objcsd(%qHandle,6))+$zh-%sqltime
 n context,tmp,count,total,mean s context=$system.Context.SQL()
 if $d(%objcsd(%qHandle,6),%sqltime) {
 if $g(context.Stats)<$zu(99) { d AggregateStats^%SYS.SQLSRV() }
 s tmp=$g(context.Stats($namespace,"geJ0Tvw538RwNV5fg8qqk5LBC0g="))
 s count=$lg(tmp,1),total=$lg(tmp,2),mean=total+%sqltime/(count+1)
 s context.Stats($namespace,"geJ0Tvw538RwNV5fg8qqk5LBC0g=")=$lb(count+1,total+%sqltime,$s(+count=0:0,1:(%sqltime-mean)**2+(count*((total/count-mean)**2+$lg(tmp,3)))/(count+1))) }
 k %objcsd(%qHandle),%objcsc(%qHandle)
 s SQLCODE=0
 quit  // close
%0Merr d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 s %objcsc(%qHandle)=100
 quit  // error
%0Qo try { do %QExtent0f q:SQLCODE'=0
 s c1=%objcsd(%qHandle,7)
 } catch { do %0Merr }
 q
%0Ro try { do %QExtent0f q:SQLCODE'=0
 s c1=%objcsd(%qHandle,7)
 } catch { do %0Merr }
 q
zExtentFunc() public {
	try {
		set tSchemaPath = ##class(%SQL.Statement).%ClassPath($classname())
			set tStatement = ##class(%SQL.Statement).%New(,tSchemaPath)
			do tStatement.prepare(" SELECT ID FROM SQLUser . Pracownik")
		set tResult = tStatement.%Execute()
	}
	catch tException { if '$Isobject($Get(tResult)) { set tResult = ##class(%SQL.StatementResult).%New() } set tResult.%SQLCODE=tException.AsSQLCODE(),tResult.%Message=tException.AsSQLMessage() }
	Quit tResult }
zExtentGetInfo(colinfo,parminfo,idinfo,%qHandle,extoption=0,extinfo) public {
 s parminfo=""
	s:'($d(^oddCOM($classname(),"q","Extent",21),clientinfo)#2)&&'$s($d(^(2),clientinfo)#2&&(clientinfo'=$classname()):$d(^oddCOM(clientinfo,"q","Extent",21),clientinfo)#2||($d(^oddDEF(clientinfo,"q","Extent",21),clientinfo)#2),1:$d(^oddDEF($classname(),"q","Extent",21),clientinfo)#2) clientinfo=""
	Set:extoption extinfo=$s($d(^oddCOM($classname(),"q","Extent",38))#2:^(38),$d(^oddCOM($g(^(2),$classname()),"q","Extent",38))#2:^(38),1:$s($d(^oddDEF($g(^oddCOM($classname(),"q","Extent",2),$classname()),"q","Extent",38))#2:^(38),1:""))
	If clientinfo'="" Set colinfo=$listget(clientinfo,1),parminfo=$listget(clientinfo,2),idinfo=$listget(clientinfo,3) Quit 1
	Set colinfo="",parminfo="",idinfo=$listbuild(0)
	Set sc=$$externaltype^%apiOLE("%Library.Integer",.exttypes,"0")
	Quit:('sc) sc
	s:'($d(^oddCOM($classname(),"q","Extent",23),names)#2)&&'$s($d(^(2),names)#2&&(names'=$classname()):$d(^oddCOM(names,"q","Extent",23),names)#2||($d(^oddDEF(names,"q","Extent",23),names)#2),1:$d(^oddDEF($classname(),"q","Extent",23),names)#2) names=""
	s:'($d(^oddCOM($classname(),"q","Extent",22),captions)#2)&&'$s($d(^(2),captions)#2&&(captions'=$classname()):$d(^oddCOM(captions,"q","Extent",22),captions)#2||($d(^oddDEF(captions,"q","Extent",22),captions)#2),1:$d(^oddDEF($classname(),"q","Extent",22),captions)#2) captions=""
	For i=1:1:1 Set colinfo=colinfo_$listbuild($listbuild($listget(names,i),$piece(exttypes,",",i),$listget(captions,i)))
	Set idinfo=$listbuild(1,$classname())
	s ^oddCOM($classname(),"q","Extent",21)=$listbuild(colinfo,parminfo,idinfo)
	Quit 1 }
zExtentGetODBCInfo(colinfo,parminfo,qHandle) public {
	set version = $Select($Get(%protocol,41)>40:4,1:3)
	Set metadata=$lb(1,1,"ID",4,10,0,2,"ID","Pracownik","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,1),0)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	If version=4 {
		Set colinfo=$li(metadata,2,2+cmdlen)
	} Else {
		Set colinfo=$li(metadata,2,2)
		For i=0:1:colcount-1 Set colinfo=colinfo_$list(metadata,3+(i*10),11+(i*10))
	}
	Quit 1 }
zfakturyPracownikaCheck(id="",lockonly=0) public {
	Quit ##class(User.Faktura).%1Check(id,lockonly)
}
zfakturyPracownikaDelete(id="",concurrency=-1) public {
	quit ..fakturyPracownikaOnDelete(.id,.concurrency) }
zfakturyPracownikaSQLFKeyExists(%p...)
	new %ROWCOUNT,%ROWID,%msg,SQLCODE
	 ;---&sql(SELECT fakturyPracownika
 	 ;---	     FROM   SQLUser.Pracownik
 	 ;---	     WHERE  fakturyPracownika=:%p(1))
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE
	do %0So
	QUIT SQLCODE=0
 q
%0So n sqldata7d,sqldata8d,sqldata9d,sqldata11d,sqldata15d,sqldata16d,sqldata2d,sqldata4d,sqldata1d,sqldata5d,sqldata6d
 s $zt="%0Serr"
 n %sqltime s %sqltime=$zh
 s sqldata7d=$zu(115,2)
 s sqldata8d=0,sqldata9d=""
 d:$zu(115,15) $system.ECP.Sync()
 s sqldata2d=$g(%p(1)),sqldata2d=$s(sqldata2d="":"",$isvalidnum(sqldata2d):+sqldata2d,1:sqldata2d)
 s SQLCODE=100
 ; asl MOD# 2
 s sqldata4d=""
%0SmBk1 s sqldata11d="" s sqldata4d=$o(^User.PracownikD(sqldata4d),1,sqldata11d)
 i sqldata4d="" g %0SmBdun
 Set sqldata1d=$lg(sqldata11d,3)
 g:'(sqldata1d=sqldata2d) %0SmBk1
 g:'(sqldata1d'="") %0SmBk1
 goto:sqldata7d'=1 %0SmBuncommitted
 if sqldata7d=1 {
 	lock +^User.PracownikD($p(sqldata4d,"||",1))#"S":$zu(115,4)
 	if $t { set sqldata9d=$name(^User.PracownikD($p(sqldata4d,"||",1)))_"#""SI""",sqldata8d=1 }
 	else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.Pracownik for RowID value: "_sqldata4d ztrap "LOCK"  }
 }
 ; asl MOD# 3
 s sqldata5d=$zlist(sqldata1d)
 i sqldata4d'="" s sqldata15d="" i $d(^User.PracownikD(sqldata4d),sqldata15d)
 e  g %0SmCdun
 Set sqldata1d=$lg(sqldata15d,3)
 s sqldata6d=$zlist(sqldata1d)
 g:sqldata5d'=sqldata6d %0SmCdun
%0SmBuncommitted ;
 s SQLCODE=0 g %0Sc
%0SmCdun if $g(sqldata7d)=1 { if $g(sqldata8d)=1 { l -@sqldata9d s sqldata8d=0 } elseif $g(sqldata8d)=2 { do $classmethod($li(sqldata9d),"%UnlockId",$li(sqldata9d,2),1,1)  s sqldata8d=0 } }
 g %0SmBk1
%0SmBdun 
%0SmAdun 
%0Sc s %ROWCOUNT='SQLCODE
 if $g(sqldata7d)=1 { if $g(sqldata8d)=1 { l -@sqldata9d } elseif $g(sqldata8d)=2 { do $classmethod($li(sqldata9d),"%UnlockId",$li(sqldata9d,2),1,1)  } }
 s:$d(%sqltime) sqldata16d=$g(sqldata16d)+$zh-%sqltime
 n context,tmp,count,total,mean s context=$system.Context.SQL()
 if $d(sqldata16d,%sqltime) {
 if $g(context.Stats)<$zu(99) { d AggregateStats^%SYS.SQLSRV() }
 s tmp=$g(context.Stats($namespace,"puA8eKNGp0gLuR7bBuKcPyEEeWI="))
 s count=$lg(tmp,1),total=$lg(tmp,2),mean=total+%sqltime/(count+1)
 s context.Stats($namespace,"puA8eKNGp0gLuR7bBuKcPyEEeWI=")=$lb(count+1,total+%sqltime,$s(+count=0:0,1:(%sqltime-mean)**2+(count*((total/count-mean)**2+$lg(tmp,3)))/(count+1))) }
 q
%0Serr s $zt=""
 d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 g %0Sc
zfakturyPracownikaSQLFKeyRefAct(pSameTable=0,k,pNoLock=0,%p...)
		// ON UPDATE/DELETE NOACTION
	quit:%p(1)="" 0 new rx set rx=..fakturyPracownikaSQLFKeyExists(%p(1)) set:rx %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler27",,"SQLUser"_"."_"Pracownik",k,"fakturyPracownika","'fakturyPracownika'") QUIT rx
zIDKEYCheck(K1,lockonly=0,concurrency=-1) public {
	s id=K1,exists=..%ExistsId(id) q:'exists $s('lockonly:$$Error^%apiOBJ(5797,$classname(),"IDKEY",id),1:1) s:concurrency=-1 concurrency=$select(..#DEFAULTCONCURRENCY="$zu(115,10)":$zu(115,10),1:$xecute("q "_..#DEFAULTCONCURRENCY)) if concurrency { s status=..%LockId(id,1) q:('status) status } if 'lockonly { s exists=..%ExistsId(id) d:concurrency ..%UnlockId(id,1,0) quit $s('exists:$$Error^%apiOBJ(5797,$classname(),"IDKEY",id),1:1) } else { d:concurrency ..%UnlockId(id,1,0) q 1 }
}
zIDKEYDelete(K1,concurrency=-1) public {
	Quit ..%DeleteId(.K1,concurrency) }
zIDKEYExists(K1,id="")
	s id=K1 q ..%ExistsId(K1)
	Quit
zIDKEYOpen(K1,concurrency=-1,sc) public { Set:'($data(sc)#2) sc=1
	Quit ..%OpenId(.K1,concurrency,.sc) }
zIDKEYSQLCheckUnique(pFromOrig=0,%pID,%pVals...)
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLCheckUnique")
zIDKEYSQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key IDKEY.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=%pVal(1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"SQLUser"_"."_"Pracownik"_":"_"IDKEY") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv=$d(^User.PracownikD(%pVal(1))) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Quit
zIDKEYSQLFindPKeyByConstraint(%con)
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLFindPKeyByConstraint")
zIDKEYSQLFindRowIDByConstraint(%con,pInternal=0)
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLFindRowIDByConstraint")
]]></Routine>


<Class name="User.Pracownik">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor,User.Osoba</Super>
<TimeChanged>65172,74091.197447</TimeChanged>
<TimeCreated>64423,65826.851451</TimeCreated>

<Property name="tytul">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="255"/>
<Parameter name="VALUELIST" value=",Magister, Technik"/>
</Property>

<Property name="fakturyPracownika">
<Type>User.Faktura</Type>
<Cardinality>one</Cardinality>
<Inverse>pracownikWystawiajacy</Inverse>
<Relationship>1</Relationship>
</Property>

<Method name="przedstawSie">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	SET zapytanie = "SELECT p.imie, p.nazwisko FROM Pracownik p WHERE p.ID = ?"
	
	SET wyniki = ##Class(%SQL.Statement).%ExecDirect(,zapytanie,..%Id())
	
	DO wyniki.%Next()
	
	Return "Faktura zostala wystawiona przez " _ wyniki.%Get("imie") _ " " _ wyniki.%Get("nazwisko")
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.PracownikD</DataLocation>
<DefaultData>PracownikDefaultData</DefaultData>
<IdLocation>^User.PracownikD</IdLocation>
<IndexLocation>^User.PracownikI</IndexLocation>
<StreamLocation>^User.PracownikS</StreamLocation>
<ExtentSize>3</ExtentSize>
<Data name="PracownikDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>imie</Value>
</Value>
<Value name="3">
<Value>fakturyPracownika</Value>
</Value>
<Value name="4">
<Value>adres</Value>
</Value>
<Value name="5">
<Value>nazwisko</Value>
</Value>
<Value name="6">
<Value>tytul</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="adres">
<Selectivity>33.3333%,miasto:100.0000%,ulica:50.0000%</Selectivity>
<AverageFieldSize>33.33,miasto:6,ulica:8.33</AverageFieldSize>
</Property>
<Property name="fakturyPracownika">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="imie">
<Selectivity>33.3333%</Selectivity>
<AverageFieldSize>6</AverageFieldSize>
</Property>
<Property name="nazwisko">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>10.33</AverageFieldSize>
</Property>
<Property name="tytul">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>8</AverageFieldSize>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Routine name="User.Towar.1" type="INT" languagemode="0" generated="1" timestamp="65172,73146.59751"><![CDATA[
 ;User.Towar.1
 ;(C)InterSystems, generated for class User.Towar.  Do NOT edit. 06/08/2019 08:19:06PM
 ;;455A6759;User.Towar
 ;
SQLUPPER(v,l) { quit $zu(28,v,7,$g(l,32767)) }
ALPHAUP(v,r) { quit $zu(28,v,6) }
STRING(v,l) { quit $zu(28,v,9,$g(l,32767)) }
SQLSTRING(v,l) { quit $zu(28,v,8,$g(l,32767)) }
UPPER(v) { quit $zu(28,v,5) }
MVR(v) { quit $zu(28,v,2) }
TRUNCATE(v,l) { quit $e(v,1,$g(l,3641144)) }
%BindExport(dev,Seen,RegisterOref,AllowedDepth,AllowedCapacity) public {
   i $d(Seen(+$this)) q 1
   Set Seen(+$this)=$this
   s sc = 1
 s proporef=..%source
 s proporef=..pozycjaTowaru
   d:RegisterOref InitObjVar^%SYS.BINDSRV($this)
   i dev'="" s t=$io u dev i $zobjexport($this_"",3)+$zobjexport($this."%%OID",3)+$zobjexport($this,3)!1 u t
 If AllowedDepth>0 Set AllowedDepth = AllowedDepth - 1
 If AllowedCapacity>0 Set AllowedCapacity = AllowedCapacity - 1/2
 s proporef=..%source
 s proporef=..pozycjaTowaru
       i proporef'="" s sc=1 i AllowedDepth'=0,AllowedCapacity'=0 s sc=proporef.%BindExport(dev,.Seen,RegisterOref,AllowedDepth,AllowedCapacity) q:('sc) sc
   Quit sc }
%BuildIndices(pIndexList="",pAutoPurge=1,pLockFlag=0,pJournalFlag=1,pStartID="",pEndID="",pIgnoreIndexList="") public {
	if ($listlength(pIndexList)=1)&&($listget(pIndexList,1)="") { return 1 }
	Set class=$classname(),tBuildFlags=1,tBuildFlags(class)=$c(0)
	Set tPtr=0,tStatus=1,pJournalFlag=''pJournalFlag
	While $listnext(pIndexList,tPtr,tIndex) {
		continue:tIndex=""
		If '$d(^oddCOM(class,"i",tIndex)) {
			Set tStatus=$select(+tStatus:$$Error^%apiOBJ(5066,class_"::"_tIndex),1:$$AppendStatus^%occSystem(tStatus,$$Error^%apiOBJ(5066,class_"::"_tIndex)))
		}
	}
	If ('tStatus) RETURN tStatus
	if ((pIndexList="")||($listfind(pIndexList,"pozycjaTowaruIndex"))),'$listfind(pIgnoreIndexList,"pozycjaTowaruIndex") { set $Extract(tBuildFlags(class),1)=$c(1) }
	Quit ..%BuildIndexInternal(.pLockFlag,.pAutoPurge,.pStartID,.pEndID,.pIndexList,.tBuildFlags,"^User.TowarD",0,.pJournalFlag,0) }
%BuildIndicesSegment(pStartID,pEndID,pIndexHandle=0,pLockFlag=1,pFirstRange=0,pJob="") public {
	New %tIndexBuffer
	Try {
		set tStatus=1,tLocked=0
		If pLockFlag'=2,$Ascii(pIndexHandle($classname()),1),$SortBegin(^User.TowarI("pozycjaTowaruIndex")),$increment(^CacheTempIndexBuild(pJob,1)) { Do $system.Event.Create($name(^CacheTempIndexBuild(pJob,1))) }
		Set tPrefetch=$prefetchon(^User.TowarD)
		If 'pFirstRange||('$data(^User.TowarD(pStartID))) { Set tID=$order(^User.TowarD(pStartID)) } Else { Set tID=pStartID }
		While tID'="",(pEndID="")||(tID']]pEndID) {
			If pLockFlag=2 {
				Set tSC = ..%LockId(tID,1)
				If ('tSC) {
					Set tStatus=$select(+tStatus:tSC,1:$$AppendStatus^%occSystem(tStatus,tSC))
					Set tID=$order(^User.TowarD(tID))
					Continue
				}
			}
			If pLockFlag'=2||($data(^User.TowarD(tID))) {
				Set tSC=..%FileIndices(tID,.pIndexHandle)
				If ('tSC) { Set tStatus=$select(+tStatus:tSC,1:$$AppendStatus^%occSystem(tStatus,tSC)) }
			}
			Do:pLockFlag=2 ..%UnlockId(tID,1,1)
			set tID=$order(^User.TowarD(tID))
		}
	}
	Catch tException {
		Set tSC=tException.AsStatus(),tStatus=$select(+tStatus:tSC,1:$$AppendStatus^%occSystem(tStatus,tSC))
	}
	If pLockFlag'=2,$Ascii(pIndexHandle($classname()),1) {
		If $increment(^CacheTempIndexBuild(pJob,1),-1)=0 { Do $system.Event.Delete($name(^CacheTempIndexBuild(pJob,1))) } Else { Try { Do $system.Event.Wait($name(^CacheTempIndexBuild(pJob,1))) } Catch {} }
		If $SortEnd(^User.TowarI("pozycjaTowaruIndex")) {}
	}
	Set:$Get(tPrefetch) tPrefetch=$prefetchoff(^User.TowarD)
	Quit tStatus }
%CheckConstraints(pID,pConstraintList="",pCheckDisabled=0,pErrorInfo) public {
	if (''..%OnDetermineClass($select(pID="":"",1:$listbuild(pID_"")),.tMSTC)) && (tMSTC '= $classname()) { quit $classmethod(tMSTC,"%CheckConstraints",pID,pConstraintList) } else { quit 1 } }
%CheckConstraintsForExtent(pConstraintList="",pCheckDisabled=0,pErrorLog) [ SQLCODE,tID ] public { New %msg,%ROWCOUNT,%ROWID,SQLCODE,tID 
	kill pErrorLog set tStatusAll = 1, pErrorLog = 0 if '$listvalid(pConstraintList) { set pConstraintList = $listfromstring(pConstraintList) }
	 ;---&sql(declare ext cursor for select %ID into :tID FROM SQLUser.Towar)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE, tID
	
	 ;---&sql(open ext)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE
	do %ext0o
	if SQLCODE '< 0 {
		for {
			 ;---&sql(fetch ext)
 			 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE
			do %0Do
			if SQLCODE { if SQLCODE=100 { quit } elseif SQLCODE<0 { set tStatusAll = $select(+tStatusAll:$$Error^%apiOBJ(5521,SQLCODE,$Get(%msg)),1:$$AppendStatus^%occSystem(tStatusAll,$$Error^%apiOBJ(5521,SQLCODE,$Get(%msg)))) quit } }
			set tStatus = ..%CheckConstraints(tID,pConstraintList,pCheckDisabled,.tErrorInfo)
			if ('tStatus) { set tStatusAll = $select(+tStatusAll:tStatus,1:$$AppendStatus^%occSystem(tStatusAll,tStatus)) set:pErrorLog<1000 pErrorLog = pErrorLog + 1, pErrorLog(pErrorLog) = tErrorInfo _ $Listbuild(tStatus) }
		}
		 ;---&sql(close ext)
 		 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE
		do %ext0c
	}
	quit tStatusAll }
 q
%ext0o 
 try { s SQLCODE=$s($g(%ext0107c):-101,1:0) q:SQLCODE'=0 
 n %sqltime s %sqltime=$zh
 s %ext0107d(1)=0 s:$d(%0CacheRowLimit)#2 %ext0107d(2)=%0CacheRowLimit
 s %ext0107d(3)=$zu(115,2)
 s %ext0107d(4)=0,%ext0107d(5)=""
 d:$zu(115,15) $system.ECP.Sync()
 s %ext0107c=1,SQLCODE=0
 s:$d(%sqltime) %ext0107d(6)=$g(%ext0107d(6))+$zh-%sqltime
 } catch { d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %ext0107c,%ext0107d,%ext0107E,%ext0107n,%ext0107R }
 q
%0Afirst 
 ; asl MOD# 2
 s tID=""
%0AmBk1 s tID=$o(^User.TowarD(tID))
 i tID="" g %0AmBdun
 goto:%ext0107d(3)'=1 %0AmBuncommitted
 if %ext0107d(3)=1 {
 	lock +^User.TowarD($p(tID,"||",1))#"S":$zu(115,4)
 	if $t { set %ext0107d(5)=$name(^User.TowarD($p(tID,"||",1)))_"#""SI""",%ext0107d(4)=1 }
 	else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.Towar for RowID value: "_tID ztrap "LOCK"  }
 }
 ; asl MOD# 3
 i tID'="",$d(^User.TowarD(tID))
 e  g %0AmCdun
%0AmBuncommitted ;
 s:$g(SQLCODE)'<0 SQLCODE=0 s %ROWCOUNT=$i(%ext0107d(1)),%ROWID=tID,%ext0107c=10
 //-- FETCH Output
 s:$d(%sqltime) %ext0107d(6)=$g(%ext0107d(6))+$zh-%sqltime
 quit
%ext0f //-- FETCH tag
 i '$g(%ext0107c) { s SQLCODE=-102 q  } i %ext0107c=100 { s SQLCODE=100 q  } s SQLCODE=0
 i $d(%ext0107d(2))#2,$g(%ext0107d(1))'<%ext0107d(2) { s SQLCODE=100,%ROWCOUNT=%ext0107d(1),%ext0107c=100 q }
 n %sqltime s %sqltime=$zh
 g %0Afirst:%ext0107c=1
%0AmCdun if $g(%ext0107d(3))=1 { if $g(%ext0107d(4))=1 { l -@%ext0107d(5) s %ext0107d(4)=0 } elseif $g(%ext0107d(4))=2 { do $classmethod($li(%ext0107d(5)),"%UnlockId",$li(%ext0107d(5),2),1,1)  s %ext0107d(4)=0 } }
 g %0AmBk1
%0AmBdun 
%0AmAdun 
 s %ROWCOUNT=%ext0107d(1),SQLCODE=100,%ext0107c=100
 s:$d(%sqltime) %ext0107d(6)=$g(%ext0107d(6))+$zh-%sqltime
 //-- no [more] data
 quit
%ext0c i '$g(%ext0107c) { s SQLCODE=-102 q  }
 n %sqltime s %sqltime=$zh
 s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%ext0107d(1)),1:0)
 if $g(%ext0107d(3))=1 { if $g(%ext0107d(4))=1 { l -@%ext0107d(5) } elseif $g(%ext0107d(4))=2 { do $classmethod($li(%ext0107d(5)),"%UnlockId",$li(%ext0107d(5),2),1,1)  } }
 s:$d(%sqltime) %ext0107d(6)=$g(%ext0107d(6))+$zh-%sqltime
 n context,tmp,count,total,mean s context=$system.Context.SQL()
 if $d(%ext0107d(6),%sqltime) {
 if $g(context.Stats)<$zu(99) { d AggregateStats^%SYS.SQLSRV() }
 s tmp=$g(context.Stats($namespace,"h6OxZUG3kSPOa8zuqi1A2oUfB8w="))
 s count=$lg(tmp,1),total=$lg(tmp,2),mean=total+%sqltime/(count+1)
 s context.Stats($namespace,"h6OxZUG3kSPOa8zuqi1A2oUfB8w=")=$lb(count+1,total+%sqltime,$s(+count=0:0,1:(%sqltime-mean)**2+(count*((total/count-mean)**2+$lg(tmp,3)))/(count+1))) }
 k %ext0107c,%ext0107d,%ext0107E,%ext0107n,%ext0107R
 s SQLCODE=0
 quit  // close
%0Aerr d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 s %ext0107c=100
 quit  // error
%0Do try { do %ext0f q:SQLCODE'=0
 } catch { do %0Aerr }
 q
%ComposeOid(id) public {
	set tCLASSNAME = $listget($g(^User.TowarD(id)),1)
	if tCLASSNAME="" { quit $select(id="":"",1:$listbuild(id_"","User.Towar")) }
	set tClass=$piece(tCLASSNAME,$extract(tCLASSNAME),*-1)
	set:tClass'["." tClass="User."_tClass
	quit $select(id="":"",1:$listbuild(id_"",tClass)) }
%Construct(initvalue) public {
	Set i%%Concurrency=$zu(115,10),i%%seriesCount=1
	Kill i%%data,i%%seriesNames
	Quit 1 }
%ConstructCloneInit(object,deep=0,cloned,location) public {
	Set i%"%%OID"=""
	If deep>0 {
		If $isobject(..%source)=1 Set r%%source=r%%source.%ConstructClone(1,.cloned),i%%source=""
	}
	Quit 1 }
%CopyDataFromModel(pData,pTypes,pSeries="") public {
 // Generated by %ZEN.DataModel.ObjectDataModel
 Set tSC = 1
 For sno = $S(pSeries="":1,1:pSeries):1:..%seriesCount {
 Set pData(sno,"nazwa") = ..nazwaLogicalToDisplay(..nazwa)
 Set pData(sno,"cena") = ..cenaLogicalToDisplay(..cena)
 Set pData(sno,"pozycjaTowaru") = ..pozycjaTowaruGetObjectId()
 Quit:pSeries'=""
 }
 If ('tSC) Quit tSC
 Quit tSC }
%CopyDataToModel(pData,pSeries="") public {
 // Generated by %ZEN.DataModel.ObjectDataModel
 Set tSC = 1
 For sno = $S(pSeries="":1,1:pSeries):1:..%seriesCount {
 Set ..nazwa = ..nazwaDisplayToLogical($G(pData(sno,"nazwa")))
 Set ..cena = ..cenaDisplayToLogical($G(pData(sno,"cena")))
 Do ..pozycjaTowaruSetObjectId($G(pData(sno,"pozycjaTowaru")))
 Quit:pSeries'=""
 }
 If ('tSC) Quit tSC
 Quit tSC }
%CreateModelInstance(pID,pConcurrency=-1,pSC) public { Set:'($data(pSC)#2) pSC=1
	Quit $S(pID="":..%New(),1:..%OpenId(pID,pConcurrency,.pSC)) }
%DeleteData(id,concurrency) public {
	Quit:id="" $$Error^%apiOBJ(5812)
	set $Ztrap="DeleteDataERR" set lockok=0,sc=""
	If concurrency {
		Lock +(^User.TowarD(id)#"E"):$zu(115,4)
		Set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0))
		Set:lockok=2&&($tlevel) %0CacheLock($classname(),"E")=1
		If 'lockok {
			Quit $$Error^%apiOBJ(5803,$classname())
		}
	}
	If ($Data(^User.TowarD(id))) {
		Set bsv0N1=^User.TowarD(id)
		If $data(^oddEXTR($classname())) {
			Set fc=""
			For {
				Set fc=$order(^oddEXTR($classname(),"n","%1","f",fc))
				Quit:fc=""
				Set fk=""
				For {
					Set fk=$order(^oddEXTR($classname(),"n","%1","f",fc,fk))
					Quit:fk=""
					If $get(^oddEXTR($classname(),"n","%1","f",fc,fk,61))'="" {
						Set sc=$classmethod(fc,fk_"Delete",id)
						If ('sc) { Goto DeleteDataEXIT }
					}
				}
			}
			Set fc=""
			For {
				Set fc=$order(^oddEXTR($classname(),"n","IDKEY","f",fc))
				Quit:fc=""
				Set fk=""
				For {
					Set fk=$order(^oddEXTR($classname(),"n","IDKEY","f",fc,fk))
					Quit:fk=""
					If $get(^oddEXTR($classname(),"n","IDKEY","f",fc,fk,61))'="" {
						Set sc=$classmethod(fc,fk_"Delete",id)
						If ('sc) { Goto DeleteDataEXIT }
					}
				}
			}
		}
		Set bsv0N2=$listget(bsv0N1,4)
		Kill ^User.TowarI("pozycjaTowaruIndex",$s(bsv0N2'="":bsv0N2,1:-1E14),id)
		Kill ^User.TowarD(id)
		Set sc=1
	}
	Else { Set sc=$$Error^%apiOBJ(5810,$classname(),id) }
DeleteDataEXIT
	If concurrency,lockok {
		Lock -(^User.TowarD(id)#"E")
	}
DeleteDataRET	Set $Ztrap = ""
	QUIT sc
DeleteDataERR	Set $Ztrap = "DeleteDataRET"
	Set sc = $$Error^%apiOBJ(5002,$ZE)
	Goto DeleteDataEXIT }
%Exists(oid="") public {
	Quit ..%ExistsId($listget(oid)) }
%ExistsId(id) public {
	Try { set tExists = $s(id="":0,$d(^User.TowarD(id)):1,1:0) } catch tException { set tExists = 0 if '(tException.%IsA("%Exception.SystemException")) { throw tException } elseif tException.Name'="<SUBSCRIPT>" { ZT $ZE } } quit tExists }
%FileIndices(id,pIndexHandle=0) public {
	Set $ZTrap="CatchError",sc=1
	Set bsv0N2=$Get(^User.TowarD(id))
	Set bsv0N3=$listget(bsv0N2,1)
	If bsv0N3'="" {
		Set bsv0N1=$piece(bsv0N3,$extract(bsv0N3),*-1)
		Set:bsv0N1'["." bsv0N1="User."_bsv0N1
		If bsv0N1'="" {
			Quit $classmethod(bsv0N1,"%FileIndices",id,.pIndexHandle)
		}
	}
	If ('pIndexHandle)||($Ascii($Get(pIndexHandle("User.Towar")),1)=1) {
		Set bsv0N4=$listget(bsv0N2,4)
		Set bsv0N5=$s(bsv0N4'="":bsv0N4,1:-1E14)
		Set ^User.TowarI("pozycjaTowaruIndex",bsv0N5,id)=$listget(bsv0N2,1)
	}
	QUIT 1
CatchError	s $ZTrap="" i $ZE'="" { s sc = $$Error^%apiOBJ(5002,$ZE) } q sc }
%GetLookupSQL(pProperty,pSQL,pSQLLookup) public {
 // Generated by %ZEN.DataModel.ObjectDataModel
 Set pSQL=""
 Set pSQLLookup=""
 Goto Dispatch
t1 // pozycjaTowaru
 Set pSQL = "SELECT %ID FROM SQLUser.PozycjaFaktury"
 Set pSQLLookup = "SELECT %ID FROM SQLUser.PozycjaFaktury WHERE %ID = ?"
 Goto Done
Dispatch
 Goto $Case(pProperty,"pozycjaTowaru":t1,:Done)
Done
 Quit 1 }
%GetPropertyInfo(pInfo,pExtended=0,pModelId="",pContainer="") public {
 // Generated by %ZEN.DataModel.ObjectDataModel
 Set tSC = 1
 Set pInfo("nazwa") = $I(pInfo)
 Set pInfo("cena") = $I(pInfo)
 Set pInfo("cena","%ptype") = "12"
 Set pInfo("pozycjaTowaru") = $I(pInfo)
 Set pInfo("pozycjaTowaru","%ptype") = "2"
 If (pExtended) {
  Set tProp = "nazwa"
  Set pInfo(tProp,"%type") = "combobox"
  Set pInfo(tProp,"required") = 1
  Set pInfo(tProp,"valueList") = "Apap, Ibuprofen, Krem Nivea, Strzykawka, Bandaz, Gripex"
  Set tProp = "cena"
  Set pInfo(tProp,"%type") = "text"
  Set pInfo(tProp,"size") = 7
  Set pInfo(tProp,"required") = 1
  Set tProp = "pozycjaTowaru"
  Set pInfo(tProp,"%type") = "dataCombo"
  Set pInfo(tProp,"cached") = 1
 }
 Quit tSC }
%GetPropertyList(pModelId="",pContainer="") public {
	Quit "nazwa,cena:12,pozycjaTowaru:2" }
%InsertBatch(objects,concurrency=0,useTransactions=0) public {
	try {
		set numerrs=0,errs="",cnt=0,ptr=0
		while $listnext(objects,ptr,data) {
			set cnt=cnt+1
			set zzc9v1=$listget(data,4)
			set lock=0
			if (useTransactions) tstart
			set id=$i(^User.TowarD)
			if (zzc9v1'="")&&('##class(User.PozycjaFaktury).%ExistsId(zzc9v1)) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5824,"User.Towar.pozycjaTowaru("_$zu(144,1,zzc9v1)_")")) }
			try {
				set tInnerException = ""
				;
				if concurrency { lock +(^User.TowarD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				set ^User.TowarD(id)=data
				set ^User.TowarI("pozycjaTowaruIndex",$s(zzc9v1'="":zzc9v1,1:-1E14),id)=$listget(data,1)
				if (useTransactions) { tcommit }
			}
			catch tInnerException {
				set newerr=$lb(cnt,tInnerException.AsStatus())
				if '($length(errs)+$length(newerr)>32767) { set numerrs=numerrs+1, errs=errs_newerr }
				if (useTransactions) && ($Tlevel) trollback
			}
			if lock lock -(^User.TowarD(id)#"E")
		}
	}
	catch tException {
		set newerr=$lb($g(cnt),tException.AsStatus())
		if '($length(errs)+$length(newerr)>32767) { set numerrs=numerrs+1, errs=errs_newerr }
	}
	QUIT ($lb(numerrs))_errs }
%KillExtentData()
	Kill ^User.TowarD
	Quit 1
%LoadData(id) public {
	New %s1
	set $ZTrap="CatchError",locked=0,$ze=""
	If i%%Concurrency=4 {
		Lock +(^User.TowarD(id)#"E"):$zu(115,4)
		if '$t do init s i%%Concurrency=0 return $$Error^%apiOBJ(5803,$classname())
	} ElseIf i%%Concurrency>1 {
		Lock +(^User.TowarD(id)#"SE"):$zu(115,4)
		if '$t do init s i%%Concurrency=0 return $$Error^%apiOBJ(5803,$classname())
		set locked = 1
	}
	If $d(^User.TowarD(id),%s1)#2 {
		If i%%Concurrency=2 { Lock -(^User.TowarD(id)#"SIE") }
		Set i%nazwa=$lg(%s1,2),i%cena=$lg(%s1,3),i%pozycjaTowaru=$lg(%s1,4)
		Quit 1
	} Else {
		If i%%Concurrency=2 { Lock -(^User.TowarD(id)#"SIE") }
		do init
		set sc = $$Error^%apiOBJ(5809,$classname(),id) goto CatchError
	}
CatchError	set $ZTrap = "" if $ZE'="" { s sc = $$Error^%apiOBJ(5002,$ZE) }
	If ($get(locked))&&(i%%Concurrency<3) { Lock -(^User.TowarD(id)#"SIE") }
	if '('sc) { set sc=$$Error^%apiOBJ(5809,$classname(),id) }
	return sc
init	Set i%cena="",i%nazwa="",i%pozycjaTowaru=""
	quit }
%LoadDataFromMemory(id,objstate,obj) public {
	New %s1
	If $d(objstate(id)) {
		Set %s1=$g(objstate(id))
		Set i%nazwa=$lg(%s1,2),i%cena=$lg(%s1,3),i%pozycjaTowaru=$lg(%s1,4)
		Quit 1
	} Else {
		Set i%cena="",i%nazwa="",i%pozycjaTowaru=""
		Quit $$Error^%apiOBJ(5809,$classname(),id)
	} }
%LoadInit(oid="",concurrency="",reset=0) public {
	If concurrency'="" Set i%%Concurrency=concurrency
	If reset {
		Kill i%%data,i%%seriesNames,i%%source,i%pozycjaTowaru
	}
	Set i%%id="",i%%seriesCount=1,i%%source="",r%%source="",r%pozycjaTowaru=""
	If 'reset { Set i%"%%OID"=oid If oid'="" { Set $zobjoid("",$listget(oid))=$this } }
	Quit 1 }
%LockExtent(shared=0) public {
	If shared {
		Lock +(^User.TowarD#"S"):$zu(115,4) Quit:$t 1
		Quit $$Error^%apiOBJ(5799,$classname())
	}
	Lock +(^User.TowarD):$zu(115,4) Quit:$t 1
	Quit $$Error^%apiOBJ(5798,$classname()) }
%LockId(id,shared=0,timeout) public { Set:'($data(timeout)#2) timeout=$zu(115,4)
	If id="" { Quit $$Error^%apiOBJ(5812) }
	Set sc=1
	If 'shared {
		Lock +(^User.TowarD(id)#"E"):timeout Quit:$t 1
		Quit $$Error^%apiOBJ(5803,id_":"_$classname())
	}
	Lock +(^User.TowarD(id)#"SE"):timeout Quit:$t 1
	Quit $$Error^%apiOBJ(5804,id_":"_$classname()) }
%NormalizeObject() public {
	If '$system.CLS.GetModified() Quit 1
	If m%%id Set:i%%id'="" i%%id=(..%idNormalize(i%%id))
	If m%%seriesCount Set:i%%seriesCount'="" i%%seriesCount=(..%seriesCountNormalize(i%%seriesCount))
	If m%cena Set:i%cena'="" i%cena=(..cenaNormalize(i%cena))
	If m%nazwa Set:i%nazwa'="" i%nazwa=(..nazwaNormalize(i%nazwa))
	Quit 1 }
%OnDeleteSource(pID) public {
	Quit ..%DeleteId(pID) }
%OnDetermineClass(oid,class) public {
	Set id=$listget($get(oid))
	Quit:id="" $$Error^%apiOBJ(5812)
	Set idclass=$lg($get(^User.TowarD(id)),1)
	If idclass="" { Set class="User.Towar" Quit 1 }
	Set class=$piece(idclass,$extract(idclass),*-1)
	Set:class'["." class="User."_class
	QUIT 1 }
%OnSaveSource(pSource) public {
 Set tSC = ..%Save() Set:(''tSC) ..%id = ..%Id() Quit tSC }
%PhysicalAddress(id,paddr)
	if $Get(id)="" Quit $$Error^%apiOBJ(5813,$classname())
	if (id="") { quit $$Error^%apiOBJ(5832,$classname(),id) }
	s paddr(1)=$lb($Name(^User.TowarD(id)),$classname(),"IDKEY","listnode",id)
	s paddr=1
	Quit 1
%PurgeIndices(idxlist="",lockExtent=0,pIgnoreIndexList="") public {
	Set locked=0,sc=1
	Try {
		if ($listlength(idxlist)=1)&&($listget(idxlist,1)="") { return 1 }
		Set tPtr=0
		While $listnext(idxlist,tPtr,tIndex) {
			continue:tIndex=""
			If '($d(^oddCOM($classname(),"i",tIndex))) {
				Set sc=$select(+sc:$$Error^%apiOBJ(5066,$classname()_"::"_tIndex),1:$$AppendStatus^%occSystem(sc,$$Error^%apiOBJ(5066,$classname()_"::"_tIndex)))
			}
		}
		If ('sc) { Return sc }
		If lockExtent {
			Set sc=..%LockExtent(0)
			If ('sc) { Return sc }
			Set locked=1
		}
		If $system.CLS.IsMthd("%OnBeforePurgeIndices") {
			Set sc=..%OnBeforePurgeIndices(.idxlist)
			If (('sc))||(($listlength(idxlist)=1)&&($listget(idxlist,1)="")) {
				If locked {
					Do ..%SQLReleaseTableLock(0)
				}
				Return sc
			}
		}
		if ((idxlist="")||($listfind(idxlist,"pozycjaTowaruIndex"))),'$listfind(pIgnoreIndexList,"pozycjaTowaruIndex") {
			kill ^User.TowarI("pozycjaTowaruIndex")
		}
		Set sc=1
		If $system.CLS.IsMthd("%OnAfterPurgeIndices") { Set sc=..%OnAfterPurgeIndices(.idxlist) }
	} Catch tException {
		Set sc=tException.AsStatus(),$ZE=""
	}
	If locked { Do ..%UnlockExtent(0) }
	Quit sc }
%SQLAcquireLock(%rowid,s=0,unlockref=0)
	new %d,gotlock
	set %d(1)=%rowid set s=$e("E",'unlockref)_$e("S",s)
	lock +^User.TowarD(%d(1))#s:$zu(115,4) set gotlock=$t
	if gotlock,'unlockref { set:$case($SYSTEM.Lock.ReturnCode(),2:1,4:1,:0)&&($tlevel) %0CacheLock("User.Towar","E")=1 }
	set:gotlock&&unlockref unlockref=unlockref+1,unlockref(unlockref)=$lb($name(^User.TowarD(%d(1))),"User.Towar",s_"D")
	QUIT gotlock
%SQLAcquireTableLock(s=0,SQLCODE,to="")
	set s=$e("S",s) set:to="" to=$zu(115,4) lock +^User.TowarD#s:to QUIT:$t 1 set SQLCODE=-110 if s="S" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler35",,"SQLUser"_"."_"Towar") } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler36",,"SQLUser"_"."_"Towar") } QUIT 0
	Quit
%SQLBuildIndices(pIndices="",pLockFlag=0,pStartID="",pEndID="",pIgnoreIndexList="")
	QUIT ..%BuildIndices(pIndices,,pLockFlag,,pStartID,pEndID,pIgnoreIndexList)
%SQLBuildPurgeIndexForRow(pIndices="",pActions="BP",pLockRow=1,%d,%e,pIgnoreIndexList="")
	// Purge and build index nodes for a single row using given values, return Status Code
	new sn,tSC,tLock set tSC=1,pActions=$zcvt(pActions,"U")
	try {
		if $g(%d(1))="" { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'SQLUser.Towar'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'SQLUser.Towar'"))) RETURN tSC }
		if pLockRow { if '..%SQLAcquireLock(%d(1)) { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'SQLUser.Towar' with %ID = '"_%d(1)_"'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'SQLUser.Towar' with %ID = '"_%d(1)_"'"))) RETURN tSC  } else { set tLock=1 }}
		if ((pIndices="")||($lf(pIndices,"pozycjaTowaruIndex"))),'$listfind(pIgnoreIndexList,"pozycjaTowaruIndex") {
			if pActions["P" {
				set sn(1)=%e(4) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) k ^User.TowarI("pozycjaTowaruIndex",sn(1),sn(2))
			}
			if pActions["B" {
				set sn(1)=%d(4) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) set ^User.TowarI("pozycjaTowaruIndex",sn(1),sn(2))=%d(5)
			}
		}
		if pLockRow { do ..%SQLReleaseLock(%d(1),0,0) set tLock=0 }
	}
	catch {
		if $g(tLock) { do ..%SQLReleaseLock(%d(1),0,0) }
		set tSC=$select(+tSC:$$Error^%apiOBJ(5594,$ze),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5594,$ze)))
	}
	QUIT tSC
%SQLCopyIcolIntoName()
	if %oper="DELETE" {
		set:$d(%d(1)) %f("ID")=%d(1)
		QUIT
	}
	set:$d(%d(1)) %f("ID")=%d(1) set:$a(%e,2)&&$d(%d(2)) %f("cena")=%d(2) set:$a(%e,3)&&$d(%d(3)) %f("nazwa")=%d(3) set:$a(%e,4)&&$d(%d(4)) %f("pozycjaTowaru")=%d(4) set:$a(%e,5)&&$d(%d(5)) %f("x__classname")=%d(5)
	QUIT
%SQLDefineiDjVars(%d,subs,master)
	QUIT
%SQLDelete(%rowid,%check,%tstart=1,%mv=0,%polymorphic=0)
	new bva,ce,%d,dc,%e,%ele,%itm,%key,%l,%nc,omcall,%oper,%pos,%s,sn,sqlcode,subs set %oper="DELETE",sqlcode=0,%ROWID=%rowid,%d(1)=%rowid,%e(1)=%rowid,%l=$c(0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,2) {
		new %ls lock +^User.TowarD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("User.Towar","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"SQLUser"_"."_"Towar",$g(%d(1))) QUIT  }
	}
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORDelete"
	do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) if sqlcode { set SQLCODE=-106 do ..%SQLEExit() QUIT  }
	if %e(5)'="" { set sn=$p(%e(5),$e(%e(5)),$l(%e(5),$e(%e(5)))-1) if "Towar"'=sn { new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLDelete",%rowid,%check,%tstart,%mv,1) QUIT  }}
	if '$a(%check),'$zu(115,7) do  if sqlcode set SQLCODE=sqlcode do ..%SQLEExit() QUIT  
	. new %fk,%k,%p,%st,%t,%z set %k="",%p("%1")="%d(1),",%p("IDKEY")="%d(1),"
	. for  quit:sqlcode<0  set %k=$o(^oddEXTR("User.Towar","n",%k)) quit:%k=""  set %t="" for  set %t=$o(^oddEXTR("User.Towar","n",%k,"f",%t)) quit:%t=""  set %st=(%t="User.Towar") set %fk="" for  set %fk=$order(^oddEXTR("User.Towar","n",%k,"f",%t,%fk)) quit:%fk=""  x "set %z=$classmethod(%t,%fk_""SQLFKeyRefAction"",%st,%k,$a(%check,2),"_%p(%k)_")" if %z set sqlcode=-124 quit  
	. quit:sqlcode  quit:$a(%check,2)=1
	. if $g(%e(4))'="",'$g(%0CacheLock("User.PozycjaFaktury","E")),'##class(User.PozycjaFaktury).%SQLExists(1,,%e(4)) set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler3",,"SQLUser"_"."_"Towar","pozycjaTowaru","POZYCJATOWARU") quit
	set ce="" for  { set ce=$order(^oddSQL("SQLUser","Towar","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children
	if '$a(%check,3) {
		set sn(1)=%e(4) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) k ^User.TowarI("pozycjaTowaruIndex",sn(1),sn(2))
	}
	k ^User.TowarD(%d(1))
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORDelete	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"Towar",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"Towar") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT
	Quit
%SQLDeleteTempStreams()
	// Delete all temporary streams
	QUIT
%SQLEExit()
	do ..%SQLUnlock() 
	do ..%SQLUnlockRef()
	if %tstart,$zu(115,1)=1,$TLEVEL { set %tstart=0 TROLLBACK 1 } kill:$g(omcall) %0CacheSQLRA QUIT  
	Quit
%SQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key %1.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=%pVal(1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"SQLUser"_"."_"Towar"_":"_"%1") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv=$d(^User.TowarD(%pVal(1))) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Quit
%SQLGetLock(pRowId,pShared=0,pUnlockRef)
	QUIT ..%SQLAcquireLock(pRowId,pShared,.pUnlockRef)
%SQLGetOld(%rowid,%d,%e,sqlcode)
	new s set %d(1)=%rowid if '$d(^User.TowarD(%d(1)),s) { set sqlcode=100 quit  }
	Set %e(5)=$lg(s),%e(4)=$lg(s,4)
	QUIT
%SQLGetOldAll()
	new s set %d(1)=%rowid if '$d(^User.TowarD(%d(1)),s) { set sqlcode=100 quit  }
	Set %e(5)=$lg(s),%e(3)=$lg(s,2),%e(2)=$lg(s,3),%e(4)=$lg(s,4)
	QUIT
%SQLGetOldIndex(%rowid,%d,pF=0,sqlcode)
	try {
		new tClass,tF,tOid,tSC
		set tOid=..%ComposeOid(%rowid)
		if ''..%OnDetermineClass(tOid,.tClass),tClass'=$classname() {
			set tF=1 do $classmethod(tClass,"%SQLGetOldIndex",%rowid,,.tF,.sqlcode)
			set:$d(tF("pozycjaTowaru")) %d(4)=tF("pozycjaTowaru") set:$d(tF("x__classname")) %d(5)=tF("x__classname") 
			RETURN
		}
	}
	catch { }
	new s set %d(1)=%rowid if '$d(^User.TowarD(%d(1)),s) { set sqlcode=100 quit  }
	Set %e(5)=$lg(s),%e(4)=$lg(s,4)
	if pF { set:$d(%d(4)) pF("pozycjaTowaru")=%d(4) set:$d(%d(5)) pF("x__classname")=%d(5)  }
	set sqlcode=0
	QUIT
%SQLInsert(%d,%check,%inssel,%vco,%tstart=1,%mv=0)
	new bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,sqlcode,sn,subs,unlockref,icol set %oper="INSERT",sqlcode=0,%l=$c(0,0,0),unlockref=1
	if $a(%check,7) { new %diu merge %diu=%d }
	if $d(%d(1)),'$zu(115,11) { if %d(1)'="" { set SQLCODE=-111,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler6",,"ID","SQLUser"_"."_"Towar") QUIT ""  } kill %d(1) } 
	if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode QUIT "" }
	do ..%SQLNormalizeFields()
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  } set $zt="ERRORInsert"
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
			do:$g(%d(2))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,3)) do:$g(%d(3))="" ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,4)) 
			quit:sqlcode<0		// A required field was missing
			quit:$zu(115,7)  set %msg=""
			if $g(%d(4))'="",'##class(User.PozycjaFaktury).%SQLExists($s($a(%check,2)=1:-1,1:0),.unlockref,%d(4)) { set sqlcode=-121,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler41",,"SQLUser"_"."_"Towar","pozycjaTowaru","POZYCJATOWARU")_"  "_$g(%msg) quit  }		// Foreign Key Constraint pozycjaTowaru
		} while 0
		if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT "" }		// A constraint failed
	}
	if '$d(%d(1)) { set %d(1)=$i(^User.TowarD) } elseif %d(1)>$g(^User.TowarD) { if $i(^User.TowarD,$zabs(%d(1)-$g(^User.TowarD))) {}} elseif $d(^User.TowarD(%d(1))) { set SQLCODE=-119,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler33",,"ID",%d(1),"SQLUser"_"."_"Towar"_"."_"ID") do ..%SQLEExit() QUIT "" }
	set:'($d(%d(5))#2) %d(5)="" set:'($d(%d(4))#2) %d(4)=""
	if '$a(%check,2) {
		new %ls lock +^User.TowarD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("User.Towar","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"SQLUser"_"."_"Towar",$g(%d(1))) do ..%SQLEExit() QUIT ""  }
	}
	set ^User.TowarD(%d(1))=$lb($g(%d(5)),%d(3),%d(2),$g(%d(4)))
	if '$a(%check,3) {
		set sn(1)=%d(4) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) set ^User.TowarI("pozycjaTowaruIndex",sn(1),sn(2))=%d(5)
	}
	lock:$a(%l) -^User.TowarD(%d(1))#"E"
	TCOMMIT:%tstart&&($zu(115,1)=1)
	do ..%SQLUnlockRef()
	set SQLCODE=0
	QUIT %d(1) 			// %SQLInsert
ERRORInsert	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"Towar",$ze)
	if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"Towar") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  }
	do ..%SQLEExit()
	QUIT ""
%SQLInvalid(pIcol,pVal) public {
	set:$l($g(pVal))>40 pVal=$e(pVal,1,40)_"..." do:'$d(%n) ..%SQLnBuild() set %msg=$s($g(%msg)'="":%msg_$c(13,10),1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler37",,"SQLUser"_"."_"Towar"_"."_$lg(%n,pIcol),$s($g(pVal)'="":$s(pVal="":"<NULL>",pVal=$c(0):"<EMPTY STRING>",1:"'"_pVal_"'"),1:"")),sqlcode=$s(%oper="INSERT":-104,1:-105)
	QUIT sqlcode }
%SQLMissing(fname)
	set sqlcode=-108,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler47",,fname,"SQLUser"_"."_"Towar") quit
%SQLNormalizeFields()
	new %f for %f=2,4 { set:$g(%d(%f))'="" %d(%f)=$select(%d(%f)=$c(0)&&$zu(115,13):"",1:%d(%f)\1) }
	QUIT
%SQLPurgeIndices(pIndices="",pLockExtent=0,pIgnoreIndexList="")
	QUIT ..%PurgeIndices(pIndices,pLockExtent,pIgnoreIndexList)
%SQLQuickBulkInsert(%nolock=0)
	// Insert multiple new rows with values %qd(icol)
	new c,call,nc,nr,%qd,r,x set:%nolock=2 %nolock=0
	set nr=$zobjexport(12) for r=1:1:nr { set nc=$zobjexport(12) kill %qd for c=1:1:nc { set:$zobjexport(17) %qd(c+1)=$zobjexport(12) } do ..%SQLQuickInsert(.%qd,%nolock) set x=$zobjexport($s(%qrc:-1,1:%ROWID),18) } QUIT
%SQLQuickBulkLoad(%rowidlist,%nolock=0,pkey=0)
	// QuickLoad multiple rows
	new i,rc set:%nolock=2 %nolock=0 set rc=0
	for i=2:1:$lg(%rowidlist)+1 { do ..%SQLQuickLoad($lg(%rowidlist,i),%nolock) if SQLCODE=0 { set rc=rc+1 } else { QUIT  } } set %ROWCOUNT=rc QUIT
	Quit
%SQLQuickBulkSave(%nolock=0)
	// Insert and/or Update multiple [new] rows with values %qd(icol)
	set x=$zobjexport(-1,18),%qrc=400,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler44",,"SQLUser"_"."_"Towar") QUIT
%SQLQuickBulkUpdate(%nolock=0)
	// Update multiple new rows with values %qd(icol)
	new c,call,nc,nr,%qd,r,x set:%nolock=2 %nolock=0 set nr=$zobjexport(12) for r=1:1:nr { set %rowid=$zobjexport(12),nc=$zobjexport(12) kill %qd for c=1:1:nc { set:$zobjexport(17) %qd(c+1)=$zobjexport(12) } do ..%SQLQuickUpdate(%rowid,.%qd,%nolock) set x=$zobjexport($s(%qrc:-1,1:%ROWID),18) quit:%qrc  } QUIT  
%SQLQuickDelete(%rowid,%nolock=0,pkey=0)
	// Delete row where SQLRowID=%rowid
	set:%nolock=2 %nolock=0
	do ..%SQLDelete(%rowid,$c(0,%nolock=1,0,0,0,0))
	if SQLCODE<0 { set %qrc=-SQLCODE,%ROWCOUNT=0 } else { set %ROWCOUNT=1,%qrc=SQLCODE } QUIT
	Quit
%SQLQuickInsert(d,%nolock=0,pkey=0,parentpkey=0)
	// Insert new row with values d(icol)
	set:%nolock=2 %nolock=0
	do ..%SQLQuickOdbcToLogical(.d)
	set %ROWID=..%SQLInsert(.d,$c(0,%nolock=1,0,0,0,0)),%ROWCOUNT='SQLCODE,%qrc=SQLCODE kill d QUIT
%SQLQuickLoad(%rowid,%nolock=0,pkey=0,qq=0)
	// Get fields from row where SQLRowID=%rowid
	new d,i,il,subs set:%nolock=2 %nolock=1
	if %nolock=0 { if '..%SQLAcquireLock(%rowid) { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler45",,"SQLUser"_"."_"Towar",%rowid),%ROWCOUNT=0 QUIT  } set:$zu(115,2) il=$zu(115,2,0) }
	new s,ul set ul=0,d(1)=%rowid if $zu(115,2)=1 { lock +^User.TowarD(d(1))#"S":$zu(115,4) if $t { set ul=1 } else { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler46",,"SQLUser"_"."_"Towar",%rowid),%ROWCOUNT=0 quit  } }
	if '$d(^User.TowarD(d(1)),s) { set SQLCODE=100,%qrc=100 if %nolock=0 { do:$g(il) $zu(115,2,il) }} else { set SQLCODE=0
	if qq { set d(5)=$lg(s) if d(5)'="" { new sn set sn=$p(d(5),$e(d(5)),$l(d(5),$e(d(5)))-1) if "Towar"'=sn { if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,1) do:$g(il) $zu(115,2,il) } kill d set:sn'["." sn="User."_sn do $classmethod(sn,"%SQLQuickLoad",%rowid,%nolock,0,1) QUIT  }}}
	set d(2)=$lg(s,3) set d(3)=$lg(s,2) set d(4)=$lg(s,4) set d(5)=$lg(s)  }
	do ..%SQLQuickLogicalToOdbc(.d)
	if SQLCODE set %ROWCOUNT=0 set:SQLCODE<0 SQLCODE=-SQLCODE lock:ul -^User.TowarD(d(1))#"SI" set %qrc=SQLCODE QUIT
	set:qq d=$zobjexport("User.Towar",18),d=$zobjexport(5,18) set i=-1 for  { set i=$o(d(i)) quit:i=""  set d=$zobjexport(d(i),18) } set %qrc=0,%ROWCOUNT=1 lock:ul -^User.TowarD(d(1))#"SI" if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,0) do:$g(il) $zu(115,2,il) } QUIT
	Quit
%SQLQuickLogicalToOdbc(%d)
	QUIT
%SQLQuickOdbcToLogical(%d)
	QUIT
%SQLQuickUpdate(%rowid,d,%nolock=0,pkey=0)
	// Update row with SQLRowID=%rowid with values d(icol)
	set:%nolock=2 %nolock=0
	do ..%SQLQuickOdbcToLogical(.d)
	do ..%SQLUpdate(%rowid,$c(0,%nolock=1,0,0,0,0),.d) set %ROWCOUNT='SQLCODE set:SQLCODE=100 SQLCODE=0 set %qrc=SQLCODE kill d QUIT
%SQLReleaseLock(%rowid,s=0,i=0,e="")
	new %d
	set:e="" e=1 set %d(1)=%rowid set s=$e("E",e)_$e("S",s)_$e("D",i)
	lock -^User.TowarD(%d(1))#s
	QUIT
%SQLReleaseTableLock(s=0,i=0)
	set s=$e("S",s)_$e("D",i) lock -^User.TowarD#s QUIT 1
	Quit
%SQLUnlock()
	lock:$a(%l) -^User.TowarD(%d(1))#"E"
	QUIT
%SQLUnlockError(cname)
	set sqlcode=-110 if %oper="DELETE" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler48",,"SQLUser"_"."_"Towar",cname) } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler49",,"SQLUser"_"."_"Towar",cname) } quit
	Quit
%SQLUnlockRef()
	for %itm=2:1:$g(unlockref) {
		if $lg(unlockref(%itm))'="%UnlockId" { lock -@$lg(unlockref(%itm))#$lg(unlockref(%itm),3) }
		else { do $classmethod($lg(unlockref(%itm),2),$lg(unlockref(%itm)),$lg(unlockref(%itm),3),1,1) }
	}
	QUIT
%SQLUpdate(%rowid,%check,%d,%vco,%tstart=1,%mv=0,%polymorphic=0,%soid)
	new %e,bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,icol,omcall,s,sn,sqlcode,subs,t,unlockref set %oper="UPDATE",sqlcode=0,%ROWID=%rowid,$e(%e,1)=$c(0),%l=$c(0,0,0),unlockref=1
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode QUIT  }
	do ..%SQLNormalizeFields()
	if $d(%d(1)),%d(1)'=%rowid { set SQLCODE=-107,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler16",,"ID","SQLUser"_"."_"Towar") QUIT  }
	for icol=2:1:5 { set $e(%e,icol)=$c($d(%d(icol))) }
	set %d(1)=%rowid,%e(1)=%rowid
	if '$a(%check,2) {
		new %ls lock +^User.TowarD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("User.Towar","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"SQLUser"_"."_"Towar",$g(%d(1))) QUIT  }
	}
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORUpdate"
	if $g(%vco)="" { do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) i sqlcode { s SQLCODE=-109 do ..%SQLEExit() QUIT  } for icol=5,4 { set:'$d(%d(icol)) %d(icol)=%e(icol) set:%d(icol)=%e(icol) $e(%e,icol)=$c(0) }} else { do ..%SQLGetOldAll() if sqlcode { set SQLCODE=-109 do ..%SQLEExit() QUIT  } for icol=2,3,4,5 { set:'$d(%d(icol)) %d(icol)=%e(icol) set:%d(icol)=%e(icol) $e(%e,icol)=$c(0) }}
	if %e(5)'="" set sn=$p(%e(5),$e(%e(5)),$l(%e(5),$e(%e(5)))-1) if "Towar"'=sn new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLUpdate",%rowid,%check,.%d,$g(%vco),%tstart,%mv,1) QUIT
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
			if $a(%e,2),$g(%d(2))="" { do ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,3)) }
			if $a(%e,3),$g(%d(3))="" { do ..%SQLnBuild():'$d(%n),..%SQLMissing($lg(%n,4)) }
			quit:sqlcode
			quit:$zu(115,7)  set %msg=""
			if $a(%e,4),$g(%updcas)'="%1",$g(%d(4))'="",'##class(User.PozycjaFaktury).%SQLExists($s($a(%check,2)=1:-1,1:0),.unlockref,%d(4)) { set sqlcode=-122,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler41",,"SQLUser"_"."_"Towar","pozycjaTowaru","POZYCJATOWARU")_"  "_$g(%msg) quit  }
			quit:$a(%check,2)=1  quit:$g(%updcas)'=""
			if ($a(%e,4)),%e(4)'="",'$g(%0CacheLock("User.PozycjaFaktury","E")),'##class(User.PozycjaFaktury).%SQLExists(1,,%e(4)) { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler21",,"SQLUser"_"."_"Towar","pozycjaTowaru","POZYCJATOWARU") quit  }
		} while 0
		if sqlcode { set SQLCODE=sqlcode do ..%SQLEExit() QUIT  }
	}
	if $s($a(%e,2):1,$a(%e,3):1,$a(%e,4):1,1:$a(%e,5)) {
		set ^User.TowarD(%d(1))=$listupdate($g(^User.TowarD(%d(1))),1,$a(%e,5):%d(5),$a(%e,3):%d(3),$a(%e,2):%d(2),$a(%e,4):%d(4))
	}
	if '$a(%check,3) { 
		if $a(%e,4)||$a(%e,5) {	// pozycjaTowaruIndex index map
			if $a(%e,4) { set sn(1)=%e(4) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) k ^User.TowarI("pozycjaTowaruIndex",sn(1),sn(2)) }
			set sn(1)=%d(4) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) set ^User.TowarI("pozycjaTowaruIndex",sn(1),sn(2))=%d(5)
		}
	}
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	do ..%SQLUnlockRef()
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORUpdate	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"Towar",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"Towar") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT  
	Quit
%SQLValidateFields(sqlcode)
	if $g(%d(3))'="",'($$ValidateField3(%d(3))) { set sqlcode=..%SQLInvalid(3+1,%d(3)) } 
	if $g(%d(2))'="",'($select(%d(2)=$c(0)&&$zu(115,13):1,$isvalidnum(%d(2),0,1,10000):1,'$isvalidnum(%d(2)):$$Error^%apiOBJ(7207,%d(2)),%d(2)<1:$$Error^%apiOBJ(7204,%d(2),1),1:$$Error^%apiOBJ(7203,%d(2),10000))) { set sqlcode=..%SQLInvalid(2+1,%d(2)) } 
	QUIT 'sqlcode
ValidateField3(%val) {	Q $s(%val'[","&&(",Apap, Ibuprofen, Krem Nivea, Strzykawka, Bandaz, Gripex,"[(","_$select(%val=$c(0):"",1:%val)_",")):1,1:$$Error^%apiOBJ(7205,%val,",Apap, Ibuprofen, Krem Nivea, Strzykawka, Bandaz, Gripex"))
}
	Quit
%SQLnBuild() public {
	set %n=$lb(,"ID","cena","nazwa","pozycjaTowaru","x__classname")
	QUIT }
%Save(related=1) public {
	Set $ZTrap="%SaveERR"
	New %objTX Set sc=1,traninit=0 If '$data(%objTX2) New %objTX2 Set %objTX2=1
	If +$g(%objtxSTATUS)=0 { Set traninit=1 k %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxOIDUNASSIGNED,%objtxMODIFIED,%objtxVERSION k:'$TLevel %objtxTID,%objtxID i '$zu(115,9) { s %objtxSTATUS=1 } else { TStart  s %objtxSTATUS=2 } }
	If $get(%objTX2(+$this)) Set sc=..%BuildObjectGraph(1) Quit:('sc) sc Set intRef=+$this,objValue=$get(%objTX(1,intRef,1)),sc=..%SerializeObject(.objValue,1) Set:(''sc) %objTX(1,intRef,1)=objValue Quit sc
	Set sc=..%BuildObjectGraph(related+2) If ('sc) ZTrap "SG"
	If '$data(%objTX(2)) s sc=1 GoTo %SaveCOMMIT
	Set %objTX(3)=0,intRef="" For  Set intRef=$order(%objTX(2,intRef)) Quit:intRef=""  If '$data(%objTX(1,intRef,2)) Set %objTX(3,$increment(%objTX(3)))=%objTX(1,intRef) Kill %objTX(2,intRef)
	For ptr=1:1 Quit:ptr>%objTX(3)  Set objRef=%objTX(3,ptr),objValue=$get(%objTX(1,+objRef,1)),sc=objRef.%SerializeObject(.objValue) Do  Set %objTX(1,+objRef,1)=objValue Kill %objTX(1,+objRef,3) Do $system.CLS.SetModified(objRef,0)
	. If ('sc) ZTrap "SG"
	. i $g(%objtxSTATUS)=2 { Set %objtxMODIFIED(+objRef)=$system.CLS.GetModifiedBits(objRef) }
	. Set intSucc="" For  Set intSucc=$order(%objTX(1,+objRef,3,intSucc)) Quit:intSucc=""  Kill %objTX(1,+objRef,3,intSucc),%objTX(1,intSucc,2,+objRef) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$increment(%objTX(3)))=%objTX(1,intSucc) Kill %objTX(2,intSucc)
	Kill %objTX(3) Set %objTX(3)=0 For  Set pserial=0 Do  Quit:'pserial
	. Set intRef="" For  Set intRef=$order(%objTX(2,intRef)) Quit:intRef=""  Set intPred="" For  Set intPred=$order(%objTX(1,intRef,2,intPred)) Quit:intPred=""  If $get(%objTX(1,intPred,6))=1 Set objValue=$get(%objTX(1,intPred,1)),sc=(%objTX(1,intPred)).%SerializeObject(.objValue,1) s:('sc) %objTX(2,intPred,1)=sc If (''sc) Set pserial=1,%objTX(1,intPred,1)=objValue Do
	. . Set intSucc="" For  Set intSucc=$order(%objTX(1,intPred,3,intSucc)) Quit:intSucc=""  Kill %objTX(1,intPred,3,intSucc),%objTX(1,intSucc,2,intPred) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$i(%objTX(3)))=%objTX(1,intSucc) Kill %objTX(2,intSucc)
	. . For ptr=1:1 Quit:ptr>%objTX(3)  Set objSerialize=%objTX(3,ptr),objValue=$get(%objTX(1,+objSerialize,1)),sc=objSerialize.%SerializeObject(.objValue) Do  Set %objTX(1,+objSerialize,1)=objValue Kill %objTX(1,+objSerialize,3) Do $system.CLS.SetModified(objSerialize,0)
	. . . If ('sc) ZTrap "SG"
	. . . i $g(%objtxSTATUS)=2 { Set %objtxMODIFIED(+objSerialize)=$system.CLS.GetModifiedBits(objSerialize) }
	. . . Set intSucc="" For  Set intSucc=$order(%objTX(1,+objSerialize,3,intSucc)) Quit:intSucc=""  Kill %objTX(1,+objSerialize,3,intSucc),%objTX(1,intSucc,2,+objSerialize) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$i(%objTX(3)))=%objTX(1,intSucc) Kill %objTX(2,intSucc)
	. . Kill %objTX(3) Set %objTX(3)=0
	If $data(%objTX(2))>2 {
		Set sc=$$Error^%apiOBJ(5827,$classname())
		set intRef="" for  set intRef=$order(%objTX(2,intRef)) quit:intRef=""  if ('$Get(%objTX(2,intRef,1),1)) set sc=$$EmbedStatus^%apiOBJ(sc,%objTX(2,intRef,1))
	 	ZTrap "SG"
	}
	Set cmd="" For  Set cmd=$order(%objTX(9,cmd)) Quit:cmd=""  Xecute cmd
%SaveCOMMIT	If traninit { i $g(%objtxSTATUS)=1 { k %objtxSTATUS } else { If $Tlevel { TCommit  } k %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxOIDUNASSIGNED,%objtxMODIFIED,%objtxVERSION k:'$TLevel %objtxTID,%objtxID } }
	Do $system.CLS.SetModified(0) Quit sc
%SaveERR	Set $ZTrap="" If $extract($zerror,1,5)'="<ZSG>" Set sc=$$Error^%apiOBJ(5002,$ZE)
	If $get(traninit) { i $g(%objtxSTATUS)=2 { s sc=$select(+sc:$$%TRollBack^%occTransaction(),1:$$AppendStatus^%occSystem(sc,$$%TRollBack^%occTransaction())) k %objtxTID,%objtxID } else { k %objtxSTATUS } }
	Quit sc }
%SaveData(id) public {
	try {
		set id=$listget(i%"%%OID") if id'="" { set insert=0,idassigned=1 } else { set insert=1,idassigned=0 }
		set lock=0,lockok=0,tSharedLock=0
		if 'idassigned { set id=$i(^User.TowarD) Set $zobjoid("User.Towar",id)=$this,.."%%OID"=$lb(id_"","User.Towar") set:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this)="" }
		if (i%pozycjaTowaru'="")&&('##class(User.PozycjaFaktury).%ExistsId(i%pozycjaTowaru)) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5824,"User.Towar.pozycjaTowaru("_$zu(144,1,i%pozycjaTowaru)_")")) }
		set zzc10v1=$s(i%pozycjaTowaru'="":i%pozycjaTowaru,1:-1E14)
		try {
			set tInnerException = ""
			;
			if 'insert {
				if (i%%Concurrency<4)&&(i%%Concurrency) { lock +(^User.TowarD(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lockok=2&&($tlevel) %0CacheLock($classname(),"E")=1 if lockok { set lock=1 } else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if ('$Data(^User.TowarD(id))) {
					set insert=1
					if lock { lock -(^User.TowarD(id)#"E") set (lock,lockok) = 0 }
				}
			}
			if insert {
				if ('lockok&&..%Concurrency&&$tlevel)||(i%%Concurrency=4) {  lock +(^User.TowarD(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:(lockok=2&&(i%%Concurrency'=4)) %0CacheLock($classname(),"E")=1 set:lockok lock=1 if 'lockok { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if i%%Concurrency=3 { lock +(^User.TowarD(id)#"ES") set tSharedLock=1 }
				set ^User.TowarD(id)=$lb("",i%nazwa,i%cena,i%pozycjaTowaru)
				set ^User.TowarI("pozycjaTowaruIndex",zzc10v1,id)=""
			}
			else {
				set zzc31v1=$listget(^User.TowarD(id),4)
				if (i%pozycjaTowaru'=zzc31v1) {
					kill ^User.TowarI("pozycjaTowaruIndex",$s(zzc31v1'="":zzc31v1,1:-1E14),id)
					set ^User.TowarI("pozycjaTowaruIndex",zzc10v1,id)=""
				}
				set ^User.TowarD(id)=$lb("",i%nazwa,i%cena,i%pozycjaTowaru)
			}
			set tStatus = 1
		}
		catch tInnerException {
			if ('idassigned) { Set $zobjoid("",$listget(i%"%%OID"))="" Set $this."%%OID" = "" kill:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this) }
			if (tSharedLock) {  lock -(^User.TowarD(id)#"ES") } elseif (lockok=1)&&(insert)&&(i%%Concurrency=4) {  lock -(^User.TowarD(id)) }
		}
		if lock lock -(^User.TowarD(id)#"E")
		if $Isobject(tInnerException) { throw tInnerException }
	}
	catch tException {
		set tStatus = tException.AsStatus()
	}
	quit tStatus }
%SaveDirect(id="",idList="",data,concurrency=-1) public {
	try {
		set zzc5v1=$listget(data,4)
		set zzc5v2=$listget(data,1)
		if concurrency=-1 { set concurrency=$zu(115,10) }
		if id'="" { set insert=0,idassigned=1 } else { set insert=1,idassigned=0 }
		set lock=0,tSharedLock=0
		if 'idassigned { set id=$i(^User.TowarD) }
		if (zzc5v1'="")&&('##class(User.PozycjaFaktury).%ExistsId(zzc5v1)) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5824,"User.Towar.pozycjaTowaru("_$zu(144,1,zzc5v1)_")")) }
		set zzc10v1=$s(zzc5v1'="":zzc5v1,1:-1E14)
		try {
			set tInnerException = ""
			;
			if 'insert {
				if concurrency { lock +(^User.TowarD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if ('$Data(^User.TowarD(id))) {
					set insert=1
					if lock { lock -(^User.TowarD(id)#"E") set (lock,lockok) = 0 }
				}
			}
			if insert {
				if concurrency { lock +(^User.TowarD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				set ^User.TowarD(id)=data
				set ^User.TowarI("pozycjaTowaruIndex",zzc10v1,id)=zzc5v2
			}
			else {
				set zzc31v1=$li(idList,1)
				set zzc31v2=$listget(^User.TowarD(zzc31v1),4)
				if (zzc5v1'=zzc31v2) {
					kill ^User.TowarI("pozycjaTowaruIndex",$s(zzc31v2'="":zzc31v2,1:-1E14),zzc31v1)
					set ^User.TowarI("pozycjaTowaruIndex",zzc10v1,id)=zzc5v2
				}
				set ^User.TowarD(id)=data
			}
			set tStatus = 1
		}
		catch tInnerException {
		}
		if lock lock -(^User.TowarD(id)#"E")
		if $Isobject(tInnerException) { throw tInnerException }
	}
	catch tException {
		set tStatus = tException.AsStatus()
	}
	quit tStatus }
%SaveIndices(pStartId="",pEndId="",lockExtent=0) public {
	If lockExtent {
		Set sc=..%LockExtent(0)
		Quit:('sc) sc
	}
	s id=$order(^User.TowarD(pStartId),-1),tEndId=$S(pEndId'="":pEndId,1:pStartId)
BSLoop	s id=$O(^User.TowarD(id)) g:(id="")||(id]]tEndId) BSLoopDun
	Set bsv0N1=$Get(^User.TowarD(id))
	Set bsv0N2=$listget(bsv0N1,4)
	Set bsv0N3=$s(bsv0N2'="":bsv0N2,1:-1E14)
	Set ^User.TowarI("pozycjaTowaruIndex",bsv0N3,id)=$listget(bsv0N1,1)
	g BSLoop
BSLoopDun
	If lockExtent { Do ..%UnlockExtent(0) }
	Quit 1
CatchError	Set $ZTrap=""
	If $ZE'="" {
		Set sc = $$Error^%apiOBJ(5002,$ZE)
	}
	If lockExtent { Do ..%UnlockExtent(0) }
	Quit sc }
%SerializeObject(serial,partial=0) public {
	try {
		If $get(%objTX2(+$this)) { Set partial = 1 } ElseIf ('partial) { Set %objTX2(+$this) = 1 }
		Set sc=..%ValidateObject(,0) Throw:('sc) ##class(%Exception.StatusException).ThrowIfInterrupt(sc)
		Set sc=..%NormalizeObject() Throw:('sc) ##class(%Exception.StatusException).ThrowIfInterrupt(sc)
		If r%pozycjaTowaru'="" { Set:'$data(%objTX(1,+r%pozycjaTowaru,1)) %objTX(1,+r%pozycjaTowaru)=r%pozycjaTowaru,%objTX(1,+r%pozycjaTowaru,1)=..pozycjaTowaruGetObject(1),%objTX(1,+r%pozycjaTowaru,6)=1 Set M%pozycjaTowaru=1,i%pozycjaTowaru=$listget(%objTX(1,+r%pozycjaTowaru,1)) }
		s:$g(%objtxSTATUS)=2 %objtxLIST(+$this)=$this
		Set id=$listget(serial),sc=..%SaveData(.id) If ('sc) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt(sc) }
		Set serial=(..%Oid())
		if 'partial {
			Set %objTX2(+$this) = 0
		}
		set sc=1
	}
	catch tException {
		If 'partial { Set %objTX2(+$this) = 0 }
		set sc = tException.AsStatus()
	}
	Quit sc }
%AddToSaveSet(depth=3,refresh=0) public {
	If $data(%objTX(1,+$this)) && ('refresh) Quit 1
	Set sc=1,intOref=+$this
	If refresh Set intPoref="" For  Set intPoref=$order(%objTX(1,intOref,2,intPoref)) Quit:intPoref=""  Kill %objTX(1,intPoref,3,intOref),%objTX(1,intOref,2,intPoref)
	Set serial=..%Oid(),%objTX(1,intOref)=$this,%objTX(1,intOref,1)=serial,%objTX(1,intOref,6)=1 If (serial '= "") && (depth<2) { Quit 1 } Else { Set %objTX(7,intOref)=1 }
	Set Poref=r%%source If Poref'="",'$data(%objTX(1,+Poref)) Set %objTX(6,$i(%objTX(6)))=Poref
	Set Poref=r%pozycjaTowaru If Poref'="" Set:'$data(%objTX(1,+Poref)) %objTX(6,$i(%objTX(6)))=Poref Set %objTX(8,$i(%objTX(8)))=$lb(+Poref,intOref,2)
exit	Quit sc }
%SortBegin(idxlist="",excludeunique=0)
	if $select(idxlist="":1,$listfind(idxlist,"pozycjaTowaruIndex"):1,1:0) If $SortBegin(^User.TowarI("pozycjaTowaruIndex"))
	Quit 1
%SortEnd(idxlist="",commit=1,excludeunique=0) public {
	if $select(idxlist="":1,$listfind(idxlist,"pozycjaTowaruIndex"):1,1:0) If $SortEnd(^User.TowarI("pozycjaTowaruIndex"),commit)
	Quit 1 }
%UnlockExtent(shared=0,immediate=0) public {
	If 'shared {
		If 'immediate {
			Lock -^User.TowarD
			 Quit 1
		}
		Lock -^User.TowarD#"I"
		Quit 1
	}
	If 'immediate {
		Lock -^User.TowarD#"S"
		Quit 1
	}
	Lock -^User.TowarD#"SI"
	Quit 1 }
%UnlockId(id,shared=0,immediate=0) public {
	If 'shared {
		If 'immediate {
			Lock -(^User.TowarD(id)#"E")
			Quit 1
		}
		Lock -(^User.TowarD(id)#"IE")
		Quit 1
	}
	If 'immediate {
		Lock -(^User.TowarD(id)#"SE")
		Quit 1
	}
	Lock -(^User.TowarD(id)#"SIE")
	Quit 1 }
%ValidateIndices(idxList="",autoCorrect=0,lockOption=1,multiProcess=1)
	if '$listvalid(idxList) { QUIT $$Error^%apiOBJ(5591,"##class(User.Towar).%ValidateIndices()","idxList",""""" or a $list of index names") }
	if $case(autoCorrect,1:0,0:0,:1) { QUIT $$Error^%apiOBJ(5591,"##class(User.Towar).%ValidateIndices()","autoCorrect","'0' or '1'") }
	if $case(lockOption,2:0,1:0,0:0,:1) { QUIT $$Error^%apiOBJ(5591,"##class(User.Towar).%ValidateIndices()","lockOption","'0', '1' or '2'") }
	if $case(multiProcess,1:0,0:0,:1) { QUIT $$Error^%apiOBJ(5591,"##class(User.Towar).%ValidateIndices()","multiProcess","'0' or '1'") }
	QUIT $$ValidateIndices^%SYS.SECURITY("User.Towar",idxList,autoCorrect,lockOption,multiProcess)
%ValidateObject(force=0,checkserial=1) public {
	set sc=1
	If '$system.CLS.GetModified() Quit sc
	If m%%id Set iv=..%id If iv'="" Set rc=(..%idIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"%id",iv)
	If m%%seriesCount Set iv=..%seriesCount If iv'="" Set rc=(..%seriesCountIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"%seriesCount",iv)
	Set iv=..cena If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::cena("_$this_",ID="_..%Id()_")"),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%cena Set rc=(..cenaIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"cena",iv)
	Set iv=..nazwa If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::nazwa("_$this_",ID="_..%Id()_")"),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%nazwa Set rc=(..nazwaIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"nazwa",iv)
	Quit sc }
zPopulate(count=10,verbose=0,DeferIndices=1,objects=0,tune=1,deterministic=0)
	New errcnt,i,id,keepobjects,obj,rss1,save,saved
	Set saved=0,keepobjects=0,errcnt=0
	Do $ZU(165,0,$S(deterministic:481516,1:$RANDOM(99999999)))
	If objects Set keepobjects=1,objects=0
	If DeferIndices Do ..%SortBegin("",1)
	s ^CacheTempNodes("gbl",$j,$name(^CacheTempPop($j)))=$lb($h,$username) Kill ^CacheTempPop($j)
	d ##class(%Library.PopulateUtils).BuildReferenceSample("User.PozycjaFaktury",.rss1)
	For i=1:1:count Do  if errcnt>1000 write:verbose !,"over 1,000 errors encountered with no successful save - exiting" quit
	. Set obj=##class(User.Towar).%New()
	. Set obj.%id=""
	. Set obj.%seriesNames=""
	. Set obj.cena=##class(%Library.PopulateUtils).Integer(1,10000)
	. Set obj.nazwa=##class(%Library.PopulateUtils).ValueList(",Apap, Ibuprofen, Krem Nivea, Strzykawka, Bandaz, Gripex")
	. Set id=##class(%Library.PopulateUtils).ArrayElement(.rss1) If id'="",##class(User.PozycjaFaktury).%ExistsId(id) Do obj.pozycjaTowaruSetObjectId(id)
	. If 'keepobjects Do
	. . Set save=obj.%Save()
	. . If (''save) Set saved=saved+1,errcnt=0 If verbose Write !,"Object saved...",saved
	. . If ('save) set errcnt=errcnt+1 if verbose Do DisplayError^%apiOBJ(save)
	. If keepobjects Set objects($Increment(objects))=obj
	. Set obj=""
	k ^CacheTempNodes("gbl",$j,$name(^CacheTempPop($j))) Kill ^CacheTempPop($j)
	If DeferIndices Do ..%SortEnd(,,1)
	If tune Do TuneTable^%apiSQL("SQLUser.Towar",1,verbose,.%msg,1)
	Quit saved
zXMLDTD(top,format,input,dtdlist)
 Quit ##class(%XML.Implementation).XMLDTD("User.Towar",.top,.format,.input,.dtdlist)
zXMLExportInternal()
 New tag,summary,attrsVal,savelocal,aval,k,tmpPrefix,prefixDepth,hasNoContent,hasElement,topAttrs,beginprefix,endprefix,savexsiAttrs,initialxsiAttrs,initlist,initialCR,inlineFlag,popAtEnd,saveTopPrefix,saveTypesPrefix,saveAttrsPrefix,saveUsePrefix,initlist
 Set $ztrap="XMLExportInternalTrap",popAtEnd=0
 Set summary=summaryArg,initialxsiAttrs=xsiAttrs
 If group Quit $$Error^%apiOBJ(6386,"User.Towar")
 If indentFlag Set initialCR=($extract(currentIndent,1,2)=$c(13,10))
 Set id=createId
 Set temp=""
 If id'="" {
   If $piece($get(idlist(+$this)),",",2)'="" Quit 1
   Set idlist(+$this)=id_",1"
 }
 If encoded Set initlist=$lb($get(oreflist),inlineFlagArg),oreflist=1,inlineFlag=inlineFlagArg
 If 'nocycle,('encoded||inlineFlag) {
   If $data(oreflist($this)) Quit $$Error^%apiOBJ(6296,"User.Towar")
   Set oreflist($this)=""
 }
 Set tag=$get(topArg)
 Set tmpi=(($get(typeAttr)'="")&&(typeAttr'="User.Towar"))
 If $IsObject(namespaces) {
     Set popAtEnd=1,saveTopPrefix=topPrefix,saveTypesPrefix=typesPrefix,saveAttrsPrefix=attrsPrefix,saveUsePrefix=usePrefix
     Set sc=namespaces.PushNodeForExport("",$get(local,0),(encoded||tmpi),"",,.topPrefix,.topAttrs,.typesPrefix,.attrsPrefix,.usePrefix)
     If 'sc Quit sc
   Set beginprefix=$select(namespaces.ElementQualified&&usePrefix:typesPrefix,1:"")
   If topAttrs'="" Set temp=temp_" "_topAttrs
   If tag="" Set tag="Towar"
   Set xsitype=namespaces.OutputTypeAttribute
 } Else {
   Set saveTopPrefix=topPrefix,saveTypesPrefix=typesPrefix,saveAttrsPrefix=attrsPrefix,saveUsePrefix=usePrefix
   Set typesPrefix=namespaces If (typesPrefix'=""),($extract(typesPrefix,*)'=":") Set typesPrefix=typesPrefix_":"
   If 'encoded Set namespaces=""
   Set (topPrefix,attrsPrefix,topAttrs,beginprefix)=""
   If tag="" Set tag=typesPrefix_"Towar"
   Set xsitype=0
 }
 Set local=+$get(local),savelocal=local
 Set endprefix="</"_beginprefix,beginprefix="<"_beginprefix
 If tmpi Set temp=temp_" "_xsiPrefix_"type="""_typesPrefix_"Towar"""_xsiAttrs,xsiAttrs=""
   If id'="" Set temp=" "_$select($get(soap12):soapPrefix_"id",1:"id")_"=""id"_id_""""_temp
 If encoded Set temp=temp_xsiAttrs,xsiAttrs=""
 If indentFlag Set %xmlmsg=currentIndent if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg } Set currentIndent=$select(initialCR:"",1:$c(13,10))_currentIndent_indentChars
 If tag[":" Set topPrefix=$piece(tag,":"),tag=$piece(tag,":",2)  If topPrefix'="" Set topPrefix=topPrefix_":"
 Set %xmlmsg="<"_topPrefix_tag_temp if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set attrsVal=attrsArg,attrsArg="" Set %xmlmsg=attrsVal if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set %xmlmsg=">" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..nazwa
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"nazwa"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]]]><![CDATA[>","]]]]]]><![CDATA[><![CDATA[>")_"]]]]><![CDATA[>",1:val))_endprefix_"nazwa>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..cena
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"cena"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"long""",1:"")_">"_val_endprefix_"cena>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 If indentFlag { Set currentIndent=$extract(currentIndent,1,*-$length(indentChars)) Set %xmlmsg=currentIndent if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }}
 Set %xmlmsg="</"_topPrefix_tag_">"
 if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg } If indentFlag,'initialCR if $data(%xmlBlock) { Set %xmlmsg="" Do xeWriteLine^%occXMLInternal } else { write ! } Set $extract(currentIndent,1,2)=""
 If '$IsObject(namespaces) || (popAtEnd=1) Set topPrefix=saveTopPrefix,typesPrefix=saveTypesPrefix,attrsPrefix=saveAttrsPrefix,usePrefix=saveUsePrefix
 If popAtEnd Do namespaces.PopNode()
 If encoded Set oreflist=$list(initlist),inlineFlag=$list(initlist,2)
 If 'encoded||inlineFlag {
   If 'nocycle Kill oreflist($this)
 }
 Quit sc
XMLExportInternalTrap Set $ztrap=""
 If $data(val) , $IsObject(val) , ($piece($ze,">",1)="<METHOD DOES NOT EXIST") {
   Set sc=$$Error^%apiOBJ(6249,$classname(val))
 } Else {
   Set sc=$$Error^%apiOBJ(5002,$ze)
 }
XMLExportExit 
 If '$IsObject(namespaces) || (popAtEnd=1) Set topPrefix=saveTopPrefix,typesPrefix=saveTypesPrefix,attrsPrefix=saveAttrsPrefix,usePrefix=saveUsePrefix
 If popAtEnd Do namespaces.PopNode()
 Quit sc
zXMLGetSchemaImports(imports,classes)
 Quit ##class(%XML.Implementation).XMLGetSchemaImports("User.Towar",.imports,.classes)
zXMLImportAttributes()
 ;
 Quit 1
XMLImportAttrErr Quit $$Error^%apiOBJ(6260,ref,$get(@(tree)@("d",$zlascii(attributeList(ref),13))),@(tree)@("d",$zlascii(nodelist,9))_$$XMLImportAttrLocation(nodelist))
XMLImportFixedAttrErr Quit $$Error^%apiOBJ(6320,ref,$get(@(tree)@("d",$zlascii(attributeList(ref),13))),@(tree)@("d",$zlascii(nodelist,9))_$$XMLImportAttrLocation(nodelist))
XMLImportAttrLocation(nodelist) new msg,loc
 Set loc=$lb($zlascii(nodelist,21),$zlascii(nodelist,25))
 If loc="" Quit ""
 Set msg=$get(^%qCacheMsg("%ObjectErrors",$s(""'="":$zcvt("","L"),1:$s($mvv(58)="":"en",1:$mvv(58))),"XMLImportLocation")," (%1,%2)")
 Quit $$FormatText^%occMessages(msg,$listget(loc,1),$listget(loc,2))
zXMLImportInternal()
 New child,childlist,node,nodelist,inner,innerlist,data,encodedArray,key,nsIndex,savechild,savechildlist,saveinner,saveinnnerlist,exists
 Set $ztrap="XMLImportInternalTrap"
 Set encoded=$case($piece(fmt,",",1),"":0,"literal":0,"encoded":1,"encoded12":1,:"")
 If encoded="" Quit $$Error^%apiOBJ(6231,fmt)
 Set nsIndex=$select($get(namespace)="":"",1:$get(@(tree)@("N",namespace)))
 Set node=nodeArg,nodelist=nodeArgChildlist
 If tag'=@(tree)@("d",$zlascii(nodelist,9)) Set inner=node Goto XMLImportMalformed
 If bareProjection Quit $$Error^%apiOBJ(6386,"User.Towar")
 If encoded {
   Do XMLImportAttrnode() If $data(attributeList("id")) Set idlist(node)=$this
 }
 If $zboolean(+($zlascii(nodelist,13)#16),+1,1) Quit 1
 Set sc=$$XMLImportElements()
 If $get(checkRequired),(''sc) { Set nodelist=""
   If '$data(exists("cena")) Set nodelist=nodelist_"cena, "
   If '$data(exists("nazwa")) Set nodelist=nodelist_"nazwa, "
   If nodelist'="" Set sc=$$Error^%apiOBJ(6318,$extract(nodelist,1,*-2))
 }
XMLImportExit Quit sc
XMLImportElements() ;
XMLLOOP1 Set descriptor=$zlascii(nodelist,$zwascii(nodelist,17)) Set child=($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)_","_$zwascii(nodelist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else { Set child="" }} For { Quit:child=""  Quit:(descriptor#16)'=2  Set descriptor=$piece(child,",",2)+4 Set child=$piece(child,",",1)_","_descriptor Set descriptor=$zlascii(nodelist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else {Set child="" }} } Goto XMLLOOP2
XMLLOOP For  { Set descriptor=$piece(child,",",2)+4 Set child=$piece(child,",",1)_","_descriptor Set descriptor=$zlascii(nodelist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else {Set child="" }} Quit:child=""  Quit:(descriptor#16)'=2  }
XMLLOOP2 If child="" Quit sc
 If (descriptor#16)'=0 Set inner=child Goto XMLImportMalformedNoTag
 Set childlist=@(tree)@((descriptor\16))
 Set tag=@(tree)@("d",$zlascii(childlist,9))
 If tag="nazwa" {
   If ($get(namespace)'=""),'$case($zwascii(childlist,19),0:1,nsIndex:1,:0) Goto XMLImportNSchild
   Set exists("nazwa")=1
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(data'[","&&(",Apap, Ibuprofen, Krem Nivea, Strzykawka, Bandaz, Gripex,"[(","_$select(data=$c(0):"",1:data)_",")):1,1:$$Error^%apiOBJ(7205,data,",Apap, Ibuprofen, Krem Nivea, Strzykawka, Bandaz, Gripex"))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..nazwa=data
   Goto XMLLOOP }
 If tag="cena" {
   If ($get(namespace)'=""),'$case($zwascii(childlist,19),0:1,nsIndex:1,:0) Goto XMLImportNSchild
   Set exists("cena")=1
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             Set data=$zstrip(data,"<>W",$c(13,10)) If data'="" Set data=$s($tr(data,"Ee(),.")'=data:"",1:$number(data,"I",1,10000)) Goto:data="" XMLImportErrchild Goto:('$select(data=$c(0)&&$zu(115,13):1,$isvalidnum(data,0,1,10000):1,'$isvalidnum(data):$$Error^%apiOBJ(7207,data),data<1:$$Error^%apiOBJ(7204,data,1),1:$$Error^%apiOBJ(7203,data,10000))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..cena=data
   Goto XMLLOOP }
 Goto XMLImportBadTagchild
XMLImportBadTagchild Set inner=child
XMLImportBadTag Quit $$Error^%apiOBJ(6237,tag_$$XMLImportLocation(inner))
XMLImportBadTypenode Set inner=node Goto XMLImportBadType
XMLImportBadTypechild Set inner=child
XMLImportBadType Quit $$Error^%apiOBJ(6277,class,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)))_$$XMLImportLocation(inner))
XMLImportErrnode Set inner=node Goto XMLImportErr
XMLImportErrchild Set inner=child
XMLImportErr
 Set data=##class(%XML.ImportHandler).GetNextChild(tree,inner,"")
 If (data'="") {
   If ($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))#16)'=0 {
     Quit $$Error^%apiOBJ(6232,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner),$extract(@(tree)@("d",($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))\16)),1,200))
   } Else {
     Quit $$Error^%apiOBJ(6253,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner),@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))\16)),9)))
   }
 } Else {
   Quit $$Error^%apiOBJ(6252,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner))
 }
XMLImportIdErr Set sc=$$Error^%apiOBJ(6236,id,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner)) Quit sc
XMLImportMalformed Set sc=$$Error^%apiOBJ(6233,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)))_$$XMLImportLocation(inner)) Quit sc
XMLImportMalformedNoTag Set node=$select($piece(inner,",",1)<=0:0,1:$zlascii(@(tree)@($piece(inner,",",1)),1)_","_$zlascii(@(tree)@($piece(inner,",",1)),5)),sc=$$Error^%apiOBJ(6254,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16))),$select(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)))_$$XMLImportLocation(node)) Quit sc
XMLImportNSchild Set inner=child
XMLImportNS Set sc=$$Error^%apiOBJ(6235,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner)) Quit sc
XMLImportLocation(node) new msg,loc
 Set loc=$lb($zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),21),$zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),25))
 If loc="" Quit ""
 Set msg=$get(^%qCacheMsg("%ObjectErrors",$s(""'="":$zcvt("","L"),1:$s($mvv(58)="":"en",1:$mvv(58))),"XMLImportLocation")," (%1,%2)")
 Quit $$FormatText^%occMessages(msg,$listget(loc,1),$listget(loc,2))
XMLImportInternalTrap Set $ztrap=""
 Set loc=$select($ZE["<CLASS DOES NOT EXIST>":" for element "_tag_$$XMLImportLocation(child),1:"")
 Quit $$Error^%apiOBJ(5002,$ZE_loc)
XMLImportIdChild() Set inner=child,innerlist=childlist,tmp=$$XMLImportId(),child=inner,childlist=innerlist Quit tmp
XMLImportId() ;
 Do XMLImportAttrinner()
 If $data(attributeList("href")) {
   Set id=$get(@(tree)@("d",$zlascii(attributeList("href"),13)))
   If $extract(id)="#" {
     Set tmp=$select($get(@(tree)@("i",$extract(id,2,*)))="":"",1:$piece(@(tree)@("i",$extract(id,2,*)),",",1)_","_$piece(@(tree)@("i",$extract(id,2,*)),",",2)) If tmp="" Goto XMLImportIdErr
     Set inner=tmp
     Set descriptor=$zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2)) Set innerlist=@(tree)@((descriptor\16))
   }
 } ElseIf $data(attributeList("ref")),($get(@(tree)@("n",$zwascii(attributeList("ref"),9)))="http://www.w3.org/2003/05/soap-encoding") {
   Set id=$get(@(tree)@("d",$zlascii(attributeList("ref"),13)))
   Set tmp=$select($get(@(tree)@("i",id))="":"",1:$piece(@(tree)@("i",id),",",1)_","_$piece(@(tree)@("i",id),",",2)) If tmp="" Goto XMLImportIdErr
   Set inner=tmp
   Set descriptor=$zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2)) Set innerlist=@(tree)@((descriptor\16))
 } ElseIf '$data(attributeList("id")) {
   Quit 0
 }
 Quit $data(idlist(inner))
XMLImportAttrnode()
 If $get(attributeList)=node Quit
 Kill attributeList
 Set attributeList=node
 Set offset=29 While offset<$zwascii(nodelist,17) { Set attribute=$extract(nodelist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
XMLImportAttrchild()
 If $get(attributeList)=child Quit
 Kill attributeList
 Set attributeList=child
 Set offset=29 While offset<$zwascii(childlist,17) { Set attribute=$extract(childlist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
XMLImportAttrinner()
 If $get(attributeList)=inner Quit
 Kill attributeList
 Set attributeList=inner
 Set offset=29 While offset<$zwascii(innerlist,17) { Set attribute=$extract(innerlist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
zXMLIsObjectEmpty(ignoreNull)
 If ..nazwa'="" Quit 0
 If ..cena'="" Quit 0
 Quit 1
zXMLNew(document,node,containerOref="")
	Quit (##class(User.Towar).%New())
zXMLSchema(top="",format="",namespacePrefix="",input=0,refOnly=0,schema)
 Quit ##class(%XML.Implementation).XMLSchema("User.Towar",top,format,namespacePrefix,input,refOnly,.schema)
zcenaDisplayToLogical(%val) public {
	Q $select(%val="":"",%val=$c(0)&&$zu(115,13):"",1:$s($in(%val,"","")'="":+$in(%val,"",%val),1:%val)) }
zcenaGetStored(id) public {
	Quit $Select(id'="":$listget($g(^User.TowarD(id)),3),1:"") }
zcenaIsValid(%val) public {
	Quit $select(%val=$c(0)&&$zu(115,13):1,$isvalidnum(%val,0,1,10000):1,'$isvalidnum(%val):$$Error^%apiOBJ(7207,%val),%val<1:$$Error^%apiOBJ(7204,%val,1),1:$$Error^%apiOBJ(7203,%val,10000)) }
zcenaNormalize(%val) public {
	Quit $select(%val=$c(0)&&$zu(115,13):"",1:%val\1) }
zcenaXSDToLogical(%val) public {
	Q $s($tr(%val,"Ee(),.")'=%val:"",1:$number(%val,"I",1,10000)) }
znazwaGetStored(id) public {
	Quit $Select(id'="":$listget($g(^User.TowarD(id)),2),1:"") }
znazwaIsValid(%val) public {
	Q $s(%val'[","&&(",Apap, Ibuprofen, Krem Nivea, Strzykawka, Bandaz, Gripex,"[(","_$select(%val=$c(0):"",1:%val)_",")):1,1:$$Error^%apiOBJ(7205,%val,",Apap, Ibuprofen, Krem Nivea, Strzykawka, Bandaz, Gripex")) }
zpozycjaTowaruGetObject(force=0) public {
	Quit $select(r%pozycjaTowaru=""||(i%pozycjaTowaru'=""):$select(i%pozycjaTowaru="":"",1:$listbuild(i%pozycjaTowaru_"")),(''..pozycjaTowaru.%GetSwizzleObject(force,.oid)):oid,1:"") }
zpozycjaTowaruGetObjectId(force=0) public {
	Quit $listget(..pozycjaTowaruGetObject(force)) }
zpozycjaTowaruGetStored(id) public {
	Quit $Select(id'="":$listget($g(^User.TowarD(id)),4),1:"") }
zpozycjaTowaruGetSwizzled(noswizzle=0) public {
	If r%pozycjaTowaru'="" Quit r%pozycjaTowaru
	If i%pozycjaTowaru="" Quit ""
	Set oid=$select(i%pozycjaTowaru="":"",1:$listbuild(i%pozycjaTowaru_""))
	Set oref=##class("User.PozycjaFaktury").%Open(oid,,.sc) If ('sc)||(oref="") Do:$get(^%SYS("ThrowSwizzleError"),0) $zutil(96,3,19,1) Quit ""
	Set modstate=$system.CLS.GetModifiedBits() Set r%pozycjaTowaru=oref Do $system.CLS.SetModifiedBits(modstate)
	Do oref.towarNaPozycjiRelate($this)
	Quit oref }
zpozycjaTowaruNewObject() public {
	Set newobject=##class("User.PozycjaFaktury").%New() If newobject="" Quit ""
	Set ..pozycjaTowaru=newobject
	Do ..pozycjaTowaru.towarNaPozycjiRelate($this)
	Quit newobject }
zpozycjaTowaruOnDelete(id="",concurrency=-1) [ id,SQLCODE ] public { New %msg,%ROWCOUNT,%ROWID,SQLCODE 
	 ;---&sql(select %ID into :id from SQLUser.Towar where pozycjaTowaru = :id)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, id, SQLCODE
	do %0Fo
	Quit $Select(SQLCODE:1,1:$$Error^%apiOBJ(5823,$classname()_"."_"pozycjaTowaru")) }
 q
%0Fo n sqldata8d,sqldata9d,sqldata10d,sqldata12d,sqldata16d,sqldata17d,sqldata4d,sqldata3d,sqldata6d,sqldata7d
 s $zt="%0Ferr"
 n %sqltime s %sqltime=$zh
 s sqldata8d=$zu(115,2)
 s sqldata9d=0,sqldata10d=""
 d:$zu(115,15) $system.ECP.Sync()
 s sqldata4d=$g(id),sqldata4d=$s(sqldata4d="":"",$isvalidnum(sqldata4d):+sqldata4d,1:sqldata4d)
 s SQLCODE=100
 ; asl MOD# 2
 s id=""
%0FmBk1 s sqldata12d="" s id=$o(^User.TowarD(id),1,sqldata12d)
 i id="" g %0FmBdun
 Set sqldata3d=$lg(sqldata12d,4)
 g:'(sqldata3d=sqldata4d) %0FmBk1
 g:'(sqldata3d'="") %0FmBk1
 goto:sqldata8d'=1 %0FmBuncommitted
 if sqldata8d=1 {
 	lock +^User.TowarD($p(id,"||",1))#"S":$zu(115,4)
 	if $t { set sqldata10d=$name(^User.TowarD($p(id,"||",1)))_"#""SI""",sqldata9d=1 }
 	else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.Towar for RowID value: "_id ztrap "LOCK"  }
 }
 ; asl MOD# 3
 s sqldata6d=$zlist(sqldata3d)
 i id'="" s sqldata16d="" i $d(^User.TowarD(id),sqldata16d)
 e  g %0FmCdun
 Set sqldata3d=$lg(sqldata16d,4)
 s sqldata7d=$zlist(sqldata3d)
 g:sqldata6d'=sqldata7d %0FmCdun
%0FmBuncommitted ;
 s SQLCODE=0 g %0Fc
%0FmCdun if $g(sqldata8d)=1 { if $g(sqldata9d)=1 { l -@sqldata10d s sqldata9d=0 } elseif $g(sqldata9d)=2 { do $classmethod($li(sqldata10d),"%UnlockId",$li(sqldata10d,2),1,1)  s sqldata9d=0 } }
 g %0FmBk1
%0FmBdun 
%0FmAdun 
%0Fc s %ROWCOUNT='SQLCODE
 if $g(sqldata8d)=1 { if $g(sqldata9d)=1 { l -@sqldata10d } elseif $g(sqldata9d)=2 { do $classmethod($li(sqldata10d),"%UnlockId",$li(sqldata10d,2),1,1)  } }
 s:$d(%sqltime) sqldata17d=$g(sqldata17d)+$zh-%sqltime
 n context,tmp,count,total,mean s context=$system.Context.SQL()
 if $d(sqldata17d,%sqltime) {
 if $g(context.Stats)<$zu(99) { d AggregateStats^%SYS.SQLSRV() }
 s tmp=$g(context.Stats($namespace,"l+RRQj0tJN/3OruZemehMVLSUW0="))
 s count=$lg(tmp,1),total=$lg(tmp,2),mean=total+%sqltime/(count+1)
 s context.Stats($namespace,"l+RRQj0tJN/3OruZemehMVLSUW0=")=$lb(count+1,total+%sqltime,$s(+count=0:0,1:(%sqltime-mean)**2+(count*((total/count-mean)**2+$lg(tmp,3)))/(count+1))) }
 q
%0Ferr s $zt=""
 d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 g %0Fc
zpozycjaTowaruRExec(%qHandle,inverse) [ c1,inverse,SQLCODE ] public { New %msg,%ROWCOUNT,%ROWID,c1,SQLCODE 
	Set %qHandle=$increment(%objcn)
	 ;---&sql(DECLARE Q2 CURSOR FOR
 	 ;---		SELECT ID FROM SQLUser.Towar where pozycjaTowaru=:inverse)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, inverse, SQLCODE
	
	 ;---&sql(OPEN Q2)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE
	do %Q20o
	If SQLCODE Quit $$Error^%apiOBJ(5821,"SQLCODE = "_SQLCODE)
	Quit 1 }
zpozycjaTowaruRClose(%qHandle) [ c1,inverse,SQLCODE ] public { New %msg,%ROWCOUNT,%ROWID,c1,inverse,SQLCODE 
	New SQLCODE
	 ;---&sql(CLOSE Q2)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE
	do %Q20c
	Kill %objcsc(%qHandle),%objcsp(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsl(%qHandle),%objcsR(%qHandle),%objcsZ(%qHandle),%objcsd(%qHandle)
	Quit 1 }
zpozycjaTowaruRFetch(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) [ c1,inverse,SQLCODE ] public { New %msg,%ROWCOUNT,%ROWID,c1,inverse,SQLCODE 
	Set RowSet="",ReturnCount=0,AtEnd=0
	For {
		 ;---&sql(FETCH Q2 INTO :c1)
 		 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, c1, SQLCODE
		do %0Lo
		If 'SQLCODE { Set RowSet=RowSet_$lb(c1),ReturnCount=ReturnCount+1 Quit:ReturnCount=FetchCount||(($length(RowSet)+($length(RowSet)\ReturnCount))>24000) } Else { Set AtEnd=1 Quit }
	}
	Quit 1 }
 q
%Q20o 
 try { s SQLCODE=$s($g(%objcsc(%qHandle)):-101,1:0) q:SQLCODE'=0 
 n %sqltime s %sqltime=$zh
 s %objcsd(%qHandle,1)=0 s:$d(%0CacheRowLimit)#2 %objcsd(%qHandle,2)=%0CacheRowLimit
 s %objcsd(%qHandle,3)=$zu(115,2)
 s %objcsd(%qHandle,4)=0,%objcsd(%qHandle,5)=""
 d:$zu(115,15) $system.ECP.Sync()
 s %objcsd(%qHandle,6)=$g(inverse),%objcsd(%qHandle,6)=$s(%objcsd(%qHandle,6)="":"",$isvalidnum(%objcsd(%qHandle,6)):+%objcsd(%qHandle,6),1:%objcsd(%qHandle,6))
 s %objcsc(%qHandle)=1,SQLCODE=0
 s:$d(%sqltime) %objcsd(%qHandle,7)=$g(%objcsd(%qHandle,7))+$zh-%sqltime
 } catch { d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %objcsd(%qHandle),%objcsc(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsp(%qHandle) }
 q
%0Hfirst 
 ; asl MOD# 2
 s %objcsd(%qHandle,8)=""
%0HmBk1 s %objcsd(%qHandle,9)="" s %objcsd(%qHandle,8)=$o(^User.TowarD(%objcsd(%qHandle,8)),1,%objcsd(%qHandle,9))
 i %objcsd(%qHandle,8)="" g %0HmBdun
 Set %objcsd(%qHandle,10)=$lg(%objcsd(%qHandle,9),4)
 g:'(%objcsd(%qHandle,10)=%objcsd(%qHandle,6)) %0HmBk1
 g:'(%objcsd(%qHandle,10)'="") %0HmBk1
 goto:%objcsd(%qHandle,3)'=1 %0HmBuncommitted
 if %objcsd(%qHandle,3)=1 {
 	lock +^User.TowarD($p(%objcsd(%qHandle,8),"||",1))#"S":$zu(115,4)
 	if $t { set %objcsd(%qHandle,5)=$name(^User.TowarD($p(%objcsd(%qHandle,8),"||",1)))_"#""SI""",%objcsd(%qHandle,4)=1 }
 	else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.Towar for RowID value: "_%objcsd(%qHandle,8) ztrap "LOCK"  }
 }
 ; asl MOD# 3
 s %objcsd(%qHandle,11)=$zlist(%objcsd(%qHandle,10))
 i %objcsd(%qHandle,8)'="" s %objcsd(%qHandle,12)="" i $d(^User.TowarD(%objcsd(%qHandle,8)),%objcsd(%qHandle,12))
 e  g %0HmCdun
 Set %objcsd(%qHandle,10)=$lg(%objcsd(%qHandle,12),4)
 s %objcsd(%qHandle,13)=$zlist(%objcsd(%qHandle,10))
 g:%objcsd(%qHandle,11)'=%objcsd(%qHandle,13) %0HmCdun
%0HmBuncommitted ;
 s:$g(SQLCODE)'<0 SQLCODE=0 s %ROWCOUNT=$i(%objcsd(%qHandle,1)),%ROWID=%objcsd(%qHandle,8),%objcsc(%qHandle)=10
 //-- FETCH Output
 s:$d(%sqltime) %objcsd(%qHandle,7)=$g(%objcsd(%qHandle,7))+$zh-%sqltime
 quit
%Q20f //-- FETCH tag
 i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  } i %objcsc(%qHandle)=100 { s SQLCODE=100 q  } s SQLCODE=0
 i $d(%objcsd(%qHandle,2))#2,$g(%objcsd(%qHandle,1))'<%objcsd(%qHandle,2) { s SQLCODE=100,%ROWCOUNT=%objcsd(%qHandle,1),%objcsc(%qHandle)=100 q }
 n %sqltime s %sqltime=$zh
 g %0Hfirst:%objcsc(%qHandle)=1
%0HmCdun if $g(%objcsd(%qHandle,3))=1 { if $g(%objcsd(%qHandle,4))=1 { l -@%objcsd(%qHandle,5) s %objcsd(%qHandle,4)=0 } elseif $g(%objcsd(%qHandle,4))=2 { do $classmethod($li(%objcsd(%qHandle,5)),"%UnlockId",$li(%objcsd(%qHandle,5),2),1,1)  s %objcsd(%qHandle,4)=0 } }
 g %0HmBk1
%0HmBdun 
%0HmAdun 
 s %ROWCOUNT=%objcsd(%qHandle,1),SQLCODE=100,%objcsc(%qHandle)=100
 s:$d(%sqltime) %objcsd(%qHandle,7)=$g(%objcsd(%qHandle,7))+$zh-%sqltime
 //-- no [more] data
 quit
%Q20c i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  }
 n %sqltime s %sqltime=$zh
 s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%objcsd(%qHandle,1)),1:0)
 if $g(%objcsd(%qHandle,3))=1 { if $g(%objcsd(%qHandle,4))=1 { l -@%objcsd(%qHandle,5) } elseif $g(%objcsd(%qHandle,4))=2 { do $classmethod($li(%objcsd(%qHandle,5)),"%UnlockId",$li(%objcsd(%qHandle,5),2),1,1)  } }
 s:$d(%sqltime) %objcsd(%qHandle,7)=$g(%objcsd(%qHandle,7))+$zh-%sqltime
 n context,tmp,count,total,mean s context=$system.Context.SQL()
 if $d(%objcsd(%qHandle,7),%sqltime) {
 if $g(context.Stats)<$zu(99) { d AggregateStats^%SYS.SQLSRV() }
 s tmp=$g(context.Stats($namespace,"Zy1HQ4JtwdKc4H1Im4gpjKVFIWs="))
 s count=$lg(tmp,1),total=$lg(tmp,2),mean=total+%sqltime/(count+1)
 s context.Stats($namespace,"Zy1HQ4JtwdKc4H1Im4gpjKVFIWs=")=$lb(count+1,total+%sqltime,$s(+count=0:0,1:(%sqltime-mean)**2+(count*((total/count-mean)**2+$lg(tmp,3)))/(count+1))) }
 k %objcsd(%qHandle),%objcsc(%qHandle)
 s SQLCODE=0
 quit  // close
%0Herr d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 s %objcsc(%qHandle)=100
 quit  // error
%0Lo try { do %Q20f q:SQLCODE'=0
 s c1=%objcsd(%qHandle,8)
 } catch { do %0Herr }
 q
zpozycjaTowaruRelate(oref) public {
	If r%pozycjaTowaru=oref Quit 1
	If i%pozycjaTowaru'="",$listget(oref."%%OID")=i%pozycjaTowaru Set modstate=$system.CLS.GetModifiedBits() Set r%pozycjaTowaru=oref Do $system.CLS.SetModifiedBits(modstate) Quit 1
	If r%pozycjaTowaru'="" Do ..pozycjaTowaruUnRelate(r%pozycjaTowaru)
	Set tmp=i%pozycjaTowaru Kill i%pozycjaTowaru,r%pozycjaTowaru Set r%pozycjaTowaru=oref,i%pozycjaTowaru=tmp
	Quit 1 }
zpozycjaTowaruSet(newvalue) public {
	If newvalue="" {
		If r%pozycjaTowaru="",i%pozycjaTowaru="" Quit 1
	} Else {
		If '$isobject(newvalue) Quit $$Error^%apiOBJ(5807,newvalue)
		If r%pozycjaTowaru=newvalue Quit 1
		If r%pozycjaTowaru="",i%pozycjaTowaru'="",i%pozycjaTowaru=$listget(newvalue."%%OID") Set modstate=$system.CLS.GetModifiedBits() Set r%pozycjaTowaru=newvalue Do newvalue.towarNaPozycjiRelate($this),$system.CLS.SetModifiedBits(modstate) Quit 1
	}
	If r%pozycjaTowaru'="" Do r%pozycjaTowaru.towarNaPozycjiUnRelate($this)
	Set r%pozycjaTowaru=newvalue,i%pozycjaTowaru=0,i%pozycjaTowaru=""
	If newvalue'="" Do newvalue.towarNaPozycjiRelate($this)
	Quit 1 }
zpozycjaTowaruSetObject(newvalue) public {
	If r%pozycjaTowaru="" Set i%pozycjaTowaru=$listget(newvalue) Quit 1
	If newvalue'="",i%pozycjaTowaru=$listget(newvalue) Quit 1
	Set sc=..pozycjaTowaru.%GetSwizzleObject(0,.oid) Quit:('sc) sc
	If newvalue'="",$listget(oid)=$listget(newvalue) Quit 1
	Do ..pozycjaTowaru.towarNaPozycjiUnRelate($this) Set r%pozycjaTowaru="",i%pozycjaTowaru=0,i%pozycjaTowaru=$listget(newvalue) Quit 1 }
zpozycjaTowaruSetObjectId(newid) public {
	Quit ..pozycjaTowaruSetObject($select(newid="":"",1:$listbuild(newid_""))) }
zpozycjaTowaruUnRelate(oref) public {
	If r%pozycjaTowaru=oref Set r%pozycjaTowaru="",i%pozycjaTowaru=0,i%pozycjaTowaru="" Quit 1
	If r%pozycjaTowaru'="" Quit $$Error^%apiOBJ(5499)
	Set i%pozycjaTowaru=0,i%pozycjaTowaru=""
	Quit 1 }
zpozycjaTowaruUnSwizzle(force=0) public {
 Quit:r%pozycjaTowaru="" 1
	Set sc=..pozycjaTowaru.%GetSwizzleObject(force,.newvalue) Quit:('sc) sc
	Set modstate=$system.CLS.GetModifiedBits() Set r%pozycjaTowaru="" Do $system.CLS.SetModifiedBits(modstate)
 Set i%pozycjaTowaru=$listget(newvalue)
 Quit 1 }
zExtentExecute(%qHandle) [ c1,SQLCODE ] public { New %msg,%ROWCOUNT,%ROWID,c1,SQLCODE 
	Set sc=1
	s %qHandle=$i(%objcn)
	 ;---&sql(DECLARE QExtent CURSOR FOR
 	 ;---		 SELECT ID FROM SQLUser.Towar)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE
	
	 ;---&sql(OPEN QExtent)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE
	do %QExtent0o
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5821,"SQLCODE = "_SQLCODE) } Else { Set sc=1 }
	Quit sc }
zExtentClose(%qHandle) [ c1,SQLCODE ] public { New %msg,%ROWCOUNT,%ROWID,c1,SQLCODE 
	 ;---&sql(CLOSE QExtent)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE
	do %QExtent0c
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) } Else { Set sc=1 }
	Kill %objcsc(%qHandle),%objcsp(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsl(%qHandle),%objcsR(%qHandle),%objcsZ(%qHandle),%objcsd(%qHandle)
	Quit sc }
zExtentFetch(%qHandle,Row,AtEnd=0) [ c1,SQLCODE ] public { New %msg,%ROWCOUNT,%ROWID,c1,SQLCODE 
	Set Row="",AtEnd=0
	 ;---&sql(FETCH QExtent INTO :c1)
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, c1, SQLCODE
	do %0Qo
	If 'SQLCODE { Set Row=$lb(c1) Set sc=1 }
	ElseIf SQLCODE=100 { Set AtEnd=1,sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) }
	Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set AtEnd=1,sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	QUIT sc }
zExtentFetchRows(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) [ c1,SQLCODE ] public { New %msg,%ROWCOUNT,%ROWID,c1,SQLCODE 
	Set RowSet="",ReturnCount=0,AtEnd=0
	For {
		 ;---&sql(FETCH QExtent INTO :c1)
 		 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, c1, SQLCODE
		do %0Ro
		If 'SQLCODE { Set RowSet=RowSet_$lb(c1),ReturnCount=ReturnCount+1 Quit:(ReturnCount=FetchCount)||(($l(RowSet)+($l(RowSet)\ReturnCount))>24000) } Else { Set AtEnd=1 Quit }
	}
	If 'SQLCODE { Set sc=1 } ElseIf SQLCODE=100 { Set sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) } Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	Quit sc }
zExtentSendODBC(%qHandle,array,qacn,%qrc,piece,ColumnCount) [ c1,SQLCODE ] public { New %msg,%ROWCOUNT,%ROWID,c1,SQLCODE 
	set %qrc=0,piece=0
	for {
		set rc=..ExtentFetch(.%qHandle,.row,.atend)
		if ('rc) { set %qrc=-400 set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=-400,%sqlcontext.Message=$g(%msg) do ProcessError^%ourProcedure(rc,$get(%sqlcontext),.%qrc,.%msg),Logerr^%SYS.SQLSRV(%qrc,"","SP",.%msg) RETURN  }
		if row="" { set %qrc=100 set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=100 RETURN  }
		if $g(%protocol)>50 { RETURN:$zobjexport(row,60) }
		else {
			if %protocol>46 { for piece=1:1:ColumnCount { goto:$zobjexport($lg(row,piece),50) SPDone } }
			else { for piece=1:1:ColumnCount { goto:$zobjexport($lg(row,piece),7) SPDone } }
		}
	}
	QUIT
SPDone	set:%protocol>46 piece=piece+1
	kill array(qacn)
	for i=piece:1:ColumnCount { set array(qacn,i)=$lg(row,i) }
	QUIT }
 q
%QExtent0o 
 try { s SQLCODE=$s($g(%objcsc(%qHandle)):-101,1:0) q:SQLCODE'=0 
 n %sqltime s %sqltime=$zh
 s %objcsd(%qHandle,1)=0 s:$d(%0CacheRowLimit)#2 %objcsd(%qHandle,2)=%0CacheRowLimit
 s %objcsd(%qHandle,3)=$zu(115,2)
 s %objcsd(%qHandle,4)=0,%objcsd(%qHandle,5)=""
 d:$zu(115,15) $system.ECP.Sync()
 s %objcsc(%qHandle)=1,SQLCODE=0
 s:$d(%sqltime) %objcsd(%qHandle,6)=$g(%objcsd(%qHandle,6))+$zh-%sqltime
 } catch { d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %objcsd(%qHandle),%objcsc(%qHandle),%objcss(%qHandle),%objcst(%qHandle),%objcsp(%qHandle) }
 q
%0Mfirst 
 ; asl MOD# 2
 s %objcsd(%qHandle,7)=""
%0MmBk1 s %objcsd(%qHandle,7)=$o(^User.TowarD(%objcsd(%qHandle,7)))
 i %objcsd(%qHandle,7)="" g %0MmBdun
 goto:%objcsd(%qHandle,3)'=1 %0MmBuncommitted
 if %objcsd(%qHandle,3)=1 {
 	lock +^User.TowarD($p(%objcsd(%qHandle,7),"||",1))#"S":$zu(115,4)
 	if $t { set %objcsd(%qHandle,5)=$name(^User.TowarD($p(%objcsd(%qHandle,7),"||",1)))_"#""SI""",%objcsd(%qHandle,4)=1 }
 	else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.Towar for RowID value: "_%objcsd(%qHandle,7) ztrap "LOCK"  }
 }
 ; asl MOD# 3
 i %objcsd(%qHandle,7)'="",$d(^User.TowarD(%objcsd(%qHandle,7)))
 e  g %0MmCdun
%0MmBuncommitted ;
 s:$g(SQLCODE)'<0 SQLCODE=0 s %ROWCOUNT=$i(%objcsd(%qHandle,1)),%ROWID=%objcsd(%qHandle,7),%objcsc(%qHandle)=10
 //-- FETCH Output
 s:$d(%sqltime) %objcsd(%qHandle,6)=$g(%objcsd(%qHandle,6))+$zh-%sqltime
 quit
%QExtent0f //-- FETCH tag
 i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  } i %objcsc(%qHandle)=100 { s SQLCODE=100 q  } s SQLCODE=0
 i $d(%objcsd(%qHandle,2))#2,$g(%objcsd(%qHandle,1))'<%objcsd(%qHandle,2) { s SQLCODE=100,%ROWCOUNT=%objcsd(%qHandle,1),%objcsc(%qHandle)=100 q }
 n %sqltime s %sqltime=$zh
 g %0Mfirst:%objcsc(%qHandle)=1
%0MmCdun if $g(%objcsd(%qHandle,3))=1 { if $g(%objcsd(%qHandle,4))=1 { l -@%objcsd(%qHandle,5) s %objcsd(%qHandle,4)=0 } elseif $g(%objcsd(%qHandle,4))=2 { do $classmethod($li(%objcsd(%qHandle,5)),"%UnlockId",$li(%objcsd(%qHandle,5),2),1,1)  s %objcsd(%qHandle,4)=0 } }
 g %0MmBk1
%0MmBdun 
%0MmAdun 
 s %ROWCOUNT=%objcsd(%qHandle,1),SQLCODE=100,%objcsc(%qHandle)=100
 s:$d(%sqltime) %objcsd(%qHandle,6)=$g(%objcsd(%qHandle,6))+$zh-%sqltime
 //-- no [more] data
 quit
%QExtent0c i '$g(%objcsc(%qHandle)) { s SQLCODE=-102 q  }
 n %sqltime s %sqltime=$zh
 s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%objcsd(%qHandle,1)),1:0)
 if $g(%objcsd(%qHandle,3))=1 { if $g(%objcsd(%qHandle,4))=1 { l -@%objcsd(%qHandle,5) } elseif $g(%objcsd(%qHandle,4))=2 { do $classmethod($li(%objcsd(%qHandle,5)),"%UnlockId",$li(%objcsd(%qHandle,5),2),1,1)  } }
 s:$d(%sqltime) %objcsd(%qHandle,6)=$g(%objcsd(%qHandle,6))+$zh-%sqltime
 n context,tmp,count,total,mean s context=$system.Context.SQL()
 if $d(%objcsd(%qHandle,6),%sqltime) {
 if $g(context.Stats)<$zu(99) { d AggregateStats^%SYS.SQLSRV() }
 s tmp=$g(context.Stats($namespace,"GQ4NcuZZhA9e7tQNnr/tOOi+SwI="))
 s count=$lg(tmp,1),total=$lg(tmp,2),mean=total+%sqltime/(count+1)
 s context.Stats($namespace,"GQ4NcuZZhA9e7tQNnr/tOOi+SwI=")=$lb(count+1,total+%sqltime,$s(+count=0:0,1:(%sqltime-mean)**2+(count*((total/count-mean)**2+$lg(tmp,3)))/(count+1))) }
 k %objcsd(%qHandle),%objcsc(%qHandle)
 s SQLCODE=0
 quit  // close
%0Merr d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 s %objcsc(%qHandle)=100
 quit  // error
%0Qo try { do %QExtent0f q:SQLCODE'=0
 s c1=%objcsd(%qHandle,7)
 } catch { do %0Merr }
 q
%0Ro try { do %QExtent0f q:SQLCODE'=0
 s c1=%objcsd(%qHandle,7)
 } catch { do %0Merr }
 q
zExtentFunc() public {
	try {
		set tSchemaPath = ##class(%SQL.Statement).%ClassPath($classname())
			set tStatement = ##class(%SQL.Statement).%New(,tSchemaPath)
			do tStatement.prepare(" SELECT ID FROM SQLUser . Towar")
		set tResult = tStatement.%Execute()
	}
	catch tException { if '$Isobject($Get(tResult)) { set tResult = ##class(%SQL.StatementResult).%New() } set tResult.%SQLCODE=tException.AsSQLCODE(),tResult.%Message=tException.AsSQLMessage() }
	Quit tResult }
zExtentGetInfo(colinfo,parminfo,idinfo,%qHandle,extoption=0,extinfo) public {
 s parminfo=""
	s:'($d(^oddCOM($classname(),"q","Extent",21),clientinfo)#2)&&'$s($d(^(2),clientinfo)#2&&(clientinfo'=$classname()):$d(^oddCOM(clientinfo,"q","Extent",21),clientinfo)#2||($d(^oddDEF(clientinfo,"q","Extent",21),clientinfo)#2),1:$d(^oddDEF($classname(),"q","Extent",21),clientinfo)#2) clientinfo=""
	Set:extoption extinfo=$s($d(^oddCOM($classname(),"q","Extent",38))#2:^(38),$d(^oddCOM($g(^(2),$classname()),"q","Extent",38))#2:^(38),1:$s($d(^oddDEF($g(^oddCOM($classname(),"q","Extent",2),$classname()),"q","Extent",38))#2:^(38),1:""))
	If clientinfo'="" Set colinfo=$listget(clientinfo,1),parminfo=$listget(clientinfo,2),idinfo=$listget(clientinfo,3) Quit 1
	Set colinfo="",parminfo="",idinfo=$listbuild(0)
	Set sc=$$externaltype^%apiOLE("%Library.Integer",.exttypes,"0")
	Quit:('sc) sc
	s:'($d(^oddCOM($classname(),"q","Extent",23),names)#2)&&'$s($d(^(2),names)#2&&(names'=$classname()):$d(^oddCOM(names,"q","Extent",23),names)#2||($d(^oddDEF(names,"q","Extent",23),names)#2),1:$d(^oddDEF($classname(),"q","Extent",23),names)#2) names=""
	s:'($d(^oddCOM($classname(),"q","Extent",22),captions)#2)&&'$s($d(^(2),captions)#2&&(captions'=$classname()):$d(^oddCOM(captions,"q","Extent",22),captions)#2||($d(^oddDEF(captions,"q","Extent",22),captions)#2),1:$d(^oddDEF($classname(),"q","Extent",22),captions)#2) captions=""
	For i=1:1:1 Set colinfo=colinfo_$listbuild($listbuild($listget(names,i),$piece(exttypes,",",i),$listget(captions,i)))
	Set idinfo=$listbuild(1,$classname())
	s ^oddCOM($classname(),"q","Extent",21)=$listbuild(colinfo,parminfo,idinfo)
	Quit 1 }
zExtentGetODBCInfo(colinfo,parminfo,qHandle) public {
	set version = $Select($Get(%protocol,41)>40:4,1:3)
	Set metadata=$lb(1,1,"ID",4,10,0,2,"ID","Towar","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,1),0)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	If version=4 {
		Set colinfo=$li(metadata,2,2+cmdlen)
	} Else {
		Set colinfo=$li(metadata,2,2)
		For i=0:1:colcount-1 Set colinfo=colinfo_$list(metadata,3+(i*10),11+(i*10))
	}
	Quit 1 }
zpozycjaTowaruCheck(id="",lockonly=0) public {
	Quit ##class(User.PozycjaFaktury).%1Check(id,lockonly)
}
zpozycjaTowaruDelete(id="",concurrency=-1) public {
	quit ..pozycjaTowaruOnDelete(.id,.concurrency) }
zpozycjaTowaruSQLFKeyExists(%p...)
	new %ROWCOUNT,%ROWID,%msg,SQLCODE
	 ;---&sql(SELECT pozycjaTowaru
 	 ;---	     FROM   SQLUser.Towar
 	 ;---	     WHERE  pozycjaTowaru=:%p(1))
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, SQLCODE
	do %0So
	QUIT SQLCODE=0
 q
%0So n sqldata7d,sqldata8d,sqldata9d,sqldata11d,sqldata15d,sqldata16d,sqldata2d,sqldata4d,sqldata1d,sqldata5d,sqldata6d
 s $zt="%0Serr"
 n %sqltime s %sqltime=$zh
 s sqldata7d=$zu(115,2)
 s sqldata8d=0,sqldata9d=""
 d:$zu(115,15) $system.ECP.Sync()
 s sqldata2d=$g(%p(1)),sqldata2d=$s(sqldata2d="":"",$isvalidnum(sqldata2d):+sqldata2d,1:sqldata2d)
 s SQLCODE=100
 ; asl MOD# 2
 s sqldata4d=""
%0SmBk1 s sqldata11d="" s sqldata4d=$o(^User.TowarD(sqldata4d),1,sqldata11d)
 i sqldata4d="" g %0SmBdun
 Set sqldata1d=$lg(sqldata11d,4)
 g:'(sqldata1d=sqldata2d) %0SmBk1
 g:'(sqldata1d'="") %0SmBk1
 goto:sqldata7d'=1 %0SmBuncommitted
 if sqldata7d=1 {
 	lock +^User.TowarD($p(sqldata4d,"||",1))#"S":$zu(115,4)
 	if $t { set sqldata9d=$name(^User.TowarD($p(sqldata4d,"||",1)))_"#""SI""",sqldata8d=1 }
 	else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.Towar for RowID value: "_sqldata4d ztrap "LOCK"  }
 }
 ; asl MOD# 3
 s sqldata5d=$zlist(sqldata1d)
 i sqldata4d'="" s sqldata15d="" i $d(^User.TowarD(sqldata4d),sqldata15d)
 e  g %0SmCdun
 Set sqldata1d=$lg(sqldata15d,4)
 s sqldata6d=$zlist(sqldata1d)
 g:sqldata5d'=sqldata6d %0SmCdun
%0SmBuncommitted ;
 s SQLCODE=0 g %0Sc
%0SmCdun if $g(sqldata7d)=1 { if $g(sqldata8d)=1 { l -@sqldata9d s sqldata8d=0 } elseif $g(sqldata8d)=2 { do $classmethod($li(sqldata9d),"%UnlockId",$li(sqldata9d,2),1,1)  s sqldata8d=0 } }
 g %0SmBk1
%0SmBdun 
%0SmAdun 
%0Sc s %ROWCOUNT='SQLCODE
 if $g(sqldata7d)=1 { if $g(sqldata8d)=1 { l -@sqldata9d } elseif $g(sqldata8d)=2 { do $classmethod($li(sqldata9d),"%UnlockId",$li(sqldata9d,2),1,1)  } }
 s:$d(%sqltime) sqldata16d=$g(sqldata16d)+$zh-%sqltime
 n context,tmp,count,total,mean s context=$system.Context.SQL()
 if $d(sqldata16d,%sqltime) {
 if $g(context.Stats)<$zu(99) { d AggregateStats^%SYS.SQLSRV() }
 s tmp=$g(context.Stats($namespace,"hrAmUe4C8EMHcm75ojrmf/11mUk="))
 s count=$lg(tmp,1),total=$lg(tmp,2),mean=total+%sqltime/(count+1)
 s context.Stats($namespace,"hrAmUe4C8EMHcm75ojrmf/11mUk=")=$lb(count+1,total+%sqltime,$s(+count=0:0,1:(%sqltime-mean)**2+(count*((total/count-mean)**2+$lg(tmp,3)))/(count+1))) }
 q
%0Serr s $zt=""
 d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 g %0Sc
zpozycjaTowaruSQLFKeyRefAction(pSameTable=0,k,pNoLock=0,%p...)
		// ON UPDATE/DELETE NOACTION
	quit:%p(1)="" 0 new rx set rx=..pozycjaTowaruSQLFKeyExists(%p(1)) set:rx %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler27",,"SQLUser"_"."_"Towar",k,"pozycjaTowaru","'pozycjaTowaru'") QUIT rx
zIDKEYCheck(K1,lockonly=0,concurrency=-1) public {
	s id=K1,exists=..%ExistsId(id) q:'exists $s('lockonly:$$Error^%apiOBJ(5797,$classname(),"IDKEY",id),1:1) s:concurrency=-1 concurrency=$select(..#DEFAULTCONCURRENCY="$zu(115,10)":$zu(115,10),1:$xecute("q "_..#DEFAULTCONCURRENCY)) if concurrency { s status=..%LockId(id,1) q:('status) status } if 'lockonly { s exists=..%ExistsId(id) d:concurrency ..%UnlockId(id,1,0) quit $s('exists:$$Error^%apiOBJ(5797,$classname(),"IDKEY",id),1:1) } else { d:concurrency ..%UnlockId(id,1,0) q 1 }
}
zIDKEYDelete(K1,concurrency=-1) public {
	Quit ..%DeleteId(.K1,concurrency) }
zIDKEYExists(K1,id="")
	s id=K1 q ..%ExistsId(K1)
	Quit
zIDKEYOpen(K1,concurrency=-1,sc) public { Set:'($data(sc)#2) sc=1
	Quit ..%OpenId(.K1,concurrency,.sc) }
zIDKEYSQLCheckUnique(pFromOrig=0,%pID,%pVals...)
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLCheckUnique")
zIDKEYSQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key IDKEY.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=%pVal(1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"SQLUser"_"."_"Towar"_":"_"IDKEY") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv=$d(^User.TowarD(%pVal(1))) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Quit
zIDKEYSQLFindPKeyByConstraint(%con)
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLFindPKeyByConstraint")
zIDKEYSQLFindRowIDByConstraint(%con,pInternal=0)
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLFindRowIDByConstraint")
zpozycjaTowaruIndexExists(K1,id="")
	new %ROWCOUNT,SQLCODE,temp
	 ;---&sql(SELECT %ID INTO :id FROM SQLUser.Towar WHERE (:K1 is not null and pozycjaTowaru = :K1) OR (:K1 IS NULL AND pozycjaTowaru IS NULL))
 	 ;--- ** SQL PUBLIC Variables: %msg, %ROWCOUNT, %ROWID, id, K1, SQLCODE
	do %0Uo
	Quit $select('SQLCODE:1,1:0)
 q
%0Uo n sqldata10d,sqldata11d,sqldata12d,sqldata14d,sqldata18d,sqldata19d,sqldata3d,sqldata5d,sqldata6d,sqldata4d,sqldata8d,sqldata9d
 s $zt="%0Uerr"
 n %sqltime s %sqltime=$zh
 s sqldata10d=$zu(115,2)
 s sqldata11d=0,sqldata12d=""
 d:$zu(115,15) $system.ECP.Sync()
 s sqldata3d=$g(K1),sqldata5d=$g(K1),sqldata5d=$s(sqldata5d="":"",$isvalidnum(sqldata5d):+sqldata5d,1:sqldata5d),sqldata6d=$g(K1)
 s SQLCODE=100
 ; asl MOD# 2
 s id=""
%0UmBk1 s sqldata14d="" s id=$o(^User.TowarD(id),1,sqldata14d)
 i id="" g %0UmBdun
 Set sqldata4d=$lg(sqldata14d,4)
 g:'(((sqldata4d'="")&&((sqldata3d'="")&&(sqldata4d=sqldata5d)))||((sqldata6d="")&&(sqldata4d=""))) %0UmBk1
 goto:sqldata10d'=1 %0UmBuncommitted
 if sqldata10d=1 {
 	lock +^User.TowarD($p(id,"||",1))#"S":$zu(115,4)
 	if $t { set sqldata12d=$name(^User.TowarD($p(id,"||",1)))_"#""SI""",sqldata11d=1 }
 	else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table SQLUser.Towar for RowID value: "_id ztrap "LOCK"  }
 }
 ; asl MOD# 3
 s sqldata8d=$zlist(sqldata4d)
 i id'="" s sqldata18d="" i $d(^User.TowarD(id),sqldata18d)
 e  g %0UmCdun
 Set sqldata4d=$lg(sqldata18d,4)
 s sqldata9d=$zlist(sqldata4d)
 g:sqldata8d'=sqldata9d %0UmCdun
%0UmBuncommitted ;
 s SQLCODE=0 g %0Uc
%0UmCdun if $g(sqldata10d)=1 { if $g(sqldata11d)=1 { l -@sqldata12d s sqldata11d=0 } elseif $g(sqldata11d)=2 { do $classmethod($li(sqldata12d),"%UnlockId",$li(sqldata12d,2),1,1)  s sqldata11d=0 } }
 g %0UmBk1
%0UmBdun 
%0UmAdun 
%0Uc s %ROWCOUNT='SQLCODE
 if $g(sqldata10d)=1 { if $g(sqldata11d)=1 { l -@sqldata12d } elseif $g(sqldata11d)=2 { do $classmethod($li(sqldata12d),"%UnlockId",$li(sqldata12d,2),1,1)  } }
 s:$d(%sqltime) sqldata19d=$g(sqldata19d)+$zh-%sqltime
 n context,tmp,count,total,mean s context=$system.Context.SQL()
 if $d(sqldata19d,%sqltime) {
 if $g(context.Stats)<$zu(99) { d AggregateStats^%SYS.SQLSRV() }
 s tmp=$g(context.Stats($namespace,"mVqRGblvXQ//9CbIsXfiW91OmtU="))
 s count=$lg(tmp,1),total=$lg(tmp,2),mean=total+%sqltime/(count+1)
 s context.Stats($namespace,"mVqRGblvXQ//9CbIsXfiW91OmtU=")=$lb(count+1,total+%sqltime,$s(+count=0:0,1:(%sqltime-mean)**2+(count*((total/count-mean)**2+$lg(tmp,3)))/(count+1))) }
 q
%0Uerr s $zt=""
 d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 g %0Uc
]]></Routine>


<Class name="User.Towar">
<Super>%Persistent,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>65172,74104.490707</TimeChanged>
<TimeCreated>65172,71037.763846</TimeCreated>

<Property name="nazwa">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="255"/>
<Parameter name="VALUELIST" value=",Apap, Ibuprofen, Krem Nivea, Strzykawka, Bandaz, Gripex"/>
</Property>

<Property name="cena">
<Type>%Integer</Type>
<Required>1</Required>
<Parameter name="MAXVAL" value="10000"/>
<Parameter name="MINVAL" value="1"/>
</Property>

<Property name="pozycjaTowaru">
<Type>User.PozycjaFaktury</Type>
<Cardinality>one</Cardinality>
<Inverse>towarNaPozycji</Inverse>
<Relationship>1</Relationship>
</Property>

<Index name="pozycjaTowaruIndex">
<Properties>pozycjaTowaru</Properties>
</Index>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.TowarD</DataLocation>
<DefaultData>TowarDefaultData</DefaultData>
<IdLocation>^User.TowarD</IdLocation>
<IndexLocation>^User.TowarI</IndexLocation>
<StreamLocation>^User.TowarS</StreamLocation>
<ExtentSize>10</ExtentSize>
<Data name="TowarDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>nazwa</Value>
</Value>
<Value name="3">
<Value>cena</Value>
</Value>
<Value name="4">
<Value>pozycjaTowaru</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>1.1</AverageFieldSize>
</Property>
<Property name="cena">
<Selectivity>10.0000%</Selectivity>
<AverageFieldSize>3.7</AverageFieldSize>
</Property>
<Property name="nazwa">
<Selectivity>25.0000%</Selectivity>
<AverageFieldSize>9.2</AverageFieldSize>
</Property>
<Property name="pozycjaTowaru">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
<SQLMap name="pozycjaTowaruIndex">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>
</Export>
